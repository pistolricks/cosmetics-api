package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/pistolricks/kbeauty-api/graph/model"
)

// CartAttributesUpdate is the resolver for the cartAttributesUpdate field.
func (r *mutationResolver) CartAttributesUpdate(ctx context.Context, attributes []*model.AttributeInput, cartID string) (*model.CartAttributesUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CartAttributesUpdate - cartAttributesUpdate"))
}

// CartBillingAddressUpdate is the resolver for the cartBillingAddressUpdate field.
func (r *mutationResolver) CartBillingAddressUpdate(ctx context.Context, billingAddress *model.MailingAddressInput, cartID string) (*model.CartBillingAddressUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CartBillingAddressUpdate - cartBillingAddressUpdate"))
}

// CartBuyerIdentityUpdate is the resolver for the cartBuyerIdentityUpdate field.
func (r *mutationResolver) CartBuyerIdentityUpdate(ctx context.Context, buyerIdentity model.CartBuyerIdentityInput, cartID string) (*model.CartBuyerIdentityUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CartBuyerIdentityUpdate - cartBuyerIdentityUpdate"))
}

// CartCreate is the resolver for the cartCreate field.
func (r *mutationResolver) CartCreate(ctx context.Context, input *model.CartInput) (*model.CartCreatePayload, error) {
	panic(fmt.Errorf("not implemented: CartCreate - cartCreate"))
}

// CartDeliveryAddressesAdd is the resolver for the cartDeliveryAddressesAdd field.
func (r *mutationResolver) CartDeliveryAddressesAdd(ctx context.Context, addresses []*model.CartSelectableAddressInput, cartID string) (*model.CartDeliveryAddressesAddPayload, error) {
	panic(fmt.Errorf("not implemented: CartDeliveryAddressesAdd - cartDeliveryAddressesAdd"))
}

// CartDeliveryAddressesRemove is the resolver for the cartDeliveryAddressesRemove field.
func (r *mutationResolver) CartDeliveryAddressesRemove(ctx context.Context, addressIds []string, cartID string) (*model.CartDeliveryAddressesRemovePayload, error) {
	panic(fmt.Errorf("not implemented: CartDeliveryAddressesRemove - cartDeliveryAddressesRemove"))
}

// CartDeliveryAddressesReplace is the resolver for the cartDeliveryAddressesReplace field.
func (r *mutationResolver) CartDeliveryAddressesReplace(ctx context.Context, addresses []*model.CartSelectableAddressInput, cartID string) (*model.CartDeliveryAddressesReplacePayload, error) {
	panic(fmt.Errorf("not implemented: CartDeliveryAddressesReplace - cartDeliveryAddressesReplace"))
}

// CartDeliveryAddressesUpdate is the resolver for the cartDeliveryAddressesUpdate field.
func (r *mutationResolver) CartDeliveryAddressesUpdate(ctx context.Context, addresses []*model.CartSelectableAddressUpdateInput, cartID string) (*model.CartDeliveryAddressesUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CartDeliveryAddressesUpdate - cartDeliveryAddressesUpdate"))
}

// CartDiscountCodesUpdate is the resolver for the cartDiscountCodesUpdate field.
func (r *mutationResolver) CartDiscountCodesUpdate(ctx context.Context, cartID string, discountCodes []string) (*model.CartDiscountCodesUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CartDiscountCodesUpdate - cartDiscountCodesUpdate"))
}

// CartGiftCardCodesRemove is the resolver for the cartGiftCardCodesRemove field.
func (r *mutationResolver) CartGiftCardCodesRemove(ctx context.Context, appliedGiftCardIds []string, cartID string) (*model.CartGiftCardCodesRemovePayload, error) {
	panic(fmt.Errorf("not implemented: CartGiftCardCodesRemove - cartGiftCardCodesRemove"))
}

// CartGiftCardCodesUpdate is the resolver for the cartGiftCardCodesUpdate field.
func (r *mutationResolver) CartGiftCardCodesUpdate(ctx context.Context, cartID string, giftCardCodes []string) (*model.CartGiftCardCodesUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CartGiftCardCodesUpdate - cartGiftCardCodesUpdate"))
}

// CartLinesAdd is the resolver for the cartLinesAdd field.
func (r *mutationResolver) CartLinesAdd(ctx context.Context, cartID string, lines []*model.CartLineInput) (*model.CartLinesAddPayload, error) {
	panic(fmt.Errorf("not implemented: CartLinesAdd - cartLinesAdd"))
}

// CartLinesRemove is the resolver for the cartLinesRemove field.
func (r *mutationResolver) CartLinesRemove(ctx context.Context, cartID string, lineIds []string) (*model.CartLinesRemovePayload, error) {
	panic(fmt.Errorf("not implemented: CartLinesRemove - cartLinesRemove"))
}

// CartLinesUpdate is the resolver for the cartLinesUpdate field.
func (r *mutationResolver) CartLinesUpdate(ctx context.Context, cartID string, lines []*model.CartLineUpdateInput) (*model.CartLinesUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CartLinesUpdate - cartLinesUpdate"))
}

// CartMetafieldDelete is the resolver for the cartMetafieldDelete field.
func (r *mutationResolver) CartMetafieldDelete(ctx context.Context, input model.CartMetafieldDeleteInput) (*model.CartMetafieldDeletePayload, error) {
	panic(fmt.Errorf("not implemented: CartMetafieldDelete - cartMetafieldDelete"))
}

// CartMetafieldsSet is the resolver for the cartMetafieldsSet field.
func (r *mutationResolver) CartMetafieldsSet(ctx context.Context, metafields []*model.CartMetafieldsSetInput) (*model.CartMetafieldsSetPayload, error) {
	panic(fmt.Errorf("not implemented: CartMetafieldsSet - cartMetafieldsSet"))
}

// CartNoteUpdate is the resolver for the cartNoteUpdate field.
func (r *mutationResolver) CartNoteUpdate(ctx context.Context, cartID string, note string) (*model.CartNoteUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CartNoteUpdate - cartNoteUpdate"))
}

// CartPaymentUpdate is the resolver for the cartPaymentUpdate field.
func (r *mutationResolver) CartPaymentUpdate(ctx context.Context, cartID string, payment model.CartPaymentInput) (*model.CartPaymentUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CartPaymentUpdate - cartPaymentUpdate"))
}

// CartPrepareForCompletion is the resolver for the cartPrepareForCompletion field.
func (r *mutationResolver) CartPrepareForCompletion(ctx context.Context, cartID string) (*model.CartPrepareForCompletionPayload, error) {
	panic(fmt.Errorf("not implemented: CartPrepareForCompletion - cartPrepareForCompletion"))
}

// CartRemovePersonalData is the resolver for the cartRemovePersonalData field.
func (r *mutationResolver) CartRemovePersonalData(ctx context.Context, cartID string) (*model.CartRemovePersonalDataPayload, error) {
	panic(fmt.Errorf("not implemented: CartRemovePersonalData - cartRemovePersonalData"))
}

// CartSelectedDeliveryOptionsUpdate is the resolver for the cartSelectedDeliveryOptionsUpdate field.
func (r *mutationResolver) CartSelectedDeliveryOptionsUpdate(ctx context.Context, cartID string, selectedDeliveryOptions []*model.CartSelectedDeliveryOptionInput) (*model.CartSelectedDeliveryOptionsUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CartSelectedDeliveryOptionsUpdate - cartSelectedDeliveryOptionsUpdate"))
}

// CartSubmitForCompletion is the resolver for the cartSubmitForCompletion field.
func (r *mutationResolver) CartSubmitForCompletion(ctx context.Context, attemptToken string, cartID string) (*model.CartSubmitForCompletionPayload, error) {
	panic(fmt.Errorf("not implemented: CartSubmitForCompletion - cartSubmitForCompletion"))
}

// CheckoutAttributesUpdateV2 is the resolver for the checkoutAttributesUpdateV2 field.
func (r *mutationResolver) CheckoutAttributesUpdateV2(ctx context.Context, checkoutID string, input model.CheckoutAttributesUpdateV2Input) (*model.CheckoutAttributesUpdateV2Payload, error) {
	panic(fmt.Errorf("not implemented: CheckoutAttributesUpdateV2 - checkoutAttributesUpdateV2"))
}

// CheckoutCompleteFree is the resolver for the checkoutCompleteFree field.
func (r *mutationResolver) CheckoutCompleteFree(ctx context.Context, checkoutID string) (*model.CheckoutCompleteFreePayload, error) {
	panic(fmt.Errorf("not implemented: CheckoutCompleteFree - checkoutCompleteFree"))
}

// CheckoutCompleteWithCreditCardV2 is the resolver for the checkoutCompleteWithCreditCardV2 field.
func (r *mutationResolver) CheckoutCompleteWithCreditCardV2(ctx context.Context, checkoutID string, payment model.CreditCardPaymentInputV2) (*model.CheckoutCompleteWithCreditCardV2Payload, error) {
	panic(fmt.Errorf("not implemented: CheckoutCompleteWithCreditCardV2 - checkoutCompleteWithCreditCardV2"))
}

// CheckoutCompleteWithTokenizedPaymentV3 is the resolver for the checkoutCompleteWithTokenizedPaymentV3 field.
func (r *mutationResolver) CheckoutCompleteWithTokenizedPaymentV3(ctx context.Context, checkoutID string, payment model.TokenizedPaymentInputV3) (*model.CheckoutCompleteWithTokenizedPaymentV3Payload, error) {
	panic(fmt.Errorf("not implemented: CheckoutCompleteWithTokenizedPaymentV3 - checkoutCompleteWithTokenizedPaymentV3"))
}

// CheckoutCreate is the resolver for the checkoutCreate field.
func (r *mutationResolver) CheckoutCreate(ctx context.Context, input model.CheckoutCreateInput, queueToken *string) (*model.CheckoutCreatePayload, error) {
	panic(fmt.Errorf("not implemented: CheckoutCreate - checkoutCreate"))
}

// CheckoutCustomerAssociateV2 is the resolver for the checkoutCustomerAssociateV2 field.
func (r *mutationResolver) CheckoutCustomerAssociateV2(ctx context.Context, checkoutID string, customerAccessToken string) (*model.CheckoutCustomerAssociateV2Payload, error) {
	panic(fmt.Errorf("not implemented: CheckoutCustomerAssociateV2 - checkoutCustomerAssociateV2"))
}

// CheckoutCustomerDisassociateV2 is the resolver for the checkoutCustomerDisassociateV2 field.
func (r *mutationResolver) CheckoutCustomerDisassociateV2(ctx context.Context, checkoutID string) (*model.CheckoutCustomerDisassociateV2Payload, error) {
	panic(fmt.Errorf("not implemented: CheckoutCustomerDisassociateV2 - checkoutCustomerDisassociateV2"))
}

// CheckoutDiscountCodeApplyV2 is the resolver for the checkoutDiscountCodeApplyV2 field.
func (r *mutationResolver) CheckoutDiscountCodeApplyV2(ctx context.Context, checkoutID string, discountCode string) (*model.CheckoutDiscountCodeApplyV2Payload, error) {
	panic(fmt.Errorf("not implemented: CheckoutDiscountCodeApplyV2 - checkoutDiscountCodeApplyV2"))
}

// CheckoutDiscountCodeRemove is the resolver for the checkoutDiscountCodeRemove field.
func (r *mutationResolver) CheckoutDiscountCodeRemove(ctx context.Context, checkoutID string) (*model.CheckoutDiscountCodeRemovePayload, error) {
	panic(fmt.Errorf("not implemented: CheckoutDiscountCodeRemove - checkoutDiscountCodeRemove"))
}

// CheckoutEmailUpdateV2 is the resolver for the checkoutEmailUpdateV2 field.
func (r *mutationResolver) CheckoutEmailUpdateV2(ctx context.Context, checkoutID string, email string) (*model.CheckoutEmailUpdateV2Payload, error) {
	panic(fmt.Errorf("not implemented: CheckoutEmailUpdateV2 - checkoutEmailUpdateV2"))
}

// CheckoutGiftCardRemoveV2 is the resolver for the checkoutGiftCardRemoveV2 field.
func (r *mutationResolver) CheckoutGiftCardRemoveV2(ctx context.Context, appliedGiftCardID string, checkoutID string) (*model.CheckoutGiftCardRemoveV2Payload, error) {
	panic(fmt.Errorf("not implemented: CheckoutGiftCardRemoveV2 - checkoutGiftCardRemoveV2"))
}

// CheckoutGiftCardsAppend is the resolver for the checkoutGiftCardsAppend field.
func (r *mutationResolver) CheckoutGiftCardsAppend(ctx context.Context, checkoutID string, giftCardCodes []string) (*model.CheckoutGiftCardsAppendPayload, error) {
	panic(fmt.Errorf("not implemented: CheckoutGiftCardsAppend - checkoutGiftCardsAppend"))
}

// CheckoutLineItemsAdd is the resolver for the checkoutLineItemsAdd field.
func (r *mutationResolver) CheckoutLineItemsAdd(ctx context.Context, checkoutID string, lineItems []*model.CheckoutLineItemInput) (*model.CheckoutLineItemsAddPayload, error) {
	panic(fmt.Errorf("not implemented: CheckoutLineItemsAdd - checkoutLineItemsAdd"))
}

// CheckoutLineItemsRemove is the resolver for the checkoutLineItemsRemove field.
func (r *mutationResolver) CheckoutLineItemsRemove(ctx context.Context, checkoutID string, lineItemIds []string) (*model.CheckoutLineItemsRemovePayload, error) {
	panic(fmt.Errorf("not implemented: CheckoutLineItemsRemove - checkoutLineItemsRemove"))
}

// CheckoutLineItemsReplace is the resolver for the checkoutLineItemsReplace field.
func (r *mutationResolver) CheckoutLineItemsReplace(ctx context.Context, checkoutID string, lineItems []*model.CheckoutLineItemInput) (*model.CheckoutLineItemsReplacePayload, error) {
	panic(fmt.Errorf("not implemented: CheckoutLineItemsReplace - checkoutLineItemsReplace"))
}

// CheckoutLineItemsUpdate is the resolver for the checkoutLineItemsUpdate field.
func (r *mutationResolver) CheckoutLineItemsUpdate(ctx context.Context, checkoutID string, lineItems []*model.CheckoutLineItemUpdateInput) (*model.CheckoutLineItemsUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CheckoutLineItemsUpdate - checkoutLineItemsUpdate"))
}

// CheckoutShippingAddressUpdateV2 is the resolver for the checkoutShippingAddressUpdateV2 field.
func (r *mutationResolver) CheckoutShippingAddressUpdateV2(ctx context.Context, checkoutID string, shippingAddress model.MailingAddressInput) (*model.CheckoutShippingAddressUpdateV2Payload, error) {
	panic(fmt.Errorf("not implemented: CheckoutShippingAddressUpdateV2 - checkoutShippingAddressUpdateV2"))
}

// CheckoutShippingLineUpdate is the resolver for the checkoutShippingLineUpdate field.
func (r *mutationResolver) CheckoutShippingLineUpdate(ctx context.Context, checkoutID string, shippingRateHandle string) (*model.CheckoutShippingLineUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CheckoutShippingLineUpdate - checkoutShippingLineUpdate"))
}

// CustomerAccessTokenCreate is the resolver for the customerAccessTokenCreate field.
func (r *mutationResolver) CustomerAccessTokenCreate(ctx context.Context, input model.CustomerAccessTokenCreateInput) (*model.CustomerAccessTokenCreatePayload, error) {
	panic(fmt.Errorf("not implemented: CustomerAccessTokenCreate - customerAccessTokenCreate"))
}

// CustomerAccessTokenCreateWithMultipass is the resolver for the customerAccessTokenCreateWithMultipass field.
func (r *mutationResolver) CustomerAccessTokenCreateWithMultipass(ctx context.Context, multipassToken string) (*model.CustomerAccessTokenCreateWithMultipassPayload, error) {
	panic(fmt.Errorf("not implemented: CustomerAccessTokenCreateWithMultipass - customerAccessTokenCreateWithMultipass"))
}

// CustomerAccessTokenDelete is the resolver for the customerAccessTokenDelete field.
func (r *mutationResolver) CustomerAccessTokenDelete(ctx context.Context, customerAccessToken string) (*model.CustomerAccessTokenDeletePayload, error) {
	panic(fmt.Errorf("not implemented: CustomerAccessTokenDelete - customerAccessTokenDelete"))
}

// CustomerAccessTokenRenew is the resolver for the customerAccessTokenRenew field.
func (r *mutationResolver) CustomerAccessTokenRenew(ctx context.Context, customerAccessToken string) (*model.CustomerAccessTokenRenewPayload, error) {
	panic(fmt.Errorf("not implemented: CustomerAccessTokenRenew - customerAccessTokenRenew"))
}

// CustomerActivate is the resolver for the customerActivate field.
func (r *mutationResolver) CustomerActivate(ctx context.Context, id string, input model.CustomerActivateInput) (*model.CustomerActivatePayload, error) {
	panic(fmt.Errorf("not implemented: CustomerActivate - customerActivate"))
}

// CustomerActivateByURL is the resolver for the customerActivateByUrl field.
func (r *mutationResolver) CustomerActivateByURL(ctx context.Context, activationURL string, password string) (*model.CustomerActivateByURLPayload, error) {
	panic(fmt.Errorf("not implemented: CustomerActivateByURL - customerActivateByUrl"))
}

// CustomerAddressCreate is the resolver for the customerAddressCreate field.
func (r *mutationResolver) CustomerAddressCreate(ctx context.Context, address model.MailingAddressInput, customerAccessToken string) (*model.CustomerAddressCreatePayload, error) {
	panic(fmt.Errorf("not implemented: CustomerAddressCreate - customerAddressCreate"))
}

// CustomerAddressDelete is the resolver for the customerAddressDelete field.
func (r *mutationResolver) CustomerAddressDelete(ctx context.Context, customerAccessToken string, id string) (*model.CustomerAddressDeletePayload, error) {
	panic(fmt.Errorf("not implemented: CustomerAddressDelete - customerAddressDelete"))
}

// CustomerAddressUpdate is the resolver for the customerAddressUpdate field.
func (r *mutationResolver) CustomerAddressUpdate(ctx context.Context, address model.MailingAddressInput, customerAccessToken string, id string) (*model.CustomerAddressUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CustomerAddressUpdate - customerAddressUpdate"))
}

// CustomerCreate is the resolver for the customerCreate field.
func (r *mutationResolver) CustomerCreate(ctx context.Context, input model.CustomerCreateInput) (*model.CustomerCreatePayload, error) {
	panic(fmt.Errorf("not implemented: CustomerCreate - customerCreate"))
}

// CustomerDefaultAddressUpdate is the resolver for the customerDefaultAddressUpdate field.
func (r *mutationResolver) CustomerDefaultAddressUpdate(ctx context.Context, addressID string, customerAccessToken string) (*model.CustomerDefaultAddressUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CustomerDefaultAddressUpdate - customerDefaultAddressUpdate"))
}

// CustomerRecover is the resolver for the customerRecover field.
func (r *mutationResolver) CustomerRecover(ctx context.Context, email string) (*model.CustomerRecoverPayload, error) {
	panic(fmt.Errorf("not implemented: CustomerRecover - customerRecover"))
}

// CustomerReset is the resolver for the customerReset field.
func (r *mutationResolver) CustomerReset(ctx context.Context, id string, input model.CustomerResetInput) (*model.CustomerResetPayload, error) {
	panic(fmt.Errorf("not implemented: CustomerReset - customerReset"))
}

// CustomerResetByURL is the resolver for the customerResetByUrl field.
func (r *mutationResolver) CustomerResetByURL(ctx context.Context, password string, resetURL string) (*model.CustomerResetByURLPayload, error) {
	panic(fmt.Errorf("not implemented: CustomerResetByURL - customerResetByUrl"))
}

// CustomerUpdate is the resolver for the customerUpdate field.
func (r *mutationResolver) CustomerUpdate(ctx context.Context, customer model.CustomerUpdateInput, customerAccessToken string) (*model.CustomerUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: CustomerUpdate - customerUpdate"))
}

// ShopPayPaymentRequestSessionCreate is the resolver for the shopPayPaymentRequestSessionCreate field.
func (r *mutationResolver) ShopPayPaymentRequestSessionCreate(ctx context.Context, paymentRequest model.ShopPayPaymentRequestInput, sourceIdentifier string) (*model.ShopPayPaymentRequestSessionCreatePayload, error) {
	panic(fmt.Errorf("not implemented: ShopPayPaymentRequestSessionCreate - shopPayPaymentRequestSessionCreate"))
}

// ShopPayPaymentRequestSessionSubmit is the resolver for the shopPayPaymentRequestSessionSubmit field.
func (r *mutationResolver) ShopPayPaymentRequestSessionSubmit(ctx context.Context, idempotencyKey string, orderName *string, paymentRequest model.ShopPayPaymentRequestInput, token string) (*model.ShopPayPaymentRequestSessionSubmitPayload, error) {
	panic(fmt.Errorf("not implemented: ShopPayPaymentRequestSessionSubmit - shopPayPaymentRequestSessionSubmit"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }
type queryResolver struct{ *Resolver }
*/
