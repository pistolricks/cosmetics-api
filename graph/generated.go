// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/pistolricks/kbeauty-api/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
}

type DirectiveRoot struct {
	AccessRestricted func(ctx context.Context, obj any, next graphql.Resolver, reason *string) (res any, err error)
	Defer            func(ctx context.Context, obj any, next graphql.Resolver, ifArg *bool, label *string) (res any, err error)
	InContext        func(ctx context.Context, obj any, next graphql.Resolver, buyer *model.BuyerInput, country *model.CountryCode, language *model.LanguageCode, preferredLocationID *string) (res any, err error)
}

type ComplexityRoot struct {
	ApiVersion struct {
		DisplayName func(childComplexity int) int
		Handle      func(childComplexity int) int
		Supported   func(childComplexity int) int
	}

	AppliedGiftCard struct {
		AmountUsed            func(childComplexity int) int
		AmountUsedV2          func(childComplexity int) int
		Balance               func(childComplexity int) int
		BalanceV2             func(childComplexity int) int
		ID                    func(childComplexity int) int
		LastCharacters        func(childComplexity int) int
		PresentmentAmountUsed func(childComplexity int) int
	}

	Article struct {
		Author             func(childComplexity int) int
		AuthorV2           func(childComplexity int) int
		Blog               func(childComplexity int) int
		Comments           func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		Content            func(childComplexity int, truncateAt *int32) int
		ContentHTML        func(childComplexity int) int
		Excerpt            func(childComplexity int, truncateAt *int32) int
		ExcerptHTML        func(childComplexity int) int
		Handle             func(childComplexity int) int
		ID                 func(childComplexity int) int
		Image              func(childComplexity int) int
		Metafield          func(childComplexity int, key string, namespace *string) int
		Metafields         func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		OnlineStoreURL     func(childComplexity int) int
		PublishedAt        func(childComplexity int) int
		Seo                func(childComplexity int) int
		Tags               func(childComplexity int) int
		Title              func(childComplexity int) int
		TrackingParameters func(childComplexity int) int
	}

	ArticleAuthor struct {
		Bio       func(childComplexity int) int
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		LastName  func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	ArticleConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ArticleEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Attribute struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	AutomaticDiscountApplication struct {
		AllocationMethod func(childComplexity int) int
		TargetSelection  func(childComplexity int) int
		TargetType       func(childComplexity int) int
		Title            func(childComplexity int) int
		Value            func(childComplexity int) int
	}

	AvailableShippingRates struct {
		Ready         func(childComplexity int) int
		ShippingRates func(childComplexity int) int
	}

	BaseCartLineConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BaseCartLineEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Blog struct {
		ArticleByHandle func(childComplexity int, handle string) int
		Articles        func(childComplexity int, after *string, before *string, first *int32, last *int32, query *string, reverse *bool, sortKey *model.ArticleSortKeys) int
		Authors         func(childComplexity int) int
		Handle          func(childComplexity int) int
		ID              func(childComplexity int) int
		Metafield       func(childComplexity int, key string, namespace *string) int
		Metafields      func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		OnlineStoreURL  func(childComplexity int) int
		Seo             func(childComplexity int) int
		Title           func(childComplexity int) int
	}

	BlogConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BlogEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Brand struct {
		Colors           func(childComplexity int) int
		CoverImage       func(childComplexity int) int
		Logo             func(childComplexity int) int
		ShortDescription func(childComplexity int) int
		Slogan           func(childComplexity int) int
		SquareLogo       func(childComplexity int) int
	}

	BrandColorGroup struct {
		Background func(childComplexity int) int
		Foreground func(childComplexity int) int
	}

	BrandColors struct {
		Primary   func(childComplexity int) int
		Secondary func(childComplexity int) int
	}

	Cart struct {
		AppliedGiftCards    func(childComplexity int) int
		Attribute           func(childComplexity int, key string) int
		Attributes          func(childComplexity int) int
		BuyerIdentity       func(childComplexity int) int
		CheckoutURL         func(childComplexity int) int
		Cost                func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		Delivery            func(childComplexity int) int
		DeliveryGroups      func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool, withCarrierRates *bool) int
		DiscountAllocations func(childComplexity int) int
		DiscountCodes       func(childComplexity int) int
		EstimatedCost       func(childComplexity int) int
		ID                  func(childComplexity int) int
		Lines               func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		Metafield           func(childComplexity int, key string, namespace *string) int
		Metafields          func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		Note                func(childComplexity int) int
		TotalQuantity       func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
	}

	CartAttributesUpdatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartAutomaticDiscountAllocation struct {
		DiscountApplication func(childComplexity int) int
		DiscountedAmount    func(childComplexity int) int
		TargetType          func(childComplexity int) int
		Title               func(childComplexity int) int
	}

	CartBillingAddressUpdatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartBuyerIdentity struct {
		CountryCode                func(childComplexity int) int
		Customer                   func(childComplexity int) int
		DeliveryAddressPreferences func(childComplexity int) int
		Email                      func(childComplexity int) int
		Phone                      func(childComplexity int) int
		Preferences                func(childComplexity int) int
		PurchasingCompany          func(childComplexity int) int
	}

	CartBuyerIdentityUpdatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartCodeDiscountAllocation struct {
		Code                func(childComplexity int) int
		DiscountApplication func(childComplexity int) int
		DiscountedAmount    func(childComplexity int) int
		TargetType          func(childComplexity int) int
	}

	CartCompletionActionRequired struct {
		Action func(childComplexity int) int
		ID     func(childComplexity int) int
	}

	CartCompletionFailed struct {
		Errors func(childComplexity int) int
		ID     func(childComplexity int) int
	}

	CartCompletionProcessing struct {
		ID        func(childComplexity int) int
		PollDelay func(childComplexity int) int
	}

	CartCompletionSuccess struct {
		CompletedAt func(childComplexity int) int
		ID          func(childComplexity int) int
		OrderID     func(childComplexity int) int
		OrderURL    func(childComplexity int) int
	}

	CartCost struct {
		CheckoutChargeAmount     func(childComplexity int) int
		SubtotalAmount           func(childComplexity int) int
		SubtotalAmountEstimated  func(childComplexity int) int
		TotalAmount              func(childComplexity int) int
		TotalAmountEstimated     func(childComplexity int) int
		TotalDutyAmount          func(childComplexity int) int
		TotalDutyAmountEstimated func(childComplexity int) int
		TotalTaxAmount           func(childComplexity int) int
		TotalTaxAmountEstimated  func(childComplexity int) int
	}

	CartCreatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartCustomDiscountAllocation struct {
		DiscountApplication func(childComplexity int) int
		DiscountedAmount    func(childComplexity int) int
		TargetType          func(childComplexity int) int
		Title               func(childComplexity int) int
	}

	CartDelivery struct {
		Addresses func(childComplexity int, selected *bool) int
	}

	CartDeliveryAddress struct {
		Address1      func(childComplexity int) int
		Address2      func(childComplexity int) int
		City          func(childComplexity int) int
		Company       func(childComplexity int) int
		CountryCode   func(childComplexity int) int
		FirstName     func(childComplexity int) int
		Formatted     func(childComplexity int, withCompany *bool, withName *bool) int
		FormattedArea func(childComplexity int) int
		LastName      func(childComplexity int) int
		Latitude      func(childComplexity int) int
		Longitude     func(childComplexity int) int
		Name          func(childComplexity int) int
		Phone         func(childComplexity int) int
		ProvinceCode  func(childComplexity int) int
		Zip           func(childComplexity int) int
	}

	CartDeliveryAddressesAddPayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartDeliveryAddressesRemovePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartDeliveryAddressesReplacePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartDeliveryAddressesUpdatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartDeliveryCoordinatesPreference struct {
		CountryCode func(childComplexity int) int
		Latitude    func(childComplexity int) int
		Longitude   func(childComplexity int) int
	}

	CartDeliveryGroup struct {
		CartLines              func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		DeliveryAddress        func(childComplexity int) int
		DeliveryOptions        func(childComplexity int) int
		GroupType              func(childComplexity int) int
		ID                     func(childComplexity int) int
		SelectedDeliveryOption func(childComplexity int) int
	}

	CartDeliveryGroupConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CartDeliveryGroupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CartDeliveryOption struct {
		Code               func(childComplexity int) int
		DeliveryMethodType func(childComplexity int) int
		Description        func(childComplexity int) int
		EstimatedCost      func(childComplexity int) int
		Handle             func(childComplexity int) int
		Title              func(childComplexity int) int
	}

	CartDeliveryPreference struct {
		Coordinates    func(childComplexity int) int
		DeliveryMethod func(childComplexity int) int
		PickupHandle   func(childComplexity int) int
	}

	CartDiscountApplication struct {
		AllocationMethod func(childComplexity int) int
		TargetSelection  func(childComplexity int) int
		TargetType       func(childComplexity int) int
		Value            func(childComplexity int) int
	}

	CartDiscountCode struct {
		Applicable func(childComplexity int) int
		Code       func(childComplexity int) int
	}

	CartDiscountCodesUpdatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartEstimatedCost struct {
		CheckoutChargeAmount func(childComplexity int) int
		SubtotalAmount       func(childComplexity int) int
		TotalAmount          func(childComplexity int) int
		TotalDutyAmount      func(childComplexity int) int
		TotalTaxAmount       func(childComplexity int) int
	}

	CartGiftCardCodesRemovePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartGiftCardCodesUpdatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartLine struct {
		Attribute             func(childComplexity int, key string) int
		Attributes            func(childComplexity int) int
		Cost                  func(childComplexity int) int
		DiscountAllocations   func(childComplexity int) int
		EstimatedCost         func(childComplexity int) int
		ID                    func(childComplexity int) int
		Merchandise           func(childComplexity int) int
		Quantity              func(childComplexity int) int
		SellingPlanAllocation func(childComplexity int) int
	}

	CartLineCost struct {
		AmountPerQuantity          func(childComplexity int) int
		CompareAtAmountPerQuantity func(childComplexity int) int
		SubtotalAmount             func(childComplexity int) int
		TotalAmount                func(childComplexity int) int
	}

	CartLineEstimatedCost struct {
		Amount          func(childComplexity int) int
		CompareAtAmount func(childComplexity int) int
		SubtotalAmount  func(childComplexity int) int
		TotalAmount     func(childComplexity int) int
	}

	CartLinesAddPayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartLinesRemovePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartLinesUpdatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartMetafieldDeletePayload struct {
		DeletedID  func(childComplexity int) int
		UserErrors func(childComplexity int) int
	}

	CartMetafieldsSetPayload struct {
		Metafields func(childComplexity int) int
		UserErrors func(childComplexity int) int
	}

	CartNoteUpdatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartOperationError struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CartPaymentUpdatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartPreferences struct {
		Delivery func(childComplexity int) int
		Wallet   func(childComplexity int) int
	}

	CartPrepareForCompletionPayload struct {
		Result     func(childComplexity int) int
		UserErrors func(childComplexity int) int
	}

	CartRemovePersonalDataPayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartSelectableAddress struct {
		Address    func(childComplexity int) int
		ID         func(childComplexity int) int
		OneTimeUse func(childComplexity int) int
		Selected   func(childComplexity int) int
	}

	CartSelectedDeliveryOptionsUpdatePayload struct {
		Cart       func(childComplexity int) int
		UserErrors func(childComplexity int) int
		Warnings   func(childComplexity int) int
	}

	CartStatusNotReady struct {
		Cart   func(childComplexity int) int
		Errors func(childComplexity int) int
	}

	CartStatusReady struct {
		Cart func(childComplexity int) int
	}

	CartSubmitForCompletionPayload struct {
		Result     func(childComplexity int) int
		UserErrors func(childComplexity int) int
	}

	CartThrottled struct {
		Cart      func(childComplexity int) int
		PollAfter func(childComplexity int) int
	}

	CartUserError struct {
		Code    func(childComplexity int) int
		Field   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CartWarning struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Target  func(childComplexity int) int
	}

	Checkout struct {
		AppliedGiftCards            func(childComplexity int) int
		AvailableShippingRates      func(childComplexity int) int
		BuyerIdentity               func(childComplexity int) int
		CompletedAt                 func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CurrencyCode                func(childComplexity int) int
		CustomAttributes            func(childComplexity int) int
		DiscountApplications        func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		Email                       func(childComplexity int) int
		ID                          func(childComplexity int) int
		LineItems                   func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		LineItemsSubtotalPrice      func(childComplexity int) int
		Note                        func(childComplexity int) int
		Order                       func(childComplexity int) int
		OrderStatusURL              func(childComplexity int) int
		PaymentDue                  func(childComplexity int) int
		PaymentDueV2                func(childComplexity int) int
		Ready                       func(childComplexity int) int
		RequiresShipping            func(childComplexity int) int
		ShippingAddress             func(childComplexity int) int
		ShippingDiscountAllocations func(childComplexity int) int
		ShippingLine                func(childComplexity int) int
		SubtotalPrice               func(childComplexity int) int
		SubtotalPriceV2             func(childComplexity int) int
		TaxExempt                   func(childComplexity int) int
		TaxesIncluded               func(childComplexity int) int
		TotalDuties                 func(childComplexity int) int
		TotalPrice                  func(childComplexity int) int
		TotalPriceV2                func(childComplexity int) int
		TotalTax                    func(childComplexity int) int
		TotalTaxV2                  func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		WebURL                      func(childComplexity int) int
	}

	CheckoutAttributesUpdateV2Payload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutBuyerIdentity struct {
		CountryCode func(childComplexity int) int
	}

	CheckoutCompleteFreePayload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutCompleteWithCreditCardV2Payload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		Payment            func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutCompleteWithTokenizedPaymentV3Payload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		Payment            func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutCreatePayload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		QueueToken         func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutCustomerAssociateV2Payload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		Customer           func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutCustomerDisassociateV2Payload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutDiscountCodeApplyV2Payload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutDiscountCodeRemovePayload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutEmailUpdateV2Payload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutGiftCardRemoveV2Payload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutGiftCardsAppendPayload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutLineItem struct {
		CustomAttributes    func(childComplexity int) int
		DiscountAllocations func(childComplexity int) int
		ID                  func(childComplexity int) int
		Quantity            func(childComplexity int) int
		Title               func(childComplexity int) int
		UnitPrice           func(childComplexity int) int
		Variant             func(childComplexity int) int
	}

	CheckoutLineItemConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CheckoutLineItemEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CheckoutLineItemsAddPayload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutLineItemsRemovePayload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutLineItemsReplacePayload struct {
		Checkout   func(childComplexity int) int
		UserErrors func(childComplexity int) int
	}

	CheckoutLineItemsUpdatePayload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutShippingAddressUpdateV2Payload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutShippingLineUpdatePayload struct {
		Checkout           func(childComplexity int) int
		CheckoutUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CheckoutUserError struct {
		Code    func(childComplexity int) int
		Field   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	Collection struct {
		Description        func(childComplexity int, truncateAt *int32) int
		DescriptionHTML    func(childComplexity int) int
		Handle             func(childComplexity int) int
		ID                 func(childComplexity int) int
		Image              func(childComplexity int) int
		Metafield          func(childComplexity int, key string, namespace *string) int
		Metafields         func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		OnlineStoreURL     func(childComplexity int) int
		Products           func(childComplexity int, after *string, before *string, filters []*model.ProductFilter, first *int32, last *int32, reverse *bool, sortKey *model.ProductCollectionSortKeys) int
		Seo                func(childComplexity int) int
		Title              func(childComplexity int) int
		TrackingParameters func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	CollectionConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CollectionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Comment struct {
		Author      func(childComplexity int) int
		Content     func(childComplexity int, truncateAt *int32) int
		ContentHTML func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	CommentAuthor struct {
		Email func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	CommentConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CommentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Company struct {
		CreatedAt  func(childComplexity int) int
		ExternalID func(childComplexity int) int
		ID         func(childComplexity int) int
		Metafield  func(childComplexity int, key string, namespace *string) int
		Metafields func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		Name       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	CompanyContact struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Locale    func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	CompanyLocation struct {
		CreatedAt  func(childComplexity int) int
		ExternalID func(childComplexity int) int
		ID         func(childComplexity int) int
		Locale     func(childComplexity int) int
		Metafield  func(childComplexity int, key string, namespace *string) int
		Metafields func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		Name       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	CompletePaymentChallenge struct {
		RedirectURL func(childComplexity int) int
	}

	CompletionError struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
	}

	ComponentizableCartLine struct {
		Attribute             func(childComplexity int, key string) int
		Attributes            func(childComplexity int) int
		Cost                  func(childComplexity int) int
		DiscountAllocations   func(childComplexity int) int
		EstimatedCost         func(childComplexity int) int
		ID                    func(childComplexity int) int
		LineComponents        func(childComplexity int) int
		Merchandise           func(childComplexity int) int
		Quantity              func(childComplexity int) int
		SellingPlanAllocation func(childComplexity int) int
	}

	Count struct {
		Count     func(childComplexity int) int
		Precision func(childComplexity int) int
	}

	Country struct {
		AvailableLanguages func(childComplexity int) int
		Currency           func(childComplexity int) int
		DefaultLanguage    func(childComplexity int) int
		IsoCode            func(childComplexity int) int
		Market             func(childComplexity int) int
		Name               func(childComplexity int) int
		UnitSystem         func(childComplexity int) int
	}

	CreditCard struct {
		Brand        func(childComplexity int) int
		ExpiryMonth  func(childComplexity int) int
		ExpiryYear   func(childComplexity int) int
		FirstDigits  func(childComplexity int) int
		FirstName    func(childComplexity int) int
		LastDigits   func(childComplexity int) int
		LastName     func(childComplexity int) int
		MaskedNumber func(childComplexity int) int
	}

	Currency struct {
		IsoCode func(childComplexity int) int
		Name    func(childComplexity int) int
		Symbol  func(childComplexity int) int
	}

	Customer struct {
		AcceptsMarketing       func(childComplexity int) int
		Addresses              func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		CreatedAt              func(childComplexity int) int
		DefaultAddress         func(childComplexity int) int
		DisplayName            func(childComplexity int) int
		Email                  func(childComplexity int) int
		FirstName              func(childComplexity int) int
		ID                     func(childComplexity int) int
		LastIncompleteCheckout func(childComplexity int) int
		LastName               func(childComplexity int) int
		Metafield              func(childComplexity int, key string, namespace *string) int
		Metafields             func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		NumberOfOrders         func(childComplexity int) int
		Orders                 func(childComplexity int, after *string, before *string, first *int32, last *int32, query *string, reverse *bool, sortKey *model.OrderSortKeys) int
		Phone                  func(childComplexity int) int
		Tags                   func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
	}

	CustomerAccessToken struct {
		AccessToken func(childComplexity int) int
		ExpiresAt   func(childComplexity int) int
	}

	CustomerAccessTokenCreatePayload struct {
		CustomerAccessToken func(childComplexity int) int
		CustomerUserErrors  func(childComplexity int) int
		UserErrors          func(childComplexity int) int
	}

	CustomerAccessTokenCreateWithMultipassPayload struct {
		CustomerAccessToken func(childComplexity int) int
		CustomerUserErrors  func(childComplexity int) int
		UserErrors          func(childComplexity int) int
	}

	CustomerAccessTokenDeletePayload struct {
		DeletedAccessToken           func(childComplexity int) int
		DeletedCustomerAccessTokenID func(childComplexity int) int
		UserErrors                   func(childComplexity int) int
	}

	CustomerAccessTokenRenewPayload struct {
		CustomerAccessToken func(childComplexity int) int
		UserErrors          func(childComplexity int) int
	}

	CustomerActivateByUrlPayload struct {
		Customer            func(childComplexity int) int
		CustomerAccessToken func(childComplexity int) int
		CustomerUserErrors  func(childComplexity int) int
		UserErrors          func(childComplexity int) int
	}

	CustomerActivatePayload struct {
		Customer            func(childComplexity int) int
		CustomerAccessToken func(childComplexity int) int
		CustomerUserErrors  func(childComplexity int) int
		UserErrors          func(childComplexity int) int
	}

	CustomerAddressCreatePayload struct {
		CustomerAddress    func(childComplexity int) int
		CustomerUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CustomerAddressDeletePayload struct {
		CustomerUserErrors       func(childComplexity int) int
		DeletedCustomerAddressID func(childComplexity int) int
		UserErrors               func(childComplexity int) int
	}

	CustomerAddressUpdatePayload struct {
		CustomerAddress    func(childComplexity int) int
		CustomerUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CustomerCreatePayload struct {
		Customer           func(childComplexity int) int
		CustomerUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CustomerDefaultAddressUpdatePayload struct {
		Customer           func(childComplexity int) int
		CustomerUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CustomerRecoverPayload struct {
		CustomerUserErrors func(childComplexity int) int
		UserErrors         func(childComplexity int) int
	}

	CustomerResetByUrlPayload struct {
		Customer            func(childComplexity int) int
		CustomerAccessToken func(childComplexity int) int
		CustomerUserErrors  func(childComplexity int) int
		UserErrors          func(childComplexity int) int
	}

	CustomerResetPayload struct {
		Customer            func(childComplexity int) int
		CustomerAccessToken func(childComplexity int) int
		CustomerUserErrors  func(childComplexity int) int
		UserErrors          func(childComplexity int) int
	}

	CustomerUpdatePayload struct {
		Customer            func(childComplexity int) int
		CustomerAccessToken func(childComplexity int) int
		CustomerUserErrors  func(childComplexity int) int
		UserErrors          func(childComplexity int) int
	}

	CustomerUserError struct {
		Code    func(childComplexity int) int
		Field   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DiscountAllocation struct {
		AllocatedAmount     func(childComplexity int) int
		DiscountApplication func(childComplexity int) int
	}

	DiscountApplicationConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	DiscountApplicationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DiscountCodeApplication struct {
		AllocationMethod func(childComplexity int) int
		Applicable       func(childComplexity int) int
		Code             func(childComplexity int) int
		TargetSelection  func(childComplexity int) int
		TargetType       func(childComplexity int) int
		Value            func(childComplexity int) int
	}

	Domain struct {
		Host       func(childComplexity int) int
		SslEnabled func(childComplexity int) int
		URL        func(childComplexity int) int
	}

	ExternalVideo struct {
		Alt              func(childComplexity int) int
		EmbedURL         func(childComplexity int) int
		EmbeddedURL      func(childComplexity int) int
		Host             func(childComplexity int) int
		ID               func(childComplexity int) int
		MediaContentType func(childComplexity int) int
		OriginURL        func(childComplexity int) int
		Presentation     func(childComplexity int) int
		PreviewImage     func(childComplexity int) int
	}

	Filter struct {
		ID           func(childComplexity int) int
		Label        func(childComplexity int) int
		Presentation func(childComplexity int) int
		Type         func(childComplexity int) int
		Values       func(childComplexity int) int
	}

	FilterValue struct {
		Count  func(childComplexity int) int
		ID     func(childComplexity int) int
		Image  func(childComplexity int) int
		Input  func(childComplexity int) int
		Label  func(childComplexity int) int
		Swatch func(childComplexity int) int
	}

	Fulfillment struct {
		FulfillmentLineItems func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		TrackingCompany      func(childComplexity int) int
		TrackingInfo         func(childComplexity int, first *int32) int
	}

	FulfillmentLineItem struct {
		LineItem func(childComplexity int) int
		Quantity func(childComplexity int) int
	}

	FulfillmentLineItemConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FulfillmentLineItemEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FulfillmentTrackingInfo struct {
		Number func(childComplexity int) int
		URL    func(childComplexity int) int
	}

	GenericFile struct {
		Alt              func(childComplexity int) int
		ID               func(childComplexity int) int
		MimeType         func(childComplexity int) int
		OriginalFileSize func(childComplexity int) int
		PreviewImage     func(childComplexity int) int
		URL              func(childComplexity int) int
	}

	Image struct {
		AltText        func(childComplexity int) int
		Height         func(childComplexity int) int
		ID             func(childComplexity int) int
		OriginalSrc    func(childComplexity int) int
		Src            func(childComplexity int) int
		Thumbhash      func(childComplexity int) int
		TransformedSrc func(childComplexity int, crop *model.CropRegion, maxHeight *int32, maxWidth *int32, preferredContentType *model.ImageContentType, scale *int32) int
		URL            func(childComplexity int, transform *model.ImageTransformInput) int
		Width          func(childComplexity int) int
	}

	ImageConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ImageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InContextAnnotation struct {
		Description func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	InContextAnnotationType struct {
		Kind func(childComplexity int) int
		Name func(childComplexity int) int
	}

	Language struct {
		EndonymName func(childComplexity int) int
		IsoCode     func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	Localization struct {
		AvailableCountries func(childComplexity int) int
		AvailableLanguages func(childComplexity int) int
		Country            func(childComplexity int) int
		Language           func(childComplexity int) int
		Market             func(childComplexity int) int
	}

	Location struct {
		Address    func(childComplexity int) int
		ID         func(childComplexity int) int
		Metafield  func(childComplexity int, key string, namespace *string) int
		Metafields func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		Name       func(childComplexity int) int
	}

	LocationAddress struct {
		Address1     func(childComplexity int) int
		Address2     func(childComplexity int) int
		City         func(childComplexity int) int
		Country      func(childComplexity int) int
		CountryCode  func(childComplexity int) int
		Formatted    func(childComplexity int) int
		Latitude     func(childComplexity int) int
		Longitude    func(childComplexity int) int
		Phone        func(childComplexity int) int
		Province     func(childComplexity int) int
		ProvinceCode func(childComplexity int) int
		Zip          func(childComplexity int) int
	}

	LocationConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	LocationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MailingAddress struct {
		Address1      func(childComplexity int) int
		Address2      func(childComplexity int) int
		City          func(childComplexity int) int
		Company       func(childComplexity int) int
		Country       func(childComplexity int) int
		CountryCode   func(childComplexity int) int
		CountryCodeV2 func(childComplexity int) int
		FirstName     func(childComplexity int) int
		Formatted     func(childComplexity int, withCompany *bool, withName *bool) int
		FormattedArea func(childComplexity int) int
		ID            func(childComplexity int) int
		LastName      func(childComplexity int) int
		Latitude      func(childComplexity int) int
		Longitude     func(childComplexity int) int
		Name          func(childComplexity int) int
		Phone         func(childComplexity int) int
		Province      func(childComplexity int) int
		ProvinceCode  func(childComplexity int) int
		Zip           func(childComplexity int) int
	}

	MailingAddressConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	MailingAddressEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ManualDiscountApplication struct {
		AllocationMethod func(childComplexity int) int
		Description      func(childComplexity int) int
		TargetSelection  func(childComplexity int) int
		TargetType       func(childComplexity int) int
		Title            func(childComplexity int) int
		Value            func(childComplexity int) int
	}

	Market struct {
		Handle     func(childComplexity int) int
		ID         func(childComplexity int) int
		Metafield  func(childComplexity int, key string, namespace *string) int
		Metafields func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
	}

	MediaConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	MediaEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MediaImage struct {
		Alt              func(childComplexity int) int
		ID               func(childComplexity int) int
		Image            func(childComplexity int) int
		MediaContentType func(childComplexity int) int
		Presentation     func(childComplexity int) int
		PreviewImage     func(childComplexity int) int
	}

	MediaPresentation struct {
		AsJSON func(childComplexity int, format model.MediaPresentationFormat) int
		ID     func(childComplexity int) int
	}

	Menu struct {
		Handle     func(childComplexity int) int
		ID         func(childComplexity int) int
		Items      func(childComplexity int) int
		ItemsCount func(childComplexity int) int
		Title      func(childComplexity int) int
	}

	MenuItem struct {
		ID         func(childComplexity int) int
		Items      func(childComplexity int) int
		Resource   func(childComplexity int) int
		ResourceID func(childComplexity int) int
		Tags       func(childComplexity int) int
		Title      func(childComplexity int) int
		Type       func(childComplexity int) int
		URL        func(childComplexity int) int
	}

	Metafield struct {
		CreatedAt      func(childComplexity int) int
		Description    func(childComplexity int) int
		ID             func(childComplexity int) int
		Key            func(childComplexity int) int
		Namespace      func(childComplexity int) int
		ParentResource func(childComplexity int) int
		Reference      func(childComplexity int) int
		References     func(childComplexity int, after *string, before *string, first *int32, last *int32) int
		Type           func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		Value          func(childComplexity int) int
	}

	MetafieldDeleteUserError struct {
		Code    func(childComplexity int) int
		Field   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	MetafieldReferenceConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	MetafieldReferenceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MetafieldsSetUserError struct {
		Code         func(childComplexity int) int
		ElementIndex func(childComplexity int) int
		Field        func(childComplexity int) int
		Message      func(childComplexity int) int
	}

	Metaobject struct {
		Field          func(childComplexity int, key string) int
		Fields         func(childComplexity int) int
		Handle         func(childComplexity int) int
		ID             func(childComplexity int) int
		OnlineStoreURL func(childComplexity int) int
		Seo            func(childComplexity int) int
		Type           func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	MetaobjectConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	MetaobjectEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MetaobjectField struct {
		Key        func(childComplexity int) int
		Reference  func(childComplexity int) int
		References func(childComplexity int, after *string, before *string, first *int32, last *int32) int
		Type       func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	MetaobjectSEO struct {
		Description func(childComplexity int) int
		Title       func(childComplexity int) int
	}

	Model3d struct {
		Alt              func(childComplexity int) int
		ID               func(childComplexity int) int
		MediaContentType func(childComplexity int) int
		Presentation     func(childComplexity int) int
		PreviewImage     func(childComplexity int) int
		Sources          func(childComplexity int) int
	}

	Model3dSource struct {
		Filesize func(childComplexity int) int
		Format   func(childComplexity int) int
		MimeType func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	MoneyV2 struct {
		Amount       func(childComplexity int) int
		CurrencyCode func(childComplexity int) int
	}

	Mutation struct {
		CartAttributesUpdate                   func(childComplexity int, attributes []*model.AttributeInput, cartID string) int
		CartBillingAddressUpdate               func(childComplexity int, billingAddress *model.MailingAddressInput, cartID string) int
		CartBuyerIdentityUpdate                func(childComplexity int, buyerIdentity model.CartBuyerIdentityInput, cartID string) int
		CartCreate                             func(childComplexity int, input *model.CartInput) int
		CartDeliveryAddressesAdd               func(childComplexity int, addresses []*model.CartSelectableAddressInput, cartID string) int
		CartDeliveryAddressesRemove            func(childComplexity int, addressIds []string, cartID string) int
		CartDeliveryAddressesReplace           func(childComplexity int, addresses []*model.CartSelectableAddressInput, cartID string) int
		CartDeliveryAddressesUpdate            func(childComplexity int, addresses []*model.CartSelectableAddressUpdateInput, cartID string) int
		CartDiscountCodesUpdate                func(childComplexity int, cartID string, discountCodes []string) int
		CartGiftCardCodesRemove                func(childComplexity int, appliedGiftCardIds []string, cartID string) int
		CartGiftCardCodesUpdate                func(childComplexity int, cartID string, giftCardCodes []string) int
		CartLinesAdd                           func(childComplexity int, cartID string, lines []*model.CartLineInput) int
		CartLinesRemove                        func(childComplexity int, cartID string, lineIds []string) int
		CartLinesUpdate                        func(childComplexity int, cartID string, lines []*model.CartLineUpdateInput) int
		CartMetafieldDelete                    func(childComplexity int, input model.CartMetafieldDeleteInput) int
		CartMetafieldsSet                      func(childComplexity int, metafields []*model.CartMetafieldsSetInput) int
		CartNoteUpdate                         func(childComplexity int, cartID string, note string) int
		CartPaymentUpdate                      func(childComplexity int, cartID string, payment model.CartPaymentInput) int
		CartPrepareForCompletion               func(childComplexity int, cartID string) int
		CartRemovePersonalData                 func(childComplexity int, cartID string) int
		CartSelectedDeliveryOptionsUpdate      func(childComplexity int, cartID string, selectedDeliveryOptions []*model.CartSelectedDeliveryOptionInput) int
		CartSubmitForCompletion                func(childComplexity int, attemptToken string, cartID string) int
		CheckoutAttributesUpdateV2             func(childComplexity int, checkoutID string, input model.CheckoutAttributesUpdateV2Input) int
		CheckoutCompleteFree                   func(childComplexity int, checkoutID string) int
		CheckoutCompleteWithCreditCardV2       func(childComplexity int, checkoutID string, payment model.CreditCardPaymentInputV2) int
		CheckoutCompleteWithTokenizedPaymentV3 func(childComplexity int, checkoutID string, payment model.TokenizedPaymentInputV3) int
		CheckoutCreate                         func(childComplexity int, input model.CheckoutCreateInput, queueToken *string) int
		CheckoutCustomerAssociateV2            func(childComplexity int, checkoutID string, customerAccessToken string) int
		CheckoutCustomerDisassociateV2         func(childComplexity int, checkoutID string) int
		CheckoutDiscountCodeApplyV2            func(childComplexity int, checkoutID string, discountCode string) int
		CheckoutDiscountCodeRemove             func(childComplexity int, checkoutID string) int
		CheckoutEmailUpdateV2                  func(childComplexity int, checkoutID string, email string) int
		CheckoutGiftCardRemoveV2               func(childComplexity int, appliedGiftCardID string, checkoutID string) int
		CheckoutGiftCardsAppend                func(childComplexity int, checkoutID string, giftCardCodes []string) int
		CheckoutLineItemsAdd                   func(childComplexity int, checkoutID string, lineItems []*model.CheckoutLineItemInput) int
		CheckoutLineItemsRemove                func(childComplexity int, checkoutID string, lineItemIds []string) int
		CheckoutLineItemsReplace               func(childComplexity int, checkoutID string, lineItems []*model.CheckoutLineItemInput) int
		CheckoutLineItemsUpdate                func(childComplexity int, checkoutID string, lineItems []*model.CheckoutLineItemUpdateInput) int
		CheckoutShippingAddressUpdateV2        func(childComplexity int, checkoutID string, shippingAddress model.MailingAddressInput) int
		CheckoutShippingLineUpdate             func(childComplexity int, checkoutID string, shippingRateHandle string) int
		CustomerAccessTokenCreate              func(childComplexity int, input model.CustomerAccessTokenCreateInput) int
		CustomerAccessTokenCreateWithMultipass func(childComplexity int, multipassToken string) int
		CustomerAccessTokenDelete              func(childComplexity int, customerAccessToken string) int
		CustomerAccessTokenRenew               func(childComplexity int, customerAccessToken string) int
		CustomerActivate                       func(childComplexity int, id string, input model.CustomerActivateInput) int
		CustomerActivateByURL                  func(childComplexity int, activationURL string, password string) int
		CustomerAddressCreate                  func(childComplexity int, address model.MailingAddressInput, customerAccessToken string) int
		CustomerAddressDelete                  func(childComplexity int, customerAccessToken string, id string) int
		CustomerAddressUpdate                  func(childComplexity int, address model.MailingAddressInput, customerAccessToken string, id string) int
		CustomerCreate                         func(childComplexity int, input model.CustomerCreateInput) int
		CustomerDefaultAddressUpdate           func(childComplexity int, addressID string, customerAccessToken string) int
		CustomerRecover                        func(childComplexity int, email string) int
		CustomerReset                          func(childComplexity int, id string, input model.CustomerResetInput) int
		CustomerResetByURL                     func(childComplexity int, password string, resetURL string) int
		CustomerUpdate                         func(childComplexity int, customer model.CustomerUpdateInput, customerAccessToken string) int
		ShopPayPaymentRequestSessionCreate     func(childComplexity int, paymentRequest model.ShopPayPaymentRequestInput, sourceIdentifier string) int
		ShopPayPaymentRequestSessionSubmit     func(childComplexity int, idempotencyKey string, orderName *string, paymentRequest model.ShopPayPaymentRequestInput, token string) int
	}

	Order struct {
		BillingAddress              func(childComplexity int) int
		CancelReason                func(childComplexity int) int
		CanceledAt                  func(childComplexity int) int
		CurrencyCode                func(childComplexity int) int
		CurrentSubtotalPrice        func(childComplexity int) int
		CurrentTotalDuties          func(childComplexity int) int
		CurrentTotalPrice           func(childComplexity int) int
		CurrentTotalShippingPrice   func(childComplexity int) int
		CurrentTotalTax             func(childComplexity int) int
		CustomAttributes            func(childComplexity int) int
		CustomerLocale              func(childComplexity int) int
		CustomerURL                 func(childComplexity int) int
		DiscountApplications        func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		Edited                      func(childComplexity int) int
		Email                       func(childComplexity int) int
		FinancialStatus             func(childComplexity int) int
		FulfillmentStatus           func(childComplexity int) int
		ID                          func(childComplexity int) int
		LineItems                   func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		Metafield                   func(childComplexity int, key string, namespace *string) int
		Metafields                  func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		Name                        func(childComplexity int) int
		OrderNumber                 func(childComplexity int) int
		OriginalTotalDuties         func(childComplexity int) int
		OriginalTotalPrice          func(childComplexity int) int
		Phone                       func(childComplexity int) int
		ProcessedAt                 func(childComplexity int) int
		ShippingAddress             func(childComplexity int) int
		ShippingDiscountAllocations func(childComplexity int) int
		StatusURL                   func(childComplexity int) int
		SubtotalPrice               func(childComplexity int) int
		SubtotalPriceV2             func(childComplexity int) int
		SuccessfulFulfillments      func(childComplexity int, first *int32) int
		TotalPrice                  func(childComplexity int) int
		TotalPriceV2                func(childComplexity int) int
		TotalRefunded               func(childComplexity int) int
		TotalRefundedV2             func(childComplexity int) int
		TotalShippingPrice          func(childComplexity int) int
		TotalShippingPriceV2        func(childComplexity int) int
		TotalTax                    func(childComplexity int) int
		TotalTaxV2                  func(childComplexity int) int
	}

	OrderConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrderEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrderLineItem struct {
		CurrentQuantity      func(childComplexity int) int
		CustomAttributes     func(childComplexity int) int
		DiscountAllocations  func(childComplexity int) int
		DiscountedTotalPrice func(childComplexity int) int
		OriginalTotalPrice   func(childComplexity int) int
		Quantity             func(childComplexity int) int
		Title                func(childComplexity int) int
		Variant              func(childComplexity int) int
	}

	OrderLineItemConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	OrderLineItemEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Page struct {
		Body               func(childComplexity int) int
		BodySummary        func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Handle             func(childComplexity int) int
		ID                 func(childComplexity int) int
		Metafield          func(childComplexity int, key string, namespace *string) int
		Metafields         func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		OnlineStoreURL     func(childComplexity int) int
		Seo                func(childComplexity int) int
		Title              func(childComplexity int) int
		TrackingParameters func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	PageConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	PageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	PaginatedSitemapResources struct {
		HasNextPage func(childComplexity int) int
		Items       func(childComplexity int) int
	}

	Payment struct {
		Amount         func(childComplexity int) int
		AmountV2       func(childComplexity int) int
		BillingAddress func(childComplexity int) int
		Checkout       func(childComplexity int) int
		CreditCard     func(childComplexity int) int
		ErrorMessage   func(childComplexity int) int
		ID             func(childComplexity int) int
		IdempotencyKey func(childComplexity int) int
		NextActionURL  func(childComplexity int) int
		Ready          func(childComplexity int) int
		Test           func(childComplexity int) int
		Transaction    func(childComplexity int) int
	}

	PaymentSettings struct {
		AcceptedCardBrands           func(childComplexity int) int
		CardVaultURL                 func(childComplexity int) int
		CountryCode                  func(childComplexity int) int
		CurrencyCode                 func(childComplexity int) int
		EnabledPresentmentCurrencies func(childComplexity int) int
		ShopifyPaymentsAccountID     func(childComplexity int) int
		SupportedDigitalWallets      func(childComplexity int) int
	}

	PredictiveSearchResult struct {
		Articles    func(childComplexity int) int
		Collections func(childComplexity int) int
		Pages       func(childComplexity int) int
		Products    func(childComplexity int) int
		Queries     func(childComplexity int) int
	}

	PricingPercentageValue struct {
		Percentage func(childComplexity int) int
	}

	Product struct {
		AdjacentVariants                func(childComplexity int, caseInsensitiveMatch *bool, ignoreUnknownOptions *bool, selectedOptions []*model.SelectedOptionInput) int
		AvailableForSale                func(childComplexity int) int
		Category                        func(childComplexity int) int
		Collections                     func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		CompareAtPriceRange             func(childComplexity int) int
		CreatedAt                       func(childComplexity int) int
		Description                     func(childComplexity int, truncateAt *int32) int
		DescriptionHTML                 func(childComplexity int) int
		EncodedVariantAvailability      func(childComplexity int) int
		EncodedVariantExistence         func(childComplexity int) int
		FeaturedImage                   func(childComplexity int) int
		Handle                          func(childComplexity int) int
		ID                              func(childComplexity int) int
		Images                          func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool, sortKey *model.ProductImageSortKeys) int
		IsGiftCard                      func(childComplexity int) int
		Media                           func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool, sortKey *model.ProductMediaSortKeys) int
		Metafield                       func(childComplexity int, key string, namespace *string) int
		Metafields                      func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		OnlineStoreURL                  func(childComplexity int) int
		Options                         func(childComplexity int, first *int32) int
		PriceRange                      func(childComplexity int) int
		ProductType                     func(childComplexity int) int
		PublishedAt                     func(childComplexity int) int
		RequiresSellingPlan             func(childComplexity int) int
		SelectedOrFirstAvailableVariant func(childComplexity int, caseInsensitiveMatch *bool, ignoreUnknownOptions *bool, selectedOptions []*model.SelectedOptionInput) int
		SellingPlanGroups               func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		Seo                             func(childComplexity int) int
		Tags                            func(childComplexity int) int
		Title                           func(childComplexity int) int
		TotalInventory                  func(childComplexity int) int
		TrackingParameters              func(childComplexity int) int
		UpdatedAt                       func(childComplexity int) int
		VariantBySelectedOptions        func(childComplexity int, caseInsensitiveMatch *bool, ignoreUnknownOptions *bool, selectedOptions []*model.SelectedOptionInput) int
		Variants                        func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool, sortKey *model.ProductVariantSortKeys) int
		VariantsCount                   func(childComplexity int) int
		Vendor                          func(childComplexity int) int
	}

	ProductConnection struct {
		Edges    func(childComplexity int) int
		Filters  func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ProductEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProductOption struct {
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		OptionValues func(childComplexity int) int
		Values       func(childComplexity int) int
	}

	ProductOptionValue struct {
		FirstSelectableVariant func(childComplexity int) int
		ID                     func(childComplexity int) int
		Name                   func(childComplexity int) int
		Swatch                 func(childComplexity int) int
	}

	ProductOptionValueSwatch struct {
		Color func(childComplexity int) int
		Image func(childComplexity int) int
	}

	ProductPriceRange struct {
		MaxVariantPrice func(childComplexity int) int
		MinVariantPrice func(childComplexity int) int
	}

	ProductVariant struct {
		AvailableForSale           func(childComplexity int) int
		Barcode                    func(childComplexity int) int
		CompareAtPrice             func(childComplexity int) int
		CompareAtPriceV2           func(childComplexity int) int
		Components                 func(childComplexity int, after *string, before *string, first *int32, last *int32) int
		CurrentlyNotInStock        func(childComplexity int) int
		GroupedBy                  func(childComplexity int, after *string, before *string, first *int32, last *int32) int
		ID                         func(childComplexity int) int
		Image                      func(childComplexity int) int
		Metafield                  func(childComplexity int, key string, namespace *string) int
		Metafields                 func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		Price                      func(childComplexity int) int
		PriceV2                    func(childComplexity int) int
		Product                    func(childComplexity int) int
		QuantityAvailable          func(childComplexity int) int
		QuantityPriceBreaks        func(childComplexity int, after *string, before *string, first *int32, last *int32) int
		QuantityRule               func(childComplexity int) int
		RequiresComponents         func(childComplexity int) int
		RequiresShipping           func(childComplexity int) int
		SelectedOptions            func(childComplexity int) int
		SellingPlanAllocations     func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
		ShopPayInstallmentsPricing func(childComplexity int) int
		Sku                        func(childComplexity int) int
		StoreAvailability          func(childComplexity int, after *string, before *string, first *int32, last *int32, near *model.GeoCoordinateInput, reverse *bool) int
		Taxable                    func(childComplexity int) int
		Title                      func(childComplexity int) int
		UnitPrice                  func(childComplexity int) int
		UnitPriceMeasurement       func(childComplexity int) int
		Weight                     func(childComplexity int) int
		WeightUnit                 func(childComplexity int) int
	}

	ProductVariantComponent struct {
		ProductVariant func(childComplexity int) int
		Quantity       func(childComplexity int) int
	}

	ProductVariantComponentConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ProductVariantComponentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProductVariantConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ProductVariantEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PurchasingCompany struct {
		Company  func(childComplexity int) int
		Contact  func(childComplexity int) int
		Location func(childComplexity int) int
	}

	QuantityPriceBreak struct {
		MinimumQuantity func(childComplexity int) int
		Price           func(childComplexity int) int
	}

	QuantityPriceBreakConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	QuantityPriceBreakEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	QuantityRule struct {
		Increment func(childComplexity int) int
		Maximum   func(childComplexity int) int
		Minimum   func(childComplexity int) int
	}

	Query struct {
	}

	QueryRoot struct {
		Article                    func(childComplexity int, id string) int
		Articles                   func(childComplexity int, after *string, before *string, first *int32, last *int32, query *string, reverse *bool, sortKey *model.ArticleSortKeys) int
		Blog                       func(childComplexity int, handle *string, id *string) int
		BlogByHandle               func(childComplexity int, handle string) int
		Blogs                      func(childComplexity int, after *string, before *string, first *int32, last *int32, query *string, reverse *bool, sortKey *model.BlogSortKeys) int
		Cart                       func(childComplexity int, id string) int
		CartCompletionAttempt      func(childComplexity int, attemptID string) int
		Collection                 func(childComplexity int, handle *string, id *string) int
		CollectionByHandle         func(childComplexity int, handle string) int
		Collections                func(childComplexity int, after *string, before *string, first *int32, last *int32, query *string, reverse *bool, sortKey *model.CollectionSortKeys) int
		Customer                   func(childComplexity int, customerAccessToken string) int
		Localization               func(childComplexity int) int
		Locations                  func(childComplexity int, after *string, before *string, first *int32, last *int32, near *model.GeoCoordinateInput, reverse *bool, sortKey *model.LocationSortKeys) int
		Menu                       func(childComplexity int, handle string) int
		Metaobject                 func(childComplexity int, handle *model.MetaobjectHandleInput, id *string) int
		Metaobjects                func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool, sortKey *string, typeArg string) int
		Node                       func(childComplexity int, id string) int
		Nodes                      func(childComplexity int, ids []string) int
		Page                       func(childComplexity int, handle *string, id *string) int
		PageByHandle               func(childComplexity int, handle string) int
		Pages                      func(childComplexity int, after *string, before *string, first *int32, last *int32, query *string, reverse *bool, sortKey *model.PageSortKeys) int
		PaymentSettings            func(childComplexity int) int
		PredictiveSearch           func(childComplexity int, limit *int32, limitScope *model.PredictiveSearchLimitScope, query string, searchableFields []model.SearchableField, types []model.PredictiveSearchType, unavailableProducts *model.SearchUnavailableProductsType) int
		Product                    func(childComplexity int, handle *string, id *string) int
		ProductByHandle            func(childComplexity int, handle string) int
		ProductRecommendations     func(childComplexity int, intent *model.ProductRecommendationIntent, productHandle *string, productID *string) int
		ProductTags                func(childComplexity int, first int32) int
		ProductTypes               func(childComplexity int, first int32) int
		Products                   func(childComplexity int, after *string, before *string, first *int32, last *int32, query *string, reverse *bool, sortKey *model.ProductSortKeys) int
		PublicAPIVersions          func(childComplexity int) int
		Search                     func(childComplexity int, after *string, before *string, first *int32, last *int32, prefix *model.SearchPrefixQueryType, productFilters []*model.ProductFilter, query string, reverse *bool, sortKey *model.SearchSortKeys, types []model.SearchType, unavailableProducts *model.SearchUnavailableProductsType) int
		Shop                       func(childComplexity int) int
		ShopPayInstallmentsPricing func(childComplexity int) int
		Sitemap                    func(childComplexity int, typeArg model.SitemapType) int
		URLRedirects               func(childComplexity int, after *string, before *string, first *int32, last *int32, query *string, reverse *bool) int
	}

	SEO struct {
		Description func(childComplexity int) int
		Title       func(childComplexity int) int
	}

	ScriptDiscountApplication struct {
		AllocationMethod func(childComplexity int) int
		TargetSelection  func(childComplexity int) int
		TargetType       func(childComplexity int) int
		Title            func(childComplexity int) int
		Value            func(childComplexity int) int
	}

	SearchQuerySuggestion struct {
		StyledText         func(childComplexity int) int
		Text               func(childComplexity int) int
		TrackingParameters func(childComplexity int) int
	}

	SearchResultItemConnection struct {
		Edges          func(childComplexity int) int
		Nodes          func(childComplexity int) int
		PageInfo       func(childComplexity int) int
		ProductFilters func(childComplexity int) int
		TotalCount     func(childComplexity int) int
	}

	SearchResultItemEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SelectedOption struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	SellingPlan struct {
		BillingPolicy       func(childComplexity int) int
		CheckoutCharge      func(childComplexity int) int
		DeliveryPolicy      func(childComplexity int) int
		Description         func(childComplexity int) int
		ID                  func(childComplexity int) int
		Metafield           func(childComplexity int, key string, namespace *string) int
		Metafields          func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		Name                func(childComplexity int) int
		Options             func(childComplexity int) int
		PriceAdjustments    func(childComplexity int) int
		RecurringDeliveries func(childComplexity int) int
	}

	SellingPlanAllocation struct {
		CheckoutChargeAmount         func(childComplexity int) int
		PriceAdjustments             func(childComplexity int) int
		RemainingBalanceChargeAmount func(childComplexity int) int
		SellingPlan                  func(childComplexity int) int
	}

	SellingPlanAllocationConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SellingPlanAllocationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SellingPlanAllocationPriceAdjustment struct {
		CompareAtPrice   func(childComplexity int) int
		PerDeliveryPrice func(childComplexity int) int
		Price            func(childComplexity int) int
		UnitPrice        func(childComplexity int) int
	}

	SellingPlanCheckoutCharge struct {
		Type  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	SellingPlanCheckoutChargePercentageValue struct {
		Percentage func(childComplexity int) int
	}

	SellingPlanConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SellingPlanEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SellingPlanFixedAmountPriceAdjustment struct {
		AdjustmentAmount func(childComplexity int) int
	}

	SellingPlanFixedPriceAdjustment struct {
		Price func(childComplexity int) int
	}

	SellingPlanGroup struct {
		AppName      func(childComplexity int) int
		Name         func(childComplexity int) int
		Options      func(childComplexity int) int
		SellingPlans func(childComplexity int, after *string, before *string, first *int32, last *int32, reverse *bool) int
	}

	SellingPlanGroupConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SellingPlanGroupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SellingPlanGroupOption struct {
		Name   func(childComplexity int) int
		Values func(childComplexity int) int
	}

	SellingPlanOption struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	SellingPlanPercentagePriceAdjustment struct {
		AdjustmentPercentage func(childComplexity int) int
	}

	SellingPlanPriceAdjustment struct {
		AdjustmentValue func(childComplexity int) int
		OrderCount      func(childComplexity int) int
	}

	SellingPlanRecurringBillingPolicy struct {
		Interval      func(childComplexity int) int
		IntervalCount func(childComplexity int) int
	}

	SellingPlanRecurringDeliveryPolicy struct {
		Interval      func(childComplexity int) int
		IntervalCount func(childComplexity int) int
	}

	ShippingRate struct {
		Handle  func(childComplexity int) int
		Price   func(childComplexity int) int
		PriceV2 func(childComplexity int) int
		Title   func(childComplexity int) int
	}

	Shop struct {
		Brand                      func(childComplexity int) int
		CustomerAccountURL         func(childComplexity int) int
		Description                func(childComplexity int) int
		ID                         func(childComplexity int) int
		Metafield                  func(childComplexity int, key string, namespace *string) int
		Metafields                 func(childComplexity int, identifiers []*model.HasMetafieldsIdentifier) int
		MoneyFormat                func(childComplexity int) int
		Name                       func(childComplexity int) int
		PaymentSettings            func(childComplexity int) int
		PrimaryDomain              func(childComplexity int) int
		PrivacyPolicy              func(childComplexity int) int
		RefundPolicy               func(childComplexity int) int
		ShippingPolicy             func(childComplexity int) int
		ShipsToCountries           func(childComplexity int) int
		ShopPayInstallmentsPricing func(childComplexity int) int
		SubscriptionPolicy         func(childComplexity int) int
		TermsOfService             func(childComplexity int) int
	}

	ShopPayInstallmentsFinancingPlan struct {
		ID       func(childComplexity int) int
		MaxPrice func(childComplexity int) int
		MinPrice func(childComplexity int) int
		Terms    func(childComplexity int) int
	}

	ShopPayInstallmentsFinancingPlanTerm struct {
		Apr               func(childComplexity int) int
		Frequency         func(childComplexity int) int
		ID                func(childComplexity int) int
		InstallmentsCount func(childComplexity int) int
		LoanType          func(childComplexity int) int
	}

	ShopPayInstallmentsPricing struct {
		FinancingPlans        func(childComplexity int) int
		MaxPrice              func(childComplexity int) int
		MinPrice              func(childComplexity int) int
		ProductVariantPricing func(childComplexity int, variantID string) int
	}

	ShopPayInstallmentsProductVariantPricing struct {
		Available         func(childComplexity int) int
		Eligible          func(childComplexity int) int
		FullPrice         func(childComplexity int) int
		ID                func(childComplexity int) int
		InstallmentsCount func(childComplexity int) int
		PricePerTerm      func(childComplexity int) int
	}

	ShopPayPaymentRequest struct {
		DeliveryMethods            func(childComplexity int) int
		DiscountCodes              func(childComplexity int) int
		Discounts                  func(childComplexity int) int
		LineItems                  func(childComplexity int) int
		Locale                     func(childComplexity int) int
		PresentmentCurrency        func(childComplexity int) int
		SelectedDeliveryMethodType func(childComplexity int) int
		ShippingAddress            func(childComplexity int) int
		ShippingLines              func(childComplexity int) int
		Subtotal                   func(childComplexity int) int
		Total                      func(childComplexity int) int
		TotalShippingPrice         func(childComplexity int) int
		TotalTax                   func(childComplexity int) int
	}

	ShopPayPaymentRequestContactField struct {
		Address1     func(childComplexity int) int
		Address2     func(childComplexity int) int
		City         func(childComplexity int) int
		CompanyName  func(childComplexity int) int
		CountryCode  func(childComplexity int) int
		Email        func(childComplexity int) int
		FirstName    func(childComplexity int) int
		LastName     func(childComplexity int) int
		Phone        func(childComplexity int) int
		PostalCode   func(childComplexity int) int
		ProvinceCode func(childComplexity int) int
	}

	ShopPayPaymentRequestDeliveryMethod struct {
		Amount                   func(childComplexity int) int
		Code                     func(childComplexity int) int
		DeliveryExpectationLabel func(childComplexity int) int
		Detail                   func(childComplexity int) int
		Label                    func(childComplexity int) int
		MaxDeliveryDate          func(childComplexity int) int
		MinDeliveryDate          func(childComplexity int) int
	}

	ShopPayPaymentRequestDiscount struct {
		Amount func(childComplexity int) int
		Label  func(childComplexity int) int
	}

	ShopPayPaymentRequestImage struct {
		Alt func(childComplexity int) int
		URL func(childComplexity int) int
	}

	ShopPayPaymentRequestLineItem struct {
		FinalItemPrice    func(childComplexity int) int
		FinalLinePrice    func(childComplexity int) int
		Image             func(childComplexity int) int
		ItemDiscounts     func(childComplexity int) int
		Label             func(childComplexity int) int
		LineDiscounts     func(childComplexity int) int
		OriginalItemPrice func(childComplexity int) int
		OriginalLinePrice func(childComplexity int) int
		Quantity          func(childComplexity int) int
		RequiresShipping  func(childComplexity int) int
		Sku               func(childComplexity int) int
	}

	ShopPayPaymentRequestReceipt struct {
		PaymentRequest       func(childComplexity int) int
		ProcessingStatusType func(childComplexity int) int
		Token                func(childComplexity int) int
	}

	ShopPayPaymentRequestSession struct {
		CheckoutURL      func(childComplexity int) int
		PaymentRequest   func(childComplexity int) int
		SourceIdentifier func(childComplexity int) int
		Token            func(childComplexity int) int
	}

	ShopPayPaymentRequestSessionCreatePayload struct {
		ShopPayPaymentRequestSession func(childComplexity int) int
		UserErrors                   func(childComplexity int) int
	}

	ShopPayPaymentRequestSessionSubmitPayload struct {
		PaymentRequestReceipt func(childComplexity int) int
		UserErrors            func(childComplexity int) int
	}

	ShopPayPaymentRequestShippingLine struct {
		Amount func(childComplexity int) int
		Code   func(childComplexity int) int
		Label  func(childComplexity int) int
	}

	ShopPayPaymentRequestTotalShippingPrice struct {
		Discounts     func(childComplexity int) int
		FinalTotal    func(childComplexity int) int
		OriginalTotal func(childComplexity int) int
	}

	ShopPolicy struct {
		Body   func(childComplexity int) int
		Handle func(childComplexity int) int
		ID     func(childComplexity int) int
		Title  func(childComplexity int) int
		URL    func(childComplexity int) int
	}

	ShopPolicyWithDefault struct {
		Body   func(childComplexity int) int
		Handle func(childComplexity int) int
		ID     func(childComplexity int) int
		Title  func(childComplexity int) int
		URL    func(childComplexity int) int
	}

	Sitemap struct {
		PagesCount func(childComplexity int) int
		Resources  func(childComplexity int, page int32) int
	}

	SitemapImage struct {
		Alt       func(childComplexity int) int
		Filepath  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	SitemapResource struct {
		Handle    func(childComplexity int) int
		Image     func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	SitemapResourceMetaobject struct {
		Handle               func(childComplexity int) int
		OnlineStoreURLHandle func(childComplexity int) int
		Type                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	StoreAvailability struct {
		Available         func(childComplexity int) int
		Location          func(childComplexity int) int
		PickUpTime        func(childComplexity int) int
		QuantityAvailable func(childComplexity int) int
	}

	StoreAvailabilityConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	StoreAvailabilityEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StringConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	StringEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SubmissionError struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
	}

	SubmitAlreadyAccepted struct {
		AttemptID func(childComplexity int) int
	}

	SubmitFailed struct {
		CheckoutURL func(childComplexity int) int
		Errors      func(childComplexity int) int
	}

	SubmitSuccess struct {
		AttemptID   func(childComplexity int) int
		RedirectURL func(childComplexity int) int
	}

	SubmitThrottled struct {
		PollAfter func(childComplexity int) int
	}

	Swatch struct {
		Color func(childComplexity int) int
		Image func(childComplexity int) int
	}

	TaxonomyCategory struct {
		Ancestors func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	Transaction struct {
		Amount   func(childComplexity int) int
		AmountV2 func(childComplexity int) int
		Kind     func(childComplexity int) int
		Status   func(childComplexity int) int
		StatusV2 func(childComplexity int) int
		Test     func(childComplexity int) int
	}

	UnitPriceMeasurement struct {
		MeasuredType   func(childComplexity int) int
		QuantityUnit   func(childComplexity int) int
		QuantityValue  func(childComplexity int) int
		ReferenceUnit  func(childComplexity int) int
		ReferenceValue func(childComplexity int) int
	}

	UrlRedirect struct {
		ID     func(childComplexity int) int
		Path   func(childComplexity int) int
		Target func(childComplexity int) int
	}

	UrlRedirectConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	UrlRedirectEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserError struct {
		Field   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UserErrorsShopPayPaymentRequestSessionUserErrors struct {
		Code    func(childComplexity int) int
		Field   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	Video struct {
		Alt              func(childComplexity int) int
		ID               func(childComplexity int) int
		MediaContentType func(childComplexity int) int
		Presentation     func(childComplexity int) int
		PreviewImage     func(childComplexity int) int
		Sources          func(childComplexity int) int
	}

	VideoSource struct {
		Format   func(childComplexity int) int
		Height   func(childComplexity int) int
		MimeType func(childComplexity int) int
		URL      func(childComplexity int) int
		Width    func(childComplexity int) int
	}
}

type MutationResolver interface {
	CartAttributesUpdate(ctx context.Context, attributes []*model.AttributeInput, cartID string) (*model.CartAttributesUpdatePayload, error)
	CartBillingAddressUpdate(ctx context.Context, billingAddress *model.MailingAddressInput, cartID string) (*model.CartBillingAddressUpdatePayload, error)
	CartBuyerIdentityUpdate(ctx context.Context, buyerIdentity model.CartBuyerIdentityInput, cartID string) (*model.CartBuyerIdentityUpdatePayload, error)
	CartCreate(ctx context.Context, input *model.CartInput) (*model.CartCreatePayload, error)
	CartDeliveryAddressesAdd(ctx context.Context, addresses []*model.CartSelectableAddressInput, cartID string) (*model.CartDeliveryAddressesAddPayload, error)
	CartDeliveryAddressesRemove(ctx context.Context, addressIds []string, cartID string) (*model.CartDeliveryAddressesRemovePayload, error)
	CartDeliveryAddressesReplace(ctx context.Context, addresses []*model.CartSelectableAddressInput, cartID string) (*model.CartDeliveryAddressesReplacePayload, error)
	CartDeliveryAddressesUpdate(ctx context.Context, addresses []*model.CartSelectableAddressUpdateInput, cartID string) (*model.CartDeliveryAddressesUpdatePayload, error)
	CartDiscountCodesUpdate(ctx context.Context, cartID string, discountCodes []string) (*model.CartDiscountCodesUpdatePayload, error)
	CartGiftCardCodesRemove(ctx context.Context, appliedGiftCardIds []string, cartID string) (*model.CartGiftCardCodesRemovePayload, error)
	CartGiftCardCodesUpdate(ctx context.Context, cartID string, giftCardCodes []string) (*model.CartGiftCardCodesUpdatePayload, error)
	CartLinesAdd(ctx context.Context, cartID string, lines []*model.CartLineInput) (*model.CartLinesAddPayload, error)
	CartLinesRemove(ctx context.Context, cartID string, lineIds []string) (*model.CartLinesRemovePayload, error)
	CartLinesUpdate(ctx context.Context, cartID string, lines []*model.CartLineUpdateInput) (*model.CartLinesUpdatePayload, error)
	CartMetafieldDelete(ctx context.Context, input model.CartMetafieldDeleteInput) (*model.CartMetafieldDeletePayload, error)
	CartMetafieldsSet(ctx context.Context, metafields []*model.CartMetafieldsSetInput) (*model.CartMetafieldsSetPayload, error)
	CartNoteUpdate(ctx context.Context, cartID string, note string) (*model.CartNoteUpdatePayload, error)
	CartPaymentUpdate(ctx context.Context, cartID string, payment model.CartPaymentInput) (*model.CartPaymentUpdatePayload, error)
	CartPrepareForCompletion(ctx context.Context, cartID string) (*model.CartPrepareForCompletionPayload, error)
	CartRemovePersonalData(ctx context.Context, cartID string) (*model.CartRemovePersonalDataPayload, error)
	CartSelectedDeliveryOptionsUpdate(ctx context.Context, cartID string, selectedDeliveryOptions []*model.CartSelectedDeliveryOptionInput) (*model.CartSelectedDeliveryOptionsUpdatePayload, error)
	CartSubmitForCompletion(ctx context.Context, attemptToken string, cartID string) (*model.CartSubmitForCompletionPayload, error)
	CheckoutAttributesUpdateV2(ctx context.Context, checkoutID string, input model.CheckoutAttributesUpdateV2Input) (*model.CheckoutAttributesUpdateV2Payload, error)
	CheckoutCompleteFree(ctx context.Context, checkoutID string) (*model.CheckoutCompleteFreePayload, error)
	CheckoutCompleteWithCreditCardV2(ctx context.Context, checkoutID string, payment model.CreditCardPaymentInputV2) (*model.CheckoutCompleteWithCreditCardV2Payload, error)
	CheckoutCompleteWithTokenizedPaymentV3(ctx context.Context, checkoutID string, payment model.TokenizedPaymentInputV3) (*model.CheckoutCompleteWithTokenizedPaymentV3Payload, error)
	CheckoutCreate(ctx context.Context, input model.CheckoutCreateInput, queueToken *string) (*model.CheckoutCreatePayload, error)
	CheckoutCustomerAssociateV2(ctx context.Context, checkoutID string, customerAccessToken string) (*model.CheckoutCustomerAssociateV2Payload, error)
	CheckoutCustomerDisassociateV2(ctx context.Context, checkoutID string) (*model.CheckoutCustomerDisassociateV2Payload, error)
	CheckoutDiscountCodeApplyV2(ctx context.Context, checkoutID string, discountCode string) (*model.CheckoutDiscountCodeApplyV2Payload, error)
	CheckoutDiscountCodeRemove(ctx context.Context, checkoutID string) (*model.CheckoutDiscountCodeRemovePayload, error)
	CheckoutEmailUpdateV2(ctx context.Context, checkoutID string, email string) (*model.CheckoutEmailUpdateV2Payload, error)
	CheckoutGiftCardRemoveV2(ctx context.Context, appliedGiftCardID string, checkoutID string) (*model.CheckoutGiftCardRemoveV2Payload, error)
	CheckoutGiftCardsAppend(ctx context.Context, checkoutID string, giftCardCodes []string) (*model.CheckoutGiftCardsAppendPayload, error)
	CheckoutLineItemsAdd(ctx context.Context, checkoutID string, lineItems []*model.CheckoutLineItemInput) (*model.CheckoutLineItemsAddPayload, error)
	CheckoutLineItemsRemove(ctx context.Context, checkoutID string, lineItemIds []string) (*model.CheckoutLineItemsRemovePayload, error)
	CheckoutLineItemsReplace(ctx context.Context, checkoutID string, lineItems []*model.CheckoutLineItemInput) (*model.CheckoutLineItemsReplacePayload, error)
	CheckoutLineItemsUpdate(ctx context.Context, checkoutID string, lineItems []*model.CheckoutLineItemUpdateInput) (*model.CheckoutLineItemsUpdatePayload, error)
	CheckoutShippingAddressUpdateV2(ctx context.Context, checkoutID string, shippingAddress model.MailingAddressInput) (*model.CheckoutShippingAddressUpdateV2Payload, error)
	CheckoutShippingLineUpdate(ctx context.Context, checkoutID string, shippingRateHandle string) (*model.CheckoutShippingLineUpdatePayload, error)
	CustomerAccessTokenCreate(ctx context.Context, input model.CustomerAccessTokenCreateInput) (*model.CustomerAccessTokenCreatePayload, error)
	CustomerAccessTokenCreateWithMultipass(ctx context.Context, multipassToken string) (*model.CustomerAccessTokenCreateWithMultipassPayload, error)
	CustomerAccessTokenDelete(ctx context.Context, customerAccessToken string) (*model.CustomerAccessTokenDeletePayload, error)
	CustomerAccessTokenRenew(ctx context.Context, customerAccessToken string) (*model.CustomerAccessTokenRenewPayload, error)
	CustomerActivate(ctx context.Context, id string, input model.CustomerActivateInput) (*model.CustomerActivatePayload, error)
	CustomerActivateByURL(ctx context.Context, activationURL string, password string) (*model.CustomerActivateByURLPayload, error)
	CustomerAddressCreate(ctx context.Context, address model.MailingAddressInput, customerAccessToken string) (*model.CustomerAddressCreatePayload, error)
	CustomerAddressDelete(ctx context.Context, customerAccessToken string, id string) (*model.CustomerAddressDeletePayload, error)
	CustomerAddressUpdate(ctx context.Context, address model.MailingAddressInput, customerAccessToken string, id string) (*model.CustomerAddressUpdatePayload, error)
	CustomerCreate(ctx context.Context, input model.CustomerCreateInput) (*model.CustomerCreatePayload, error)
	CustomerDefaultAddressUpdate(ctx context.Context, addressID string, customerAccessToken string) (*model.CustomerDefaultAddressUpdatePayload, error)
	CustomerRecover(ctx context.Context, email string) (*model.CustomerRecoverPayload, error)
	CustomerReset(ctx context.Context, id string, input model.CustomerResetInput) (*model.CustomerResetPayload, error)
	CustomerResetByURL(ctx context.Context, password string, resetURL string) (*model.CustomerResetByURLPayload, error)
	CustomerUpdate(ctx context.Context, customer model.CustomerUpdateInput, customerAccessToken string) (*model.CustomerUpdatePayload, error)
	ShopPayPaymentRequestSessionCreate(ctx context.Context, paymentRequest model.ShopPayPaymentRequestInput, sourceIdentifier string) (*model.ShopPayPaymentRequestSessionCreatePayload, error)
	ShopPayPaymentRequestSessionSubmit(ctx context.Context, idempotencyKey string, orderName *string, paymentRequest model.ShopPayPaymentRequestInput, token string) (*model.ShopPayPaymentRequestSessionSubmitPayload, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "ApiVersion.displayName":
		if e.complexity.ApiVersion.DisplayName == nil {
			break
		}

		return e.complexity.ApiVersion.DisplayName(childComplexity), true

	case "ApiVersion.handle":
		if e.complexity.ApiVersion.Handle == nil {
			break
		}

		return e.complexity.ApiVersion.Handle(childComplexity), true

	case "ApiVersion.supported":
		if e.complexity.ApiVersion.Supported == nil {
			break
		}

		return e.complexity.ApiVersion.Supported(childComplexity), true

	case "AppliedGiftCard.amountUsed":
		if e.complexity.AppliedGiftCard.AmountUsed == nil {
			break
		}

		return e.complexity.AppliedGiftCard.AmountUsed(childComplexity), true

	case "AppliedGiftCard.amountUsedV2":
		if e.complexity.AppliedGiftCard.AmountUsedV2 == nil {
			break
		}

		return e.complexity.AppliedGiftCard.AmountUsedV2(childComplexity), true

	case "AppliedGiftCard.balance":
		if e.complexity.AppliedGiftCard.Balance == nil {
			break
		}

		return e.complexity.AppliedGiftCard.Balance(childComplexity), true

	case "AppliedGiftCard.balanceV2":
		if e.complexity.AppliedGiftCard.BalanceV2 == nil {
			break
		}

		return e.complexity.AppliedGiftCard.BalanceV2(childComplexity), true

	case "AppliedGiftCard.id":
		if e.complexity.AppliedGiftCard.ID == nil {
			break
		}

		return e.complexity.AppliedGiftCard.ID(childComplexity), true

	case "AppliedGiftCard.lastCharacters":
		if e.complexity.AppliedGiftCard.LastCharacters == nil {
			break
		}

		return e.complexity.AppliedGiftCard.LastCharacters(childComplexity), true

	case "AppliedGiftCard.presentmentAmountUsed":
		if e.complexity.AppliedGiftCard.PresentmentAmountUsed == nil {
			break
		}

		return e.complexity.AppliedGiftCard.PresentmentAmountUsed(childComplexity), true

	case "Article.author":
		if e.complexity.Article.Author == nil {
			break
		}

		return e.complexity.Article.Author(childComplexity), true

	case "Article.authorV2":
		if e.complexity.Article.AuthorV2 == nil {
			break
		}

		return e.complexity.Article.AuthorV2(childComplexity), true

	case "Article.blog":
		if e.complexity.Article.Blog == nil {
			break
		}

		return e.complexity.Article.Blog(childComplexity), true

	case "Article.comments":
		if e.complexity.Article.Comments == nil {
			break
		}

		args, err := ec.field_Article_comments_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Article.Comments(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "Article.content":
		if e.complexity.Article.Content == nil {
			break
		}

		args, err := ec.field_Article_content_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Article.Content(childComplexity, args["truncateAt"].(*int32)), true

	case "Article.contentHtml":
		if e.complexity.Article.ContentHTML == nil {
			break
		}

		return e.complexity.Article.ContentHTML(childComplexity), true

	case "Article.excerpt":
		if e.complexity.Article.Excerpt == nil {
			break
		}

		args, err := ec.field_Article_excerpt_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Article.Excerpt(childComplexity, args["truncateAt"].(*int32)), true

	case "Article.excerptHtml":
		if e.complexity.Article.ExcerptHTML == nil {
			break
		}

		return e.complexity.Article.ExcerptHTML(childComplexity), true

	case "Article.handle":
		if e.complexity.Article.Handle == nil {
			break
		}

		return e.complexity.Article.Handle(childComplexity), true

	case "Article.id":
		if e.complexity.Article.ID == nil {
			break
		}

		return e.complexity.Article.ID(childComplexity), true

	case "Article.image":
		if e.complexity.Article.Image == nil {
			break
		}

		return e.complexity.Article.Image(childComplexity), true

	case "Article.metafield":
		if e.complexity.Article.Metafield == nil {
			break
		}

		args, err := ec.field_Article_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Article.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Article.metafields":
		if e.complexity.Article.Metafields == nil {
			break
		}

		args, err := ec.field_Article_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Article.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Article.onlineStoreUrl":
		if e.complexity.Article.OnlineStoreURL == nil {
			break
		}

		return e.complexity.Article.OnlineStoreURL(childComplexity), true

	case "Article.publishedAt":
		if e.complexity.Article.PublishedAt == nil {
			break
		}

		return e.complexity.Article.PublishedAt(childComplexity), true

	case "Article.seo":
		if e.complexity.Article.Seo == nil {
			break
		}

		return e.complexity.Article.Seo(childComplexity), true

	case "Article.tags":
		if e.complexity.Article.Tags == nil {
			break
		}

		return e.complexity.Article.Tags(childComplexity), true

	case "Article.title":
		if e.complexity.Article.Title == nil {
			break
		}

		return e.complexity.Article.Title(childComplexity), true

	case "Article.trackingParameters":
		if e.complexity.Article.TrackingParameters == nil {
			break
		}

		return e.complexity.Article.TrackingParameters(childComplexity), true

	case "ArticleAuthor.bio":
		if e.complexity.ArticleAuthor.Bio == nil {
			break
		}

		return e.complexity.ArticleAuthor.Bio(childComplexity), true

	case "ArticleAuthor.email":
		if e.complexity.ArticleAuthor.Email == nil {
			break
		}

		return e.complexity.ArticleAuthor.Email(childComplexity), true

	case "ArticleAuthor.firstName":
		if e.complexity.ArticleAuthor.FirstName == nil {
			break
		}

		return e.complexity.ArticleAuthor.FirstName(childComplexity), true

	case "ArticleAuthor.lastName":
		if e.complexity.ArticleAuthor.LastName == nil {
			break
		}

		return e.complexity.ArticleAuthor.LastName(childComplexity), true

	case "ArticleAuthor.name":
		if e.complexity.ArticleAuthor.Name == nil {
			break
		}

		return e.complexity.ArticleAuthor.Name(childComplexity), true

	case "ArticleConnection.edges":
		if e.complexity.ArticleConnection.Edges == nil {
			break
		}

		return e.complexity.ArticleConnection.Edges(childComplexity), true

	case "ArticleConnection.nodes":
		if e.complexity.ArticleConnection.Nodes == nil {
			break
		}

		return e.complexity.ArticleConnection.Nodes(childComplexity), true

	case "ArticleConnection.pageInfo":
		if e.complexity.ArticleConnection.PageInfo == nil {
			break
		}

		return e.complexity.ArticleConnection.PageInfo(childComplexity), true

	case "ArticleEdge.cursor":
		if e.complexity.ArticleEdge.Cursor == nil {
			break
		}

		return e.complexity.ArticleEdge.Cursor(childComplexity), true

	case "ArticleEdge.node":
		if e.complexity.ArticleEdge.Node == nil {
			break
		}

		return e.complexity.ArticleEdge.Node(childComplexity), true

	case "Attribute.key":
		if e.complexity.Attribute.Key == nil {
			break
		}

		return e.complexity.Attribute.Key(childComplexity), true

	case "Attribute.value":
		if e.complexity.Attribute.Value == nil {
			break
		}

		return e.complexity.Attribute.Value(childComplexity), true

	case "AutomaticDiscountApplication.allocationMethod":
		if e.complexity.AutomaticDiscountApplication.AllocationMethod == nil {
			break
		}

		return e.complexity.AutomaticDiscountApplication.AllocationMethod(childComplexity), true

	case "AutomaticDiscountApplication.targetSelection":
		if e.complexity.AutomaticDiscountApplication.TargetSelection == nil {
			break
		}

		return e.complexity.AutomaticDiscountApplication.TargetSelection(childComplexity), true

	case "AutomaticDiscountApplication.targetType":
		if e.complexity.AutomaticDiscountApplication.TargetType == nil {
			break
		}

		return e.complexity.AutomaticDiscountApplication.TargetType(childComplexity), true

	case "AutomaticDiscountApplication.title":
		if e.complexity.AutomaticDiscountApplication.Title == nil {
			break
		}

		return e.complexity.AutomaticDiscountApplication.Title(childComplexity), true

	case "AutomaticDiscountApplication.value":
		if e.complexity.AutomaticDiscountApplication.Value == nil {
			break
		}

		return e.complexity.AutomaticDiscountApplication.Value(childComplexity), true

	case "AvailableShippingRates.ready":
		if e.complexity.AvailableShippingRates.Ready == nil {
			break
		}

		return e.complexity.AvailableShippingRates.Ready(childComplexity), true

	case "AvailableShippingRates.shippingRates":
		if e.complexity.AvailableShippingRates.ShippingRates == nil {
			break
		}

		return e.complexity.AvailableShippingRates.ShippingRates(childComplexity), true

	case "BaseCartLineConnection.edges":
		if e.complexity.BaseCartLineConnection.Edges == nil {
			break
		}

		return e.complexity.BaseCartLineConnection.Edges(childComplexity), true

	case "BaseCartLineConnection.nodes":
		if e.complexity.BaseCartLineConnection.Nodes == nil {
			break
		}

		return e.complexity.BaseCartLineConnection.Nodes(childComplexity), true

	case "BaseCartLineConnection.pageInfo":
		if e.complexity.BaseCartLineConnection.PageInfo == nil {
			break
		}

		return e.complexity.BaseCartLineConnection.PageInfo(childComplexity), true

	case "BaseCartLineEdge.cursor":
		if e.complexity.BaseCartLineEdge.Cursor == nil {
			break
		}

		return e.complexity.BaseCartLineEdge.Cursor(childComplexity), true

	case "BaseCartLineEdge.node":
		if e.complexity.BaseCartLineEdge.Node == nil {
			break
		}

		return e.complexity.BaseCartLineEdge.Node(childComplexity), true

	case "Blog.articleByHandle":
		if e.complexity.Blog.ArticleByHandle == nil {
			break
		}

		args, err := ec.field_Blog_articleByHandle_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Blog.ArticleByHandle(childComplexity, args["handle"].(string)), true

	case "Blog.articles":
		if e.complexity.Blog.Articles == nil {
			break
		}

		args, err := ec.field_Blog_articles_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Blog.Articles(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["query"].(*string), args["reverse"].(*bool), args["sortKey"].(*model.ArticleSortKeys)), true

	case "Blog.authors":
		if e.complexity.Blog.Authors == nil {
			break
		}

		return e.complexity.Blog.Authors(childComplexity), true

	case "Blog.handle":
		if e.complexity.Blog.Handle == nil {
			break
		}

		return e.complexity.Blog.Handle(childComplexity), true

	case "Blog.id":
		if e.complexity.Blog.ID == nil {
			break
		}

		return e.complexity.Blog.ID(childComplexity), true

	case "Blog.metafield":
		if e.complexity.Blog.Metafield == nil {
			break
		}

		args, err := ec.field_Blog_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Blog.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Blog.metafields":
		if e.complexity.Blog.Metafields == nil {
			break
		}

		args, err := ec.field_Blog_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Blog.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Blog.onlineStoreUrl":
		if e.complexity.Blog.OnlineStoreURL == nil {
			break
		}

		return e.complexity.Blog.OnlineStoreURL(childComplexity), true

	case "Blog.seo":
		if e.complexity.Blog.Seo == nil {
			break
		}

		return e.complexity.Blog.Seo(childComplexity), true

	case "Blog.title":
		if e.complexity.Blog.Title == nil {
			break
		}

		return e.complexity.Blog.Title(childComplexity), true

	case "BlogConnection.edges":
		if e.complexity.BlogConnection.Edges == nil {
			break
		}

		return e.complexity.BlogConnection.Edges(childComplexity), true

	case "BlogConnection.nodes":
		if e.complexity.BlogConnection.Nodes == nil {
			break
		}

		return e.complexity.BlogConnection.Nodes(childComplexity), true

	case "BlogConnection.pageInfo":
		if e.complexity.BlogConnection.PageInfo == nil {
			break
		}

		return e.complexity.BlogConnection.PageInfo(childComplexity), true

	case "BlogEdge.cursor":
		if e.complexity.BlogEdge.Cursor == nil {
			break
		}

		return e.complexity.BlogEdge.Cursor(childComplexity), true

	case "BlogEdge.node":
		if e.complexity.BlogEdge.Node == nil {
			break
		}

		return e.complexity.BlogEdge.Node(childComplexity), true

	case "Brand.colors":
		if e.complexity.Brand.Colors == nil {
			break
		}

		return e.complexity.Brand.Colors(childComplexity), true

	case "Brand.coverImage":
		if e.complexity.Brand.CoverImage == nil {
			break
		}

		return e.complexity.Brand.CoverImage(childComplexity), true

	case "Brand.logo":
		if e.complexity.Brand.Logo == nil {
			break
		}

		return e.complexity.Brand.Logo(childComplexity), true

	case "Brand.shortDescription":
		if e.complexity.Brand.ShortDescription == nil {
			break
		}

		return e.complexity.Brand.ShortDescription(childComplexity), true

	case "Brand.slogan":
		if e.complexity.Brand.Slogan == nil {
			break
		}

		return e.complexity.Brand.Slogan(childComplexity), true

	case "Brand.squareLogo":
		if e.complexity.Brand.SquareLogo == nil {
			break
		}

		return e.complexity.Brand.SquareLogo(childComplexity), true

	case "BrandColorGroup.background":
		if e.complexity.BrandColorGroup.Background == nil {
			break
		}

		return e.complexity.BrandColorGroup.Background(childComplexity), true

	case "BrandColorGroup.foreground":
		if e.complexity.BrandColorGroup.Foreground == nil {
			break
		}

		return e.complexity.BrandColorGroup.Foreground(childComplexity), true

	case "BrandColors.primary":
		if e.complexity.BrandColors.Primary == nil {
			break
		}

		return e.complexity.BrandColors.Primary(childComplexity), true

	case "BrandColors.secondary":
		if e.complexity.BrandColors.Secondary == nil {
			break
		}

		return e.complexity.BrandColors.Secondary(childComplexity), true

	case "Cart.appliedGiftCards":
		if e.complexity.Cart.AppliedGiftCards == nil {
			break
		}

		return e.complexity.Cart.AppliedGiftCards(childComplexity), true

	case "Cart.attribute":
		if e.complexity.Cart.Attribute == nil {
			break
		}

		args, err := ec.field_Cart_attribute_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Cart.Attribute(childComplexity, args["key"].(string)), true

	case "Cart.attributes":
		if e.complexity.Cart.Attributes == nil {
			break
		}

		return e.complexity.Cart.Attributes(childComplexity), true

	case "Cart.buyerIdentity":
		if e.complexity.Cart.BuyerIdentity == nil {
			break
		}

		return e.complexity.Cart.BuyerIdentity(childComplexity), true

	case "Cart.checkoutUrl":
		if e.complexity.Cart.CheckoutURL == nil {
			break
		}

		return e.complexity.Cart.CheckoutURL(childComplexity), true

	case "Cart.cost":
		if e.complexity.Cart.Cost == nil {
			break
		}

		return e.complexity.Cart.Cost(childComplexity), true

	case "Cart.createdAt":
		if e.complexity.Cart.CreatedAt == nil {
			break
		}

		return e.complexity.Cart.CreatedAt(childComplexity), true

	case "Cart.delivery":
		if e.complexity.Cart.Delivery == nil {
			break
		}

		return e.complexity.Cart.Delivery(childComplexity), true

	case "Cart.deliveryGroups":
		if e.complexity.Cart.DeliveryGroups == nil {
			break
		}

		args, err := ec.field_Cart_deliveryGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Cart.DeliveryGroups(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool), args["withCarrierRates"].(*bool)), true

	case "Cart.discountAllocations":
		if e.complexity.Cart.DiscountAllocations == nil {
			break
		}

		return e.complexity.Cart.DiscountAllocations(childComplexity), true

	case "Cart.discountCodes":
		if e.complexity.Cart.DiscountCodes == nil {
			break
		}

		return e.complexity.Cart.DiscountCodes(childComplexity), true

	case "Cart.estimatedCost":
		if e.complexity.Cart.EstimatedCost == nil {
			break
		}

		return e.complexity.Cart.EstimatedCost(childComplexity), true

	case "Cart.id":
		if e.complexity.Cart.ID == nil {
			break
		}

		return e.complexity.Cart.ID(childComplexity), true

	case "Cart.lines":
		if e.complexity.Cart.Lines == nil {
			break
		}

		args, err := ec.field_Cart_lines_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Cart.Lines(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "Cart.metafield":
		if e.complexity.Cart.Metafield == nil {
			break
		}

		args, err := ec.field_Cart_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Cart.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Cart.metafields":
		if e.complexity.Cart.Metafields == nil {
			break
		}

		args, err := ec.field_Cart_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Cart.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Cart.note":
		if e.complexity.Cart.Note == nil {
			break
		}

		return e.complexity.Cart.Note(childComplexity), true

	case "Cart.totalQuantity":
		if e.complexity.Cart.TotalQuantity == nil {
			break
		}

		return e.complexity.Cart.TotalQuantity(childComplexity), true

	case "Cart.updatedAt":
		if e.complexity.Cart.UpdatedAt == nil {
			break
		}

		return e.complexity.Cart.UpdatedAt(childComplexity), true

	case "CartAttributesUpdatePayload.cart":
		if e.complexity.CartAttributesUpdatePayload.Cart == nil {
			break
		}

		return e.complexity.CartAttributesUpdatePayload.Cart(childComplexity), true

	case "CartAttributesUpdatePayload.userErrors":
		if e.complexity.CartAttributesUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartAttributesUpdatePayload.UserErrors(childComplexity), true

	case "CartAttributesUpdatePayload.warnings":
		if e.complexity.CartAttributesUpdatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartAttributesUpdatePayload.Warnings(childComplexity), true

	case "CartAutomaticDiscountAllocation.discountApplication":
		if e.complexity.CartAutomaticDiscountAllocation.DiscountApplication == nil {
			break
		}

		return e.complexity.CartAutomaticDiscountAllocation.DiscountApplication(childComplexity), true

	case "CartAutomaticDiscountAllocation.discountedAmount":
		if e.complexity.CartAutomaticDiscountAllocation.DiscountedAmount == nil {
			break
		}

		return e.complexity.CartAutomaticDiscountAllocation.DiscountedAmount(childComplexity), true

	case "CartAutomaticDiscountAllocation.targetType":
		if e.complexity.CartAutomaticDiscountAllocation.TargetType == nil {
			break
		}

		return e.complexity.CartAutomaticDiscountAllocation.TargetType(childComplexity), true

	case "CartAutomaticDiscountAllocation.title":
		if e.complexity.CartAutomaticDiscountAllocation.Title == nil {
			break
		}

		return e.complexity.CartAutomaticDiscountAllocation.Title(childComplexity), true

	case "CartBillingAddressUpdatePayload.cart":
		if e.complexity.CartBillingAddressUpdatePayload.Cart == nil {
			break
		}

		return e.complexity.CartBillingAddressUpdatePayload.Cart(childComplexity), true

	case "CartBillingAddressUpdatePayload.userErrors":
		if e.complexity.CartBillingAddressUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartBillingAddressUpdatePayload.UserErrors(childComplexity), true

	case "CartBillingAddressUpdatePayload.warnings":
		if e.complexity.CartBillingAddressUpdatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartBillingAddressUpdatePayload.Warnings(childComplexity), true

	case "CartBuyerIdentity.countryCode":
		if e.complexity.CartBuyerIdentity.CountryCode == nil {
			break
		}

		return e.complexity.CartBuyerIdentity.CountryCode(childComplexity), true

	case "CartBuyerIdentity.customer":
		if e.complexity.CartBuyerIdentity.Customer == nil {
			break
		}

		return e.complexity.CartBuyerIdentity.Customer(childComplexity), true

	case "CartBuyerIdentity.deliveryAddressPreferences":
		if e.complexity.CartBuyerIdentity.DeliveryAddressPreferences == nil {
			break
		}

		return e.complexity.CartBuyerIdentity.DeliveryAddressPreferences(childComplexity), true

	case "CartBuyerIdentity.email":
		if e.complexity.CartBuyerIdentity.Email == nil {
			break
		}

		return e.complexity.CartBuyerIdentity.Email(childComplexity), true

	case "CartBuyerIdentity.phone":
		if e.complexity.CartBuyerIdentity.Phone == nil {
			break
		}

		return e.complexity.CartBuyerIdentity.Phone(childComplexity), true

	case "CartBuyerIdentity.preferences":
		if e.complexity.CartBuyerIdentity.Preferences == nil {
			break
		}

		return e.complexity.CartBuyerIdentity.Preferences(childComplexity), true

	case "CartBuyerIdentity.purchasingCompany":
		if e.complexity.CartBuyerIdentity.PurchasingCompany == nil {
			break
		}

		return e.complexity.CartBuyerIdentity.PurchasingCompany(childComplexity), true

	case "CartBuyerIdentityUpdatePayload.cart":
		if e.complexity.CartBuyerIdentityUpdatePayload.Cart == nil {
			break
		}

		return e.complexity.CartBuyerIdentityUpdatePayload.Cart(childComplexity), true

	case "CartBuyerIdentityUpdatePayload.userErrors":
		if e.complexity.CartBuyerIdentityUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartBuyerIdentityUpdatePayload.UserErrors(childComplexity), true

	case "CartBuyerIdentityUpdatePayload.warnings":
		if e.complexity.CartBuyerIdentityUpdatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartBuyerIdentityUpdatePayload.Warnings(childComplexity), true

	case "CartCodeDiscountAllocation.code":
		if e.complexity.CartCodeDiscountAllocation.Code == nil {
			break
		}

		return e.complexity.CartCodeDiscountAllocation.Code(childComplexity), true

	case "CartCodeDiscountAllocation.discountApplication":
		if e.complexity.CartCodeDiscountAllocation.DiscountApplication == nil {
			break
		}

		return e.complexity.CartCodeDiscountAllocation.DiscountApplication(childComplexity), true

	case "CartCodeDiscountAllocation.discountedAmount":
		if e.complexity.CartCodeDiscountAllocation.DiscountedAmount == nil {
			break
		}

		return e.complexity.CartCodeDiscountAllocation.DiscountedAmount(childComplexity), true

	case "CartCodeDiscountAllocation.targetType":
		if e.complexity.CartCodeDiscountAllocation.TargetType == nil {
			break
		}

		return e.complexity.CartCodeDiscountAllocation.TargetType(childComplexity), true

	case "CartCompletionActionRequired.action":
		if e.complexity.CartCompletionActionRequired.Action == nil {
			break
		}

		return e.complexity.CartCompletionActionRequired.Action(childComplexity), true

	case "CartCompletionActionRequired.id":
		if e.complexity.CartCompletionActionRequired.ID == nil {
			break
		}

		return e.complexity.CartCompletionActionRequired.ID(childComplexity), true

	case "CartCompletionFailed.errors":
		if e.complexity.CartCompletionFailed.Errors == nil {
			break
		}

		return e.complexity.CartCompletionFailed.Errors(childComplexity), true

	case "CartCompletionFailed.id":
		if e.complexity.CartCompletionFailed.ID == nil {
			break
		}

		return e.complexity.CartCompletionFailed.ID(childComplexity), true

	case "CartCompletionProcessing.id":
		if e.complexity.CartCompletionProcessing.ID == nil {
			break
		}

		return e.complexity.CartCompletionProcessing.ID(childComplexity), true

	case "CartCompletionProcessing.pollDelay":
		if e.complexity.CartCompletionProcessing.PollDelay == nil {
			break
		}

		return e.complexity.CartCompletionProcessing.PollDelay(childComplexity), true

	case "CartCompletionSuccess.completedAt":
		if e.complexity.CartCompletionSuccess.CompletedAt == nil {
			break
		}

		return e.complexity.CartCompletionSuccess.CompletedAt(childComplexity), true

	case "CartCompletionSuccess.id":
		if e.complexity.CartCompletionSuccess.ID == nil {
			break
		}

		return e.complexity.CartCompletionSuccess.ID(childComplexity), true

	case "CartCompletionSuccess.orderId":
		if e.complexity.CartCompletionSuccess.OrderID == nil {
			break
		}

		return e.complexity.CartCompletionSuccess.OrderID(childComplexity), true

	case "CartCompletionSuccess.orderUrl":
		if e.complexity.CartCompletionSuccess.OrderURL == nil {
			break
		}

		return e.complexity.CartCompletionSuccess.OrderURL(childComplexity), true

	case "CartCost.checkoutChargeAmount":
		if e.complexity.CartCost.CheckoutChargeAmount == nil {
			break
		}

		return e.complexity.CartCost.CheckoutChargeAmount(childComplexity), true

	case "CartCost.subtotalAmount":
		if e.complexity.CartCost.SubtotalAmount == nil {
			break
		}

		return e.complexity.CartCost.SubtotalAmount(childComplexity), true

	case "CartCost.subtotalAmountEstimated":
		if e.complexity.CartCost.SubtotalAmountEstimated == nil {
			break
		}

		return e.complexity.CartCost.SubtotalAmountEstimated(childComplexity), true

	case "CartCost.totalAmount":
		if e.complexity.CartCost.TotalAmount == nil {
			break
		}

		return e.complexity.CartCost.TotalAmount(childComplexity), true

	case "CartCost.totalAmountEstimated":
		if e.complexity.CartCost.TotalAmountEstimated == nil {
			break
		}

		return e.complexity.CartCost.TotalAmountEstimated(childComplexity), true

	case "CartCost.totalDutyAmount":
		if e.complexity.CartCost.TotalDutyAmount == nil {
			break
		}

		return e.complexity.CartCost.TotalDutyAmount(childComplexity), true

	case "CartCost.totalDutyAmountEstimated":
		if e.complexity.CartCost.TotalDutyAmountEstimated == nil {
			break
		}

		return e.complexity.CartCost.TotalDutyAmountEstimated(childComplexity), true

	case "CartCost.totalTaxAmount":
		if e.complexity.CartCost.TotalTaxAmount == nil {
			break
		}

		return e.complexity.CartCost.TotalTaxAmount(childComplexity), true

	case "CartCost.totalTaxAmountEstimated":
		if e.complexity.CartCost.TotalTaxAmountEstimated == nil {
			break
		}

		return e.complexity.CartCost.TotalTaxAmountEstimated(childComplexity), true

	case "CartCreatePayload.cart":
		if e.complexity.CartCreatePayload.Cart == nil {
			break
		}

		return e.complexity.CartCreatePayload.Cart(childComplexity), true

	case "CartCreatePayload.userErrors":
		if e.complexity.CartCreatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartCreatePayload.UserErrors(childComplexity), true

	case "CartCreatePayload.warnings":
		if e.complexity.CartCreatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartCreatePayload.Warnings(childComplexity), true

	case "CartCustomDiscountAllocation.discountApplication":
		if e.complexity.CartCustomDiscountAllocation.DiscountApplication == nil {
			break
		}

		return e.complexity.CartCustomDiscountAllocation.DiscountApplication(childComplexity), true

	case "CartCustomDiscountAllocation.discountedAmount":
		if e.complexity.CartCustomDiscountAllocation.DiscountedAmount == nil {
			break
		}

		return e.complexity.CartCustomDiscountAllocation.DiscountedAmount(childComplexity), true

	case "CartCustomDiscountAllocation.targetType":
		if e.complexity.CartCustomDiscountAllocation.TargetType == nil {
			break
		}

		return e.complexity.CartCustomDiscountAllocation.TargetType(childComplexity), true

	case "CartCustomDiscountAllocation.title":
		if e.complexity.CartCustomDiscountAllocation.Title == nil {
			break
		}

		return e.complexity.CartCustomDiscountAllocation.Title(childComplexity), true

	case "CartDelivery.addresses":
		if e.complexity.CartDelivery.Addresses == nil {
			break
		}

		args, err := ec.field_CartDelivery_addresses_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CartDelivery.Addresses(childComplexity, args["selected"].(*bool)), true

	case "CartDeliveryAddress.address1":
		if e.complexity.CartDeliveryAddress.Address1 == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.Address1(childComplexity), true

	case "CartDeliveryAddress.address2":
		if e.complexity.CartDeliveryAddress.Address2 == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.Address2(childComplexity), true

	case "CartDeliveryAddress.city":
		if e.complexity.CartDeliveryAddress.City == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.City(childComplexity), true

	case "CartDeliveryAddress.company":
		if e.complexity.CartDeliveryAddress.Company == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.Company(childComplexity), true

	case "CartDeliveryAddress.countryCode":
		if e.complexity.CartDeliveryAddress.CountryCode == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.CountryCode(childComplexity), true

	case "CartDeliveryAddress.firstName":
		if e.complexity.CartDeliveryAddress.FirstName == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.FirstName(childComplexity), true

	case "CartDeliveryAddress.formatted":
		if e.complexity.CartDeliveryAddress.Formatted == nil {
			break
		}

		args, err := ec.field_CartDeliveryAddress_formatted_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CartDeliveryAddress.Formatted(childComplexity, args["withCompany"].(*bool), args["withName"].(*bool)), true

	case "CartDeliveryAddress.formattedArea":
		if e.complexity.CartDeliveryAddress.FormattedArea == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.FormattedArea(childComplexity), true

	case "CartDeliveryAddress.lastName":
		if e.complexity.CartDeliveryAddress.LastName == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.LastName(childComplexity), true

	case "CartDeliveryAddress.latitude":
		if e.complexity.CartDeliveryAddress.Latitude == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.Latitude(childComplexity), true

	case "CartDeliveryAddress.longitude":
		if e.complexity.CartDeliveryAddress.Longitude == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.Longitude(childComplexity), true

	case "CartDeliveryAddress.name":
		if e.complexity.CartDeliveryAddress.Name == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.Name(childComplexity), true

	case "CartDeliveryAddress.phone":
		if e.complexity.CartDeliveryAddress.Phone == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.Phone(childComplexity), true

	case "CartDeliveryAddress.provinceCode":
		if e.complexity.CartDeliveryAddress.ProvinceCode == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.ProvinceCode(childComplexity), true

	case "CartDeliveryAddress.zip":
		if e.complexity.CartDeliveryAddress.Zip == nil {
			break
		}

		return e.complexity.CartDeliveryAddress.Zip(childComplexity), true

	case "CartDeliveryAddressesAddPayload.cart":
		if e.complexity.CartDeliveryAddressesAddPayload.Cart == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesAddPayload.Cart(childComplexity), true

	case "CartDeliveryAddressesAddPayload.userErrors":
		if e.complexity.CartDeliveryAddressesAddPayload.UserErrors == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesAddPayload.UserErrors(childComplexity), true

	case "CartDeliveryAddressesAddPayload.warnings":
		if e.complexity.CartDeliveryAddressesAddPayload.Warnings == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesAddPayload.Warnings(childComplexity), true

	case "CartDeliveryAddressesRemovePayload.cart":
		if e.complexity.CartDeliveryAddressesRemovePayload.Cart == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesRemovePayload.Cart(childComplexity), true

	case "CartDeliveryAddressesRemovePayload.userErrors":
		if e.complexity.CartDeliveryAddressesRemovePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesRemovePayload.UserErrors(childComplexity), true

	case "CartDeliveryAddressesRemovePayload.warnings":
		if e.complexity.CartDeliveryAddressesRemovePayload.Warnings == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesRemovePayload.Warnings(childComplexity), true

	case "CartDeliveryAddressesReplacePayload.cart":
		if e.complexity.CartDeliveryAddressesReplacePayload.Cart == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesReplacePayload.Cart(childComplexity), true

	case "CartDeliveryAddressesReplacePayload.userErrors":
		if e.complexity.CartDeliveryAddressesReplacePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesReplacePayload.UserErrors(childComplexity), true

	case "CartDeliveryAddressesReplacePayload.warnings":
		if e.complexity.CartDeliveryAddressesReplacePayload.Warnings == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesReplacePayload.Warnings(childComplexity), true

	case "CartDeliveryAddressesUpdatePayload.cart":
		if e.complexity.CartDeliveryAddressesUpdatePayload.Cart == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesUpdatePayload.Cart(childComplexity), true

	case "CartDeliveryAddressesUpdatePayload.userErrors":
		if e.complexity.CartDeliveryAddressesUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesUpdatePayload.UserErrors(childComplexity), true

	case "CartDeliveryAddressesUpdatePayload.warnings":
		if e.complexity.CartDeliveryAddressesUpdatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartDeliveryAddressesUpdatePayload.Warnings(childComplexity), true

	case "CartDeliveryCoordinatesPreference.countryCode":
		if e.complexity.CartDeliveryCoordinatesPreference.CountryCode == nil {
			break
		}

		return e.complexity.CartDeliveryCoordinatesPreference.CountryCode(childComplexity), true

	case "CartDeliveryCoordinatesPreference.latitude":
		if e.complexity.CartDeliveryCoordinatesPreference.Latitude == nil {
			break
		}

		return e.complexity.CartDeliveryCoordinatesPreference.Latitude(childComplexity), true

	case "CartDeliveryCoordinatesPreference.longitude":
		if e.complexity.CartDeliveryCoordinatesPreference.Longitude == nil {
			break
		}

		return e.complexity.CartDeliveryCoordinatesPreference.Longitude(childComplexity), true

	case "CartDeliveryGroup.cartLines":
		if e.complexity.CartDeliveryGroup.CartLines == nil {
			break
		}

		args, err := ec.field_CartDeliveryGroup_cartLines_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CartDeliveryGroup.CartLines(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "CartDeliveryGroup.deliveryAddress":
		if e.complexity.CartDeliveryGroup.DeliveryAddress == nil {
			break
		}

		return e.complexity.CartDeliveryGroup.DeliveryAddress(childComplexity), true

	case "CartDeliveryGroup.deliveryOptions":
		if e.complexity.CartDeliveryGroup.DeliveryOptions == nil {
			break
		}

		return e.complexity.CartDeliveryGroup.DeliveryOptions(childComplexity), true

	case "CartDeliveryGroup.groupType":
		if e.complexity.CartDeliveryGroup.GroupType == nil {
			break
		}

		return e.complexity.CartDeliveryGroup.GroupType(childComplexity), true

	case "CartDeliveryGroup.id":
		if e.complexity.CartDeliveryGroup.ID == nil {
			break
		}

		return e.complexity.CartDeliveryGroup.ID(childComplexity), true

	case "CartDeliveryGroup.selectedDeliveryOption":
		if e.complexity.CartDeliveryGroup.SelectedDeliveryOption == nil {
			break
		}

		return e.complexity.CartDeliveryGroup.SelectedDeliveryOption(childComplexity), true

	case "CartDeliveryGroupConnection.edges":
		if e.complexity.CartDeliveryGroupConnection.Edges == nil {
			break
		}

		return e.complexity.CartDeliveryGroupConnection.Edges(childComplexity), true

	case "CartDeliveryGroupConnection.nodes":
		if e.complexity.CartDeliveryGroupConnection.Nodes == nil {
			break
		}

		return e.complexity.CartDeliveryGroupConnection.Nodes(childComplexity), true

	case "CartDeliveryGroupConnection.pageInfo":
		if e.complexity.CartDeliveryGroupConnection.PageInfo == nil {
			break
		}

		return e.complexity.CartDeliveryGroupConnection.PageInfo(childComplexity), true

	case "CartDeliveryGroupEdge.cursor":
		if e.complexity.CartDeliveryGroupEdge.Cursor == nil {
			break
		}

		return e.complexity.CartDeliveryGroupEdge.Cursor(childComplexity), true

	case "CartDeliveryGroupEdge.node":
		if e.complexity.CartDeliveryGroupEdge.Node == nil {
			break
		}

		return e.complexity.CartDeliveryGroupEdge.Node(childComplexity), true

	case "CartDeliveryOption.code":
		if e.complexity.CartDeliveryOption.Code == nil {
			break
		}

		return e.complexity.CartDeliveryOption.Code(childComplexity), true

	case "CartDeliveryOption.deliveryMethodType":
		if e.complexity.CartDeliveryOption.DeliveryMethodType == nil {
			break
		}

		return e.complexity.CartDeliveryOption.DeliveryMethodType(childComplexity), true

	case "CartDeliveryOption.description":
		if e.complexity.CartDeliveryOption.Description == nil {
			break
		}

		return e.complexity.CartDeliveryOption.Description(childComplexity), true

	case "CartDeliveryOption.estimatedCost":
		if e.complexity.CartDeliveryOption.EstimatedCost == nil {
			break
		}

		return e.complexity.CartDeliveryOption.EstimatedCost(childComplexity), true

	case "CartDeliveryOption.handle":
		if e.complexity.CartDeliveryOption.Handle == nil {
			break
		}

		return e.complexity.CartDeliveryOption.Handle(childComplexity), true

	case "CartDeliveryOption.title":
		if e.complexity.CartDeliveryOption.Title == nil {
			break
		}

		return e.complexity.CartDeliveryOption.Title(childComplexity), true

	case "CartDeliveryPreference.coordinates":
		if e.complexity.CartDeliveryPreference.Coordinates == nil {
			break
		}

		return e.complexity.CartDeliveryPreference.Coordinates(childComplexity), true

	case "CartDeliveryPreference.deliveryMethod":
		if e.complexity.CartDeliveryPreference.DeliveryMethod == nil {
			break
		}

		return e.complexity.CartDeliveryPreference.DeliveryMethod(childComplexity), true

	case "CartDeliveryPreference.pickupHandle":
		if e.complexity.CartDeliveryPreference.PickupHandle == nil {
			break
		}

		return e.complexity.CartDeliveryPreference.PickupHandle(childComplexity), true

	case "CartDiscountApplication.allocationMethod":
		if e.complexity.CartDiscountApplication.AllocationMethod == nil {
			break
		}

		return e.complexity.CartDiscountApplication.AllocationMethod(childComplexity), true

	case "CartDiscountApplication.targetSelection":
		if e.complexity.CartDiscountApplication.TargetSelection == nil {
			break
		}

		return e.complexity.CartDiscountApplication.TargetSelection(childComplexity), true

	case "CartDiscountApplication.targetType":
		if e.complexity.CartDiscountApplication.TargetType == nil {
			break
		}

		return e.complexity.CartDiscountApplication.TargetType(childComplexity), true

	case "CartDiscountApplication.value":
		if e.complexity.CartDiscountApplication.Value == nil {
			break
		}

		return e.complexity.CartDiscountApplication.Value(childComplexity), true

	case "CartDiscountCode.applicable":
		if e.complexity.CartDiscountCode.Applicable == nil {
			break
		}

		return e.complexity.CartDiscountCode.Applicable(childComplexity), true

	case "CartDiscountCode.code":
		if e.complexity.CartDiscountCode.Code == nil {
			break
		}

		return e.complexity.CartDiscountCode.Code(childComplexity), true

	case "CartDiscountCodesUpdatePayload.cart":
		if e.complexity.CartDiscountCodesUpdatePayload.Cart == nil {
			break
		}

		return e.complexity.CartDiscountCodesUpdatePayload.Cart(childComplexity), true

	case "CartDiscountCodesUpdatePayload.userErrors":
		if e.complexity.CartDiscountCodesUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartDiscountCodesUpdatePayload.UserErrors(childComplexity), true

	case "CartDiscountCodesUpdatePayload.warnings":
		if e.complexity.CartDiscountCodesUpdatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartDiscountCodesUpdatePayload.Warnings(childComplexity), true

	case "CartEstimatedCost.checkoutChargeAmount":
		if e.complexity.CartEstimatedCost.CheckoutChargeAmount == nil {
			break
		}

		return e.complexity.CartEstimatedCost.CheckoutChargeAmount(childComplexity), true

	case "CartEstimatedCost.subtotalAmount":
		if e.complexity.CartEstimatedCost.SubtotalAmount == nil {
			break
		}

		return e.complexity.CartEstimatedCost.SubtotalAmount(childComplexity), true

	case "CartEstimatedCost.totalAmount":
		if e.complexity.CartEstimatedCost.TotalAmount == nil {
			break
		}

		return e.complexity.CartEstimatedCost.TotalAmount(childComplexity), true

	case "CartEstimatedCost.totalDutyAmount":
		if e.complexity.CartEstimatedCost.TotalDutyAmount == nil {
			break
		}

		return e.complexity.CartEstimatedCost.TotalDutyAmount(childComplexity), true

	case "CartEstimatedCost.totalTaxAmount":
		if e.complexity.CartEstimatedCost.TotalTaxAmount == nil {
			break
		}

		return e.complexity.CartEstimatedCost.TotalTaxAmount(childComplexity), true

	case "CartGiftCardCodesRemovePayload.cart":
		if e.complexity.CartGiftCardCodesRemovePayload.Cart == nil {
			break
		}

		return e.complexity.CartGiftCardCodesRemovePayload.Cart(childComplexity), true

	case "CartGiftCardCodesRemovePayload.userErrors":
		if e.complexity.CartGiftCardCodesRemovePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartGiftCardCodesRemovePayload.UserErrors(childComplexity), true

	case "CartGiftCardCodesRemovePayload.warnings":
		if e.complexity.CartGiftCardCodesRemovePayload.Warnings == nil {
			break
		}

		return e.complexity.CartGiftCardCodesRemovePayload.Warnings(childComplexity), true

	case "CartGiftCardCodesUpdatePayload.cart":
		if e.complexity.CartGiftCardCodesUpdatePayload.Cart == nil {
			break
		}

		return e.complexity.CartGiftCardCodesUpdatePayload.Cart(childComplexity), true

	case "CartGiftCardCodesUpdatePayload.userErrors":
		if e.complexity.CartGiftCardCodesUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartGiftCardCodesUpdatePayload.UserErrors(childComplexity), true

	case "CartGiftCardCodesUpdatePayload.warnings":
		if e.complexity.CartGiftCardCodesUpdatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartGiftCardCodesUpdatePayload.Warnings(childComplexity), true

	case "CartLine.attribute":
		if e.complexity.CartLine.Attribute == nil {
			break
		}

		args, err := ec.field_CartLine_attribute_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CartLine.Attribute(childComplexity, args["key"].(string)), true

	case "CartLine.attributes":
		if e.complexity.CartLine.Attributes == nil {
			break
		}

		return e.complexity.CartLine.Attributes(childComplexity), true

	case "CartLine.cost":
		if e.complexity.CartLine.Cost == nil {
			break
		}

		return e.complexity.CartLine.Cost(childComplexity), true

	case "CartLine.discountAllocations":
		if e.complexity.CartLine.DiscountAllocations == nil {
			break
		}

		return e.complexity.CartLine.DiscountAllocations(childComplexity), true

	case "CartLine.estimatedCost":
		if e.complexity.CartLine.EstimatedCost == nil {
			break
		}

		return e.complexity.CartLine.EstimatedCost(childComplexity), true

	case "CartLine.id":
		if e.complexity.CartLine.ID == nil {
			break
		}

		return e.complexity.CartLine.ID(childComplexity), true

	case "CartLine.merchandise":
		if e.complexity.CartLine.Merchandise == nil {
			break
		}

		return e.complexity.CartLine.Merchandise(childComplexity), true

	case "CartLine.quantity":
		if e.complexity.CartLine.Quantity == nil {
			break
		}

		return e.complexity.CartLine.Quantity(childComplexity), true

	case "CartLine.sellingPlanAllocation":
		if e.complexity.CartLine.SellingPlanAllocation == nil {
			break
		}

		return e.complexity.CartLine.SellingPlanAllocation(childComplexity), true

	case "CartLineCost.amountPerQuantity":
		if e.complexity.CartLineCost.AmountPerQuantity == nil {
			break
		}

		return e.complexity.CartLineCost.AmountPerQuantity(childComplexity), true

	case "CartLineCost.compareAtAmountPerQuantity":
		if e.complexity.CartLineCost.CompareAtAmountPerQuantity == nil {
			break
		}

		return e.complexity.CartLineCost.CompareAtAmountPerQuantity(childComplexity), true

	case "CartLineCost.subtotalAmount":
		if e.complexity.CartLineCost.SubtotalAmount == nil {
			break
		}

		return e.complexity.CartLineCost.SubtotalAmount(childComplexity), true

	case "CartLineCost.totalAmount":
		if e.complexity.CartLineCost.TotalAmount == nil {
			break
		}

		return e.complexity.CartLineCost.TotalAmount(childComplexity), true

	case "CartLineEstimatedCost.amount":
		if e.complexity.CartLineEstimatedCost.Amount == nil {
			break
		}

		return e.complexity.CartLineEstimatedCost.Amount(childComplexity), true

	case "CartLineEstimatedCost.compareAtAmount":
		if e.complexity.CartLineEstimatedCost.CompareAtAmount == nil {
			break
		}

		return e.complexity.CartLineEstimatedCost.CompareAtAmount(childComplexity), true

	case "CartLineEstimatedCost.subtotalAmount":
		if e.complexity.CartLineEstimatedCost.SubtotalAmount == nil {
			break
		}

		return e.complexity.CartLineEstimatedCost.SubtotalAmount(childComplexity), true

	case "CartLineEstimatedCost.totalAmount":
		if e.complexity.CartLineEstimatedCost.TotalAmount == nil {
			break
		}

		return e.complexity.CartLineEstimatedCost.TotalAmount(childComplexity), true

	case "CartLinesAddPayload.cart":
		if e.complexity.CartLinesAddPayload.Cart == nil {
			break
		}

		return e.complexity.CartLinesAddPayload.Cart(childComplexity), true

	case "CartLinesAddPayload.userErrors":
		if e.complexity.CartLinesAddPayload.UserErrors == nil {
			break
		}

		return e.complexity.CartLinesAddPayload.UserErrors(childComplexity), true

	case "CartLinesAddPayload.warnings":
		if e.complexity.CartLinesAddPayload.Warnings == nil {
			break
		}

		return e.complexity.CartLinesAddPayload.Warnings(childComplexity), true

	case "CartLinesRemovePayload.cart":
		if e.complexity.CartLinesRemovePayload.Cart == nil {
			break
		}

		return e.complexity.CartLinesRemovePayload.Cart(childComplexity), true

	case "CartLinesRemovePayload.userErrors":
		if e.complexity.CartLinesRemovePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartLinesRemovePayload.UserErrors(childComplexity), true

	case "CartLinesRemovePayload.warnings":
		if e.complexity.CartLinesRemovePayload.Warnings == nil {
			break
		}

		return e.complexity.CartLinesRemovePayload.Warnings(childComplexity), true

	case "CartLinesUpdatePayload.cart":
		if e.complexity.CartLinesUpdatePayload.Cart == nil {
			break
		}

		return e.complexity.CartLinesUpdatePayload.Cart(childComplexity), true

	case "CartLinesUpdatePayload.userErrors":
		if e.complexity.CartLinesUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartLinesUpdatePayload.UserErrors(childComplexity), true

	case "CartLinesUpdatePayload.warnings":
		if e.complexity.CartLinesUpdatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartLinesUpdatePayload.Warnings(childComplexity), true

	case "CartMetafieldDeletePayload.deletedId":
		if e.complexity.CartMetafieldDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.CartMetafieldDeletePayload.DeletedID(childComplexity), true

	case "CartMetafieldDeletePayload.userErrors":
		if e.complexity.CartMetafieldDeletePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartMetafieldDeletePayload.UserErrors(childComplexity), true

	case "CartMetafieldsSetPayload.metafields":
		if e.complexity.CartMetafieldsSetPayload.Metafields == nil {
			break
		}

		return e.complexity.CartMetafieldsSetPayload.Metafields(childComplexity), true

	case "CartMetafieldsSetPayload.userErrors":
		if e.complexity.CartMetafieldsSetPayload.UserErrors == nil {
			break
		}

		return e.complexity.CartMetafieldsSetPayload.UserErrors(childComplexity), true

	case "CartNoteUpdatePayload.cart":
		if e.complexity.CartNoteUpdatePayload.Cart == nil {
			break
		}

		return e.complexity.CartNoteUpdatePayload.Cart(childComplexity), true

	case "CartNoteUpdatePayload.userErrors":
		if e.complexity.CartNoteUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartNoteUpdatePayload.UserErrors(childComplexity), true

	case "CartNoteUpdatePayload.warnings":
		if e.complexity.CartNoteUpdatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartNoteUpdatePayload.Warnings(childComplexity), true

	case "CartOperationError.code":
		if e.complexity.CartOperationError.Code == nil {
			break
		}

		return e.complexity.CartOperationError.Code(childComplexity), true

	case "CartOperationError.message":
		if e.complexity.CartOperationError.Message == nil {
			break
		}

		return e.complexity.CartOperationError.Message(childComplexity), true

	case "CartPaymentUpdatePayload.cart":
		if e.complexity.CartPaymentUpdatePayload.Cart == nil {
			break
		}

		return e.complexity.CartPaymentUpdatePayload.Cart(childComplexity), true

	case "CartPaymentUpdatePayload.userErrors":
		if e.complexity.CartPaymentUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartPaymentUpdatePayload.UserErrors(childComplexity), true

	case "CartPaymentUpdatePayload.warnings":
		if e.complexity.CartPaymentUpdatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartPaymentUpdatePayload.Warnings(childComplexity), true

	case "CartPreferences.delivery":
		if e.complexity.CartPreferences.Delivery == nil {
			break
		}

		return e.complexity.CartPreferences.Delivery(childComplexity), true

	case "CartPreferences.wallet":
		if e.complexity.CartPreferences.Wallet == nil {
			break
		}

		return e.complexity.CartPreferences.Wallet(childComplexity), true

	case "CartPrepareForCompletionPayload.result":
		if e.complexity.CartPrepareForCompletionPayload.Result == nil {
			break
		}

		return e.complexity.CartPrepareForCompletionPayload.Result(childComplexity), true

	case "CartPrepareForCompletionPayload.userErrors":
		if e.complexity.CartPrepareForCompletionPayload.UserErrors == nil {
			break
		}

		return e.complexity.CartPrepareForCompletionPayload.UserErrors(childComplexity), true

	case "CartRemovePersonalDataPayload.cart":
		if e.complexity.CartRemovePersonalDataPayload.Cart == nil {
			break
		}

		return e.complexity.CartRemovePersonalDataPayload.Cart(childComplexity), true

	case "CartRemovePersonalDataPayload.userErrors":
		if e.complexity.CartRemovePersonalDataPayload.UserErrors == nil {
			break
		}

		return e.complexity.CartRemovePersonalDataPayload.UserErrors(childComplexity), true

	case "CartRemovePersonalDataPayload.warnings":
		if e.complexity.CartRemovePersonalDataPayload.Warnings == nil {
			break
		}

		return e.complexity.CartRemovePersonalDataPayload.Warnings(childComplexity), true

	case "CartSelectableAddress.address":
		if e.complexity.CartSelectableAddress.Address == nil {
			break
		}

		return e.complexity.CartSelectableAddress.Address(childComplexity), true

	case "CartSelectableAddress.id":
		if e.complexity.CartSelectableAddress.ID == nil {
			break
		}

		return e.complexity.CartSelectableAddress.ID(childComplexity), true

	case "CartSelectableAddress.oneTimeUse":
		if e.complexity.CartSelectableAddress.OneTimeUse == nil {
			break
		}

		return e.complexity.CartSelectableAddress.OneTimeUse(childComplexity), true

	case "CartSelectableAddress.selected":
		if e.complexity.CartSelectableAddress.Selected == nil {
			break
		}

		return e.complexity.CartSelectableAddress.Selected(childComplexity), true

	case "CartSelectedDeliveryOptionsUpdatePayload.cart":
		if e.complexity.CartSelectedDeliveryOptionsUpdatePayload.Cart == nil {
			break
		}

		return e.complexity.CartSelectedDeliveryOptionsUpdatePayload.Cart(childComplexity), true

	case "CartSelectedDeliveryOptionsUpdatePayload.userErrors":
		if e.complexity.CartSelectedDeliveryOptionsUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CartSelectedDeliveryOptionsUpdatePayload.UserErrors(childComplexity), true

	case "CartSelectedDeliveryOptionsUpdatePayload.warnings":
		if e.complexity.CartSelectedDeliveryOptionsUpdatePayload.Warnings == nil {
			break
		}

		return e.complexity.CartSelectedDeliveryOptionsUpdatePayload.Warnings(childComplexity), true

	case "CartStatusNotReady.cart":
		if e.complexity.CartStatusNotReady.Cart == nil {
			break
		}

		return e.complexity.CartStatusNotReady.Cart(childComplexity), true

	case "CartStatusNotReady.errors":
		if e.complexity.CartStatusNotReady.Errors == nil {
			break
		}

		return e.complexity.CartStatusNotReady.Errors(childComplexity), true

	case "CartStatusReady.cart":
		if e.complexity.CartStatusReady.Cart == nil {
			break
		}

		return e.complexity.CartStatusReady.Cart(childComplexity), true

	case "CartSubmitForCompletionPayload.result":
		if e.complexity.CartSubmitForCompletionPayload.Result == nil {
			break
		}

		return e.complexity.CartSubmitForCompletionPayload.Result(childComplexity), true

	case "CartSubmitForCompletionPayload.userErrors":
		if e.complexity.CartSubmitForCompletionPayload.UserErrors == nil {
			break
		}

		return e.complexity.CartSubmitForCompletionPayload.UserErrors(childComplexity), true

	case "CartThrottled.cart":
		if e.complexity.CartThrottled.Cart == nil {
			break
		}

		return e.complexity.CartThrottled.Cart(childComplexity), true

	case "CartThrottled.pollAfter":
		if e.complexity.CartThrottled.PollAfter == nil {
			break
		}

		return e.complexity.CartThrottled.PollAfter(childComplexity), true

	case "CartUserError.code":
		if e.complexity.CartUserError.Code == nil {
			break
		}

		return e.complexity.CartUserError.Code(childComplexity), true

	case "CartUserError.field":
		if e.complexity.CartUserError.Field == nil {
			break
		}

		return e.complexity.CartUserError.Field(childComplexity), true

	case "CartUserError.message":
		if e.complexity.CartUserError.Message == nil {
			break
		}

		return e.complexity.CartUserError.Message(childComplexity), true

	case "CartWarning.code":
		if e.complexity.CartWarning.Code == nil {
			break
		}

		return e.complexity.CartWarning.Code(childComplexity), true

	case "CartWarning.message":
		if e.complexity.CartWarning.Message == nil {
			break
		}

		return e.complexity.CartWarning.Message(childComplexity), true

	case "CartWarning.target":
		if e.complexity.CartWarning.Target == nil {
			break
		}

		return e.complexity.CartWarning.Target(childComplexity), true

	case "Checkout.appliedGiftCards":
		if e.complexity.Checkout.AppliedGiftCards == nil {
			break
		}

		return e.complexity.Checkout.AppliedGiftCards(childComplexity), true

	case "Checkout.availableShippingRates":
		if e.complexity.Checkout.AvailableShippingRates == nil {
			break
		}

		return e.complexity.Checkout.AvailableShippingRates(childComplexity), true

	case "Checkout.buyerIdentity":
		if e.complexity.Checkout.BuyerIdentity == nil {
			break
		}

		return e.complexity.Checkout.BuyerIdentity(childComplexity), true

	case "Checkout.completedAt":
		if e.complexity.Checkout.CompletedAt == nil {
			break
		}

		return e.complexity.Checkout.CompletedAt(childComplexity), true

	case "Checkout.createdAt":
		if e.complexity.Checkout.CreatedAt == nil {
			break
		}

		return e.complexity.Checkout.CreatedAt(childComplexity), true

	case "Checkout.currencyCode":
		if e.complexity.Checkout.CurrencyCode == nil {
			break
		}

		return e.complexity.Checkout.CurrencyCode(childComplexity), true

	case "Checkout.customAttributes":
		if e.complexity.Checkout.CustomAttributes == nil {
			break
		}

		return e.complexity.Checkout.CustomAttributes(childComplexity), true

	case "Checkout.discountApplications":
		if e.complexity.Checkout.DiscountApplications == nil {
			break
		}

		args, err := ec.field_Checkout_discountApplications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Checkout.DiscountApplications(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "Checkout.email":
		if e.complexity.Checkout.Email == nil {
			break
		}

		return e.complexity.Checkout.Email(childComplexity), true

	case "Checkout.id":
		if e.complexity.Checkout.ID == nil {
			break
		}

		return e.complexity.Checkout.ID(childComplexity), true

	case "Checkout.lineItems":
		if e.complexity.Checkout.LineItems == nil {
			break
		}

		args, err := ec.field_Checkout_lineItems_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Checkout.LineItems(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "Checkout.lineItemsSubtotalPrice":
		if e.complexity.Checkout.LineItemsSubtotalPrice == nil {
			break
		}

		return e.complexity.Checkout.LineItemsSubtotalPrice(childComplexity), true

	case "Checkout.note":
		if e.complexity.Checkout.Note == nil {
			break
		}

		return e.complexity.Checkout.Note(childComplexity), true

	case "Checkout.order":
		if e.complexity.Checkout.Order == nil {
			break
		}

		return e.complexity.Checkout.Order(childComplexity), true

	case "Checkout.orderStatusUrl":
		if e.complexity.Checkout.OrderStatusURL == nil {
			break
		}

		return e.complexity.Checkout.OrderStatusURL(childComplexity), true

	case "Checkout.paymentDue":
		if e.complexity.Checkout.PaymentDue == nil {
			break
		}

		return e.complexity.Checkout.PaymentDue(childComplexity), true

	case "Checkout.paymentDueV2":
		if e.complexity.Checkout.PaymentDueV2 == nil {
			break
		}

		return e.complexity.Checkout.PaymentDueV2(childComplexity), true

	case "Checkout.ready":
		if e.complexity.Checkout.Ready == nil {
			break
		}

		return e.complexity.Checkout.Ready(childComplexity), true

	case "Checkout.requiresShipping":
		if e.complexity.Checkout.RequiresShipping == nil {
			break
		}

		return e.complexity.Checkout.RequiresShipping(childComplexity), true

	case "Checkout.shippingAddress":
		if e.complexity.Checkout.ShippingAddress == nil {
			break
		}

		return e.complexity.Checkout.ShippingAddress(childComplexity), true

	case "Checkout.shippingDiscountAllocations":
		if e.complexity.Checkout.ShippingDiscountAllocations == nil {
			break
		}

		return e.complexity.Checkout.ShippingDiscountAllocations(childComplexity), true

	case "Checkout.shippingLine":
		if e.complexity.Checkout.ShippingLine == nil {
			break
		}

		return e.complexity.Checkout.ShippingLine(childComplexity), true

	case "Checkout.subtotalPrice":
		if e.complexity.Checkout.SubtotalPrice == nil {
			break
		}

		return e.complexity.Checkout.SubtotalPrice(childComplexity), true

	case "Checkout.subtotalPriceV2":
		if e.complexity.Checkout.SubtotalPriceV2 == nil {
			break
		}

		return e.complexity.Checkout.SubtotalPriceV2(childComplexity), true

	case "Checkout.taxExempt":
		if e.complexity.Checkout.TaxExempt == nil {
			break
		}

		return e.complexity.Checkout.TaxExempt(childComplexity), true

	case "Checkout.taxesIncluded":
		if e.complexity.Checkout.TaxesIncluded == nil {
			break
		}

		return e.complexity.Checkout.TaxesIncluded(childComplexity), true

	case "Checkout.totalDuties":
		if e.complexity.Checkout.TotalDuties == nil {
			break
		}

		return e.complexity.Checkout.TotalDuties(childComplexity), true

	case "Checkout.totalPrice":
		if e.complexity.Checkout.TotalPrice == nil {
			break
		}

		return e.complexity.Checkout.TotalPrice(childComplexity), true

	case "Checkout.totalPriceV2":
		if e.complexity.Checkout.TotalPriceV2 == nil {
			break
		}

		return e.complexity.Checkout.TotalPriceV2(childComplexity), true

	case "Checkout.totalTax":
		if e.complexity.Checkout.TotalTax == nil {
			break
		}

		return e.complexity.Checkout.TotalTax(childComplexity), true

	case "Checkout.totalTaxV2":
		if e.complexity.Checkout.TotalTaxV2 == nil {
			break
		}

		return e.complexity.Checkout.TotalTaxV2(childComplexity), true

	case "Checkout.updatedAt":
		if e.complexity.Checkout.UpdatedAt == nil {
			break
		}

		return e.complexity.Checkout.UpdatedAt(childComplexity), true

	case "Checkout.webUrl":
		if e.complexity.Checkout.WebURL == nil {
			break
		}

		return e.complexity.Checkout.WebURL(childComplexity), true

	case "CheckoutAttributesUpdateV2Payload.checkout":
		if e.complexity.CheckoutAttributesUpdateV2Payload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutAttributesUpdateV2Payload.Checkout(childComplexity), true

	case "CheckoutAttributesUpdateV2Payload.checkoutUserErrors":
		if e.complexity.CheckoutAttributesUpdateV2Payload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutAttributesUpdateV2Payload.CheckoutUserErrors(childComplexity), true

	case "CheckoutAttributesUpdateV2Payload.userErrors":
		if e.complexity.CheckoutAttributesUpdateV2Payload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutAttributesUpdateV2Payload.UserErrors(childComplexity), true

	case "CheckoutBuyerIdentity.countryCode":
		if e.complexity.CheckoutBuyerIdentity.CountryCode == nil {
			break
		}

		return e.complexity.CheckoutBuyerIdentity.CountryCode(childComplexity), true

	case "CheckoutCompleteFreePayload.checkout":
		if e.complexity.CheckoutCompleteFreePayload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutCompleteFreePayload.Checkout(childComplexity), true

	case "CheckoutCompleteFreePayload.checkoutUserErrors":
		if e.complexity.CheckoutCompleteFreePayload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutCompleteFreePayload.CheckoutUserErrors(childComplexity), true

	case "CheckoutCompleteFreePayload.userErrors":
		if e.complexity.CheckoutCompleteFreePayload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutCompleteFreePayload.UserErrors(childComplexity), true

	case "CheckoutCompleteWithCreditCardV2Payload.checkout":
		if e.complexity.CheckoutCompleteWithCreditCardV2Payload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutCompleteWithCreditCardV2Payload.Checkout(childComplexity), true

	case "CheckoutCompleteWithCreditCardV2Payload.checkoutUserErrors":
		if e.complexity.CheckoutCompleteWithCreditCardV2Payload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutCompleteWithCreditCardV2Payload.CheckoutUserErrors(childComplexity), true

	case "CheckoutCompleteWithCreditCardV2Payload.payment":
		if e.complexity.CheckoutCompleteWithCreditCardV2Payload.Payment == nil {
			break
		}

		return e.complexity.CheckoutCompleteWithCreditCardV2Payload.Payment(childComplexity), true

	case "CheckoutCompleteWithCreditCardV2Payload.userErrors":
		if e.complexity.CheckoutCompleteWithCreditCardV2Payload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutCompleteWithCreditCardV2Payload.UserErrors(childComplexity), true

	case "CheckoutCompleteWithTokenizedPaymentV3Payload.checkout":
		if e.complexity.CheckoutCompleteWithTokenizedPaymentV3Payload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutCompleteWithTokenizedPaymentV3Payload.Checkout(childComplexity), true

	case "CheckoutCompleteWithTokenizedPaymentV3Payload.checkoutUserErrors":
		if e.complexity.CheckoutCompleteWithTokenizedPaymentV3Payload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutCompleteWithTokenizedPaymentV3Payload.CheckoutUserErrors(childComplexity), true

	case "CheckoutCompleteWithTokenizedPaymentV3Payload.payment":
		if e.complexity.CheckoutCompleteWithTokenizedPaymentV3Payload.Payment == nil {
			break
		}

		return e.complexity.CheckoutCompleteWithTokenizedPaymentV3Payload.Payment(childComplexity), true

	case "CheckoutCompleteWithTokenizedPaymentV3Payload.userErrors":
		if e.complexity.CheckoutCompleteWithTokenizedPaymentV3Payload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutCompleteWithTokenizedPaymentV3Payload.UserErrors(childComplexity), true

	case "CheckoutCreatePayload.checkout":
		if e.complexity.CheckoutCreatePayload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutCreatePayload.Checkout(childComplexity), true

	case "CheckoutCreatePayload.checkoutUserErrors":
		if e.complexity.CheckoutCreatePayload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutCreatePayload.CheckoutUserErrors(childComplexity), true

	case "CheckoutCreatePayload.queueToken":
		if e.complexity.CheckoutCreatePayload.QueueToken == nil {
			break
		}

		return e.complexity.CheckoutCreatePayload.QueueToken(childComplexity), true

	case "CheckoutCreatePayload.userErrors":
		if e.complexity.CheckoutCreatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutCreatePayload.UserErrors(childComplexity), true

	case "CheckoutCustomerAssociateV2Payload.checkout":
		if e.complexity.CheckoutCustomerAssociateV2Payload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutCustomerAssociateV2Payload.Checkout(childComplexity), true

	case "CheckoutCustomerAssociateV2Payload.checkoutUserErrors":
		if e.complexity.CheckoutCustomerAssociateV2Payload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutCustomerAssociateV2Payload.CheckoutUserErrors(childComplexity), true

	case "CheckoutCustomerAssociateV2Payload.customer":
		if e.complexity.CheckoutCustomerAssociateV2Payload.Customer == nil {
			break
		}

		return e.complexity.CheckoutCustomerAssociateV2Payload.Customer(childComplexity), true

	case "CheckoutCustomerAssociateV2Payload.userErrors":
		if e.complexity.CheckoutCustomerAssociateV2Payload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutCustomerAssociateV2Payload.UserErrors(childComplexity), true

	case "CheckoutCustomerDisassociateV2Payload.checkout":
		if e.complexity.CheckoutCustomerDisassociateV2Payload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutCustomerDisassociateV2Payload.Checkout(childComplexity), true

	case "CheckoutCustomerDisassociateV2Payload.checkoutUserErrors":
		if e.complexity.CheckoutCustomerDisassociateV2Payload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutCustomerDisassociateV2Payload.CheckoutUserErrors(childComplexity), true

	case "CheckoutCustomerDisassociateV2Payload.userErrors":
		if e.complexity.CheckoutCustomerDisassociateV2Payload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutCustomerDisassociateV2Payload.UserErrors(childComplexity), true

	case "CheckoutDiscountCodeApplyV2Payload.checkout":
		if e.complexity.CheckoutDiscountCodeApplyV2Payload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutDiscountCodeApplyV2Payload.Checkout(childComplexity), true

	case "CheckoutDiscountCodeApplyV2Payload.checkoutUserErrors":
		if e.complexity.CheckoutDiscountCodeApplyV2Payload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutDiscountCodeApplyV2Payload.CheckoutUserErrors(childComplexity), true

	case "CheckoutDiscountCodeApplyV2Payload.userErrors":
		if e.complexity.CheckoutDiscountCodeApplyV2Payload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutDiscountCodeApplyV2Payload.UserErrors(childComplexity), true

	case "CheckoutDiscountCodeRemovePayload.checkout":
		if e.complexity.CheckoutDiscountCodeRemovePayload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutDiscountCodeRemovePayload.Checkout(childComplexity), true

	case "CheckoutDiscountCodeRemovePayload.checkoutUserErrors":
		if e.complexity.CheckoutDiscountCodeRemovePayload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutDiscountCodeRemovePayload.CheckoutUserErrors(childComplexity), true

	case "CheckoutDiscountCodeRemovePayload.userErrors":
		if e.complexity.CheckoutDiscountCodeRemovePayload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutDiscountCodeRemovePayload.UserErrors(childComplexity), true

	case "CheckoutEmailUpdateV2Payload.checkout":
		if e.complexity.CheckoutEmailUpdateV2Payload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutEmailUpdateV2Payload.Checkout(childComplexity), true

	case "CheckoutEmailUpdateV2Payload.checkoutUserErrors":
		if e.complexity.CheckoutEmailUpdateV2Payload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutEmailUpdateV2Payload.CheckoutUserErrors(childComplexity), true

	case "CheckoutEmailUpdateV2Payload.userErrors":
		if e.complexity.CheckoutEmailUpdateV2Payload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutEmailUpdateV2Payload.UserErrors(childComplexity), true

	case "CheckoutGiftCardRemoveV2Payload.checkout":
		if e.complexity.CheckoutGiftCardRemoveV2Payload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutGiftCardRemoveV2Payload.Checkout(childComplexity), true

	case "CheckoutGiftCardRemoveV2Payload.checkoutUserErrors":
		if e.complexity.CheckoutGiftCardRemoveV2Payload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutGiftCardRemoveV2Payload.CheckoutUserErrors(childComplexity), true

	case "CheckoutGiftCardRemoveV2Payload.userErrors":
		if e.complexity.CheckoutGiftCardRemoveV2Payload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutGiftCardRemoveV2Payload.UserErrors(childComplexity), true

	case "CheckoutGiftCardsAppendPayload.checkout":
		if e.complexity.CheckoutGiftCardsAppendPayload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutGiftCardsAppendPayload.Checkout(childComplexity), true

	case "CheckoutGiftCardsAppendPayload.checkoutUserErrors":
		if e.complexity.CheckoutGiftCardsAppendPayload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutGiftCardsAppendPayload.CheckoutUserErrors(childComplexity), true

	case "CheckoutGiftCardsAppendPayload.userErrors":
		if e.complexity.CheckoutGiftCardsAppendPayload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutGiftCardsAppendPayload.UserErrors(childComplexity), true

	case "CheckoutLineItem.customAttributes":
		if e.complexity.CheckoutLineItem.CustomAttributes == nil {
			break
		}

		return e.complexity.CheckoutLineItem.CustomAttributes(childComplexity), true

	case "CheckoutLineItem.discountAllocations":
		if e.complexity.CheckoutLineItem.DiscountAllocations == nil {
			break
		}

		return e.complexity.CheckoutLineItem.DiscountAllocations(childComplexity), true

	case "CheckoutLineItem.id":
		if e.complexity.CheckoutLineItem.ID == nil {
			break
		}

		return e.complexity.CheckoutLineItem.ID(childComplexity), true

	case "CheckoutLineItem.quantity":
		if e.complexity.CheckoutLineItem.Quantity == nil {
			break
		}

		return e.complexity.CheckoutLineItem.Quantity(childComplexity), true

	case "CheckoutLineItem.title":
		if e.complexity.CheckoutLineItem.Title == nil {
			break
		}

		return e.complexity.CheckoutLineItem.Title(childComplexity), true

	case "CheckoutLineItem.unitPrice":
		if e.complexity.CheckoutLineItem.UnitPrice == nil {
			break
		}

		return e.complexity.CheckoutLineItem.UnitPrice(childComplexity), true

	case "CheckoutLineItem.variant":
		if e.complexity.CheckoutLineItem.Variant == nil {
			break
		}

		return e.complexity.CheckoutLineItem.Variant(childComplexity), true

	case "CheckoutLineItemConnection.edges":
		if e.complexity.CheckoutLineItemConnection.Edges == nil {
			break
		}

		return e.complexity.CheckoutLineItemConnection.Edges(childComplexity), true

	case "CheckoutLineItemConnection.nodes":
		if e.complexity.CheckoutLineItemConnection.Nodes == nil {
			break
		}

		return e.complexity.CheckoutLineItemConnection.Nodes(childComplexity), true

	case "CheckoutLineItemConnection.pageInfo":
		if e.complexity.CheckoutLineItemConnection.PageInfo == nil {
			break
		}

		return e.complexity.CheckoutLineItemConnection.PageInfo(childComplexity), true

	case "CheckoutLineItemEdge.cursor":
		if e.complexity.CheckoutLineItemEdge.Cursor == nil {
			break
		}

		return e.complexity.CheckoutLineItemEdge.Cursor(childComplexity), true

	case "CheckoutLineItemEdge.node":
		if e.complexity.CheckoutLineItemEdge.Node == nil {
			break
		}

		return e.complexity.CheckoutLineItemEdge.Node(childComplexity), true

	case "CheckoutLineItemsAddPayload.checkout":
		if e.complexity.CheckoutLineItemsAddPayload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutLineItemsAddPayload.Checkout(childComplexity), true

	case "CheckoutLineItemsAddPayload.checkoutUserErrors":
		if e.complexity.CheckoutLineItemsAddPayload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutLineItemsAddPayload.CheckoutUserErrors(childComplexity), true

	case "CheckoutLineItemsAddPayload.userErrors":
		if e.complexity.CheckoutLineItemsAddPayload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutLineItemsAddPayload.UserErrors(childComplexity), true

	case "CheckoutLineItemsRemovePayload.checkout":
		if e.complexity.CheckoutLineItemsRemovePayload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutLineItemsRemovePayload.Checkout(childComplexity), true

	case "CheckoutLineItemsRemovePayload.checkoutUserErrors":
		if e.complexity.CheckoutLineItemsRemovePayload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutLineItemsRemovePayload.CheckoutUserErrors(childComplexity), true

	case "CheckoutLineItemsRemovePayload.userErrors":
		if e.complexity.CheckoutLineItemsRemovePayload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutLineItemsRemovePayload.UserErrors(childComplexity), true

	case "CheckoutLineItemsReplacePayload.checkout":
		if e.complexity.CheckoutLineItemsReplacePayload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutLineItemsReplacePayload.Checkout(childComplexity), true

	case "CheckoutLineItemsReplacePayload.userErrors":
		if e.complexity.CheckoutLineItemsReplacePayload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutLineItemsReplacePayload.UserErrors(childComplexity), true

	case "CheckoutLineItemsUpdatePayload.checkout":
		if e.complexity.CheckoutLineItemsUpdatePayload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutLineItemsUpdatePayload.Checkout(childComplexity), true

	case "CheckoutLineItemsUpdatePayload.checkoutUserErrors":
		if e.complexity.CheckoutLineItemsUpdatePayload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutLineItemsUpdatePayload.CheckoutUserErrors(childComplexity), true

	case "CheckoutLineItemsUpdatePayload.userErrors":
		if e.complexity.CheckoutLineItemsUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutLineItemsUpdatePayload.UserErrors(childComplexity), true

	case "CheckoutShippingAddressUpdateV2Payload.checkout":
		if e.complexity.CheckoutShippingAddressUpdateV2Payload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutShippingAddressUpdateV2Payload.Checkout(childComplexity), true

	case "CheckoutShippingAddressUpdateV2Payload.checkoutUserErrors":
		if e.complexity.CheckoutShippingAddressUpdateV2Payload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutShippingAddressUpdateV2Payload.CheckoutUserErrors(childComplexity), true

	case "CheckoutShippingAddressUpdateV2Payload.userErrors":
		if e.complexity.CheckoutShippingAddressUpdateV2Payload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutShippingAddressUpdateV2Payload.UserErrors(childComplexity), true

	case "CheckoutShippingLineUpdatePayload.checkout":
		if e.complexity.CheckoutShippingLineUpdatePayload.Checkout == nil {
			break
		}

		return e.complexity.CheckoutShippingLineUpdatePayload.Checkout(childComplexity), true

	case "CheckoutShippingLineUpdatePayload.checkoutUserErrors":
		if e.complexity.CheckoutShippingLineUpdatePayload.CheckoutUserErrors == nil {
			break
		}

		return e.complexity.CheckoutShippingLineUpdatePayload.CheckoutUserErrors(childComplexity), true

	case "CheckoutShippingLineUpdatePayload.userErrors":
		if e.complexity.CheckoutShippingLineUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CheckoutShippingLineUpdatePayload.UserErrors(childComplexity), true

	case "CheckoutUserError.code":
		if e.complexity.CheckoutUserError.Code == nil {
			break
		}

		return e.complexity.CheckoutUserError.Code(childComplexity), true

	case "CheckoutUserError.field":
		if e.complexity.CheckoutUserError.Field == nil {
			break
		}

		return e.complexity.CheckoutUserError.Field(childComplexity), true

	case "CheckoutUserError.message":
		if e.complexity.CheckoutUserError.Message == nil {
			break
		}

		return e.complexity.CheckoutUserError.Message(childComplexity), true

	case "Collection.description":
		if e.complexity.Collection.Description == nil {
			break
		}

		args, err := ec.field_Collection_description_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Collection.Description(childComplexity, args["truncateAt"].(*int32)), true

	case "Collection.descriptionHtml":
		if e.complexity.Collection.DescriptionHTML == nil {
			break
		}

		return e.complexity.Collection.DescriptionHTML(childComplexity), true

	case "Collection.handle":
		if e.complexity.Collection.Handle == nil {
			break
		}

		return e.complexity.Collection.Handle(childComplexity), true

	case "Collection.id":
		if e.complexity.Collection.ID == nil {
			break
		}

		return e.complexity.Collection.ID(childComplexity), true

	case "Collection.image":
		if e.complexity.Collection.Image == nil {
			break
		}

		return e.complexity.Collection.Image(childComplexity), true

	case "Collection.metafield":
		if e.complexity.Collection.Metafield == nil {
			break
		}

		args, err := ec.field_Collection_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Collection.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Collection.metafields":
		if e.complexity.Collection.Metafields == nil {
			break
		}

		args, err := ec.field_Collection_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Collection.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Collection.onlineStoreUrl":
		if e.complexity.Collection.OnlineStoreURL == nil {
			break
		}

		return e.complexity.Collection.OnlineStoreURL(childComplexity), true

	case "Collection.products":
		if e.complexity.Collection.Products == nil {
			break
		}

		args, err := ec.field_Collection_products_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Collection.Products(childComplexity, args["after"].(*string), args["before"].(*string), args["filters"].([]*model.ProductFilter), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool), args["sortKey"].(*model.ProductCollectionSortKeys)), true

	case "Collection.seo":
		if e.complexity.Collection.Seo == nil {
			break
		}

		return e.complexity.Collection.Seo(childComplexity), true

	case "Collection.title":
		if e.complexity.Collection.Title == nil {
			break
		}

		return e.complexity.Collection.Title(childComplexity), true

	case "Collection.trackingParameters":
		if e.complexity.Collection.TrackingParameters == nil {
			break
		}

		return e.complexity.Collection.TrackingParameters(childComplexity), true

	case "Collection.updatedAt":
		if e.complexity.Collection.UpdatedAt == nil {
			break
		}

		return e.complexity.Collection.UpdatedAt(childComplexity), true

	case "CollectionConnection.edges":
		if e.complexity.CollectionConnection.Edges == nil {
			break
		}

		return e.complexity.CollectionConnection.Edges(childComplexity), true

	case "CollectionConnection.nodes":
		if e.complexity.CollectionConnection.Nodes == nil {
			break
		}

		return e.complexity.CollectionConnection.Nodes(childComplexity), true

	case "CollectionConnection.pageInfo":
		if e.complexity.CollectionConnection.PageInfo == nil {
			break
		}

		return e.complexity.CollectionConnection.PageInfo(childComplexity), true

	case "CollectionConnection.totalCount":
		if e.complexity.CollectionConnection.TotalCount == nil {
			break
		}

		return e.complexity.CollectionConnection.TotalCount(childComplexity), true

	case "CollectionEdge.cursor":
		if e.complexity.CollectionEdge.Cursor == nil {
			break
		}

		return e.complexity.CollectionEdge.Cursor(childComplexity), true

	case "CollectionEdge.node":
		if e.complexity.CollectionEdge.Node == nil {
			break
		}

		return e.complexity.CollectionEdge.Node(childComplexity), true

	case "Comment.author":
		if e.complexity.Comment.Author == nil {
			break
		}

		return e.complexity.Comment.Author(childComplexity), true

	case "Comment.content":
		if e.complexity.Comment.Content == nil {
			break
		}

		args, err := ec.field_Comment_content_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Comment.Content(childComplexity, args["truncateAt"].(*int32)), true

	case "Comment.contentHtml":
		if e.complexity.Comment.ContentHTML == nil {
			break
		}

		return e.complexity.Comment.ContentHTML(childComplexity), true

	case "Comment.id":
		if e.complexity.Comment.ID == nil {
			break
		}

		return e.complexity.Comment.ID(childComplexity), true

	case "CommentAuthor.email":
		if e.complexity.CommentAuthor.Email == nil {
			break
		}

		return e.complexity.CommentAuthor.Email(childComplexity), true

	case "CommentAuthor.name":
		if e.complexity.CommentAuthor.Name == nil {
			break
		}

		return e.complexity.CommentAuthor.Name(childComplexity), true

	case "CommentConnection.edges":
		if e.complexity.CommentConnection.Edges == nil {
			break
		}

		return e.complexity.CommentConnection.Edges(childComplexity), true

	case "CommentConnection.nodes":
		if e.complexity.CommentConnection.Nodes == nil {
			break
		}

		return e.complexity.CommentConnection.Nodes(childComplexity), true

	case "CommentConnection.pageInfo":
		if e.complexity.CommentConnection.PageInfo == nil {
			break
		}

		return e.complexity.CommentConnection.PageInfo(childComplexity), true

	case "CommentEdge.cursor":
		if e.complexity.CommentEdge.Cursor == nil {
			break
		}

		return e.complexity.CommentEdge.Cursor(childComplexity), true

	case "CommentEdge.node":
		if e.complexity.CommentEdge.Node == nil {
			break
		}

		return e.complexity.CommentEdge.Node(childComplexity), true

	case "Company.createdAt":
		if e.complexity.Company.CreatedAt == nil {
			break
		}

		return e.complexity.Company.CreatedAt(childComplexity), true

	case "Company.externalId":
		if e.complexity.Company.ExternalID == nil {
			break
		}

		return e.complexity.Company.ExternalID(childComplexity), true

	case "Company.id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true

	case "Company.metafield":
		if e.complexity.Company.Metafield == nil {
			break
		}

		args, err := ec.field_Company_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Company.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Company.metafields":
		if e.complexity.Company.Metafields == nil {
			break
		}

		args, err := ec.field_Company_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Company.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Company.name":
		if e.complexity.Company.Name == nil {
			break
		}

		return e.complexity.Company.Name(childComplexity), true

	case "Company.updatedAt":
		if e.complexity.Company.UpdatedAt == nil {
			break
		}

		return e.complexity.Company.UpdatedAt(childComplexity), true

	case "CompanyContact.createdAt":
		if e.complexity.CompanyContact.CreatedAt == nil {
			break
		}

		return e.complexity.CompanyContact.CreatedAt(childComplexity), true

	case "CompanyContact.id":
		if e.complexity.CompanyContact.ID == nil {
			break
		}

		return e.complexity.CompanyContact.ID(childComplexity), true

	case "CompanyContact.locale":
		if e.complexity.CompanyContact.Locale == nil {
			break
		}

		return e.complexity.CompanyContact.Locale(childComplexity), true

	case "CompanyContact.title":
		if e.complexity.CompanyContact.Title == nil {
			break
		}

		return e.complexity.CompanyContact.Title(childComplexity), true

	case "CompanyContact.updatedAt":
		if e.complexity.CompanyContact.UpdatedAt == nil {
			break
		}

		return e.complexity.CompanyContact.UpdatedAt(childComplexity), true

	case "CompanyLocation.createdAt":
		if e.complexity.CompanyLocation.CreatedAt == nil {
			break
		}

		return e.complexity.CompanyLocation.CreatedAt(childComplexity), true

	case "CompanyLocation.externalId":
		if e.complexity.CompanyLocation.ExternalID == nil {
			break
		}

		return e.complexity.CompanyLocation.ExternalID(childComplexity), true

	case "CompanyLocation.id":
		if e.complexity.CompanyLocation.ID == nil {
			break
		}

		return e.complexity.CompanyLocation.ID(childComplexity), true

	case "CompanyLocation.locale":
		if e.complexity.CompanyLocation.Locale == nil {
			break
		}

		return e.complexity.CompanyLocation.Locale(childComplexity), true

	case "CompanyLocation.metafield":
		if e.complexity.CompanyLocation.Metafield == nil {
			break
		}

		args, err := ec.field_CompanyLocation_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CompanyLocation.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "CompanyLocation.metafields":
		if e.complexity.CompanyLocation.Metafields == nil {
			break
		}

		args, err := ec.field_CompanyLocation_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CompanyLocation.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "CompanyLocation.name":
		if e.complexity.CompanyLocation.Name == nil {
			break
		}

		return e.complexity.CompanyLocation.Name(childComplexity), true

	case "CompanyLocation.updatedAt":
		if e.complexity.CompanyLocation.UpdatedAt == nil {
			break
		}

		return e.complexity.CompanyLocation.UpdatedAt(childComplexity), true

	case "CompletePaymentChallenge.redirectUrl":
		if e.complexity.CompletePaymentChallenge.RedirectURL == nil {
			break
		}

		return e.complexity.CompletePaymentChallenge.RedirectURL(childComplexity), true

	case "CompletionError.code":
		if e.complexity.CompletionError.Code == nil {
			break
		}

		return e.complexity.CompletionError.Code(childComplexity), true

	case "CompletionError.message":
		if e.complexity.CompletionError.Message == nil {
			break
		}

		return e.complexity.CompletionError.Message(childComplexity), true

	case "ComponentizableCartLine.attribute":
		if e.complexity.ComponentizableCartLine.Attribute == nil {
			break
		}

		args, err := ec.field_ComponentizableCartLine_attribute_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ComponentizableCartLine.Attribute(childComplexity, args["key"].(string)), true

	case "ComponentizableCartLine.attributes":
		if e.complexity.ComponentizableCartLine.Attributes == nil {
			break
		}

		return e.complexity.ComponentizableCartLine.Attributes(childComplexity), true

	case "ComponentizableCartLine.cost":
		if e.complexity.ComponentizableCartLine.Cost == nil {
			break
		}

		return e.complexity.ComponentizableCartLine.Cost(childComplexity), true

	case "ComponentizableCartLine.discountAllocations":
		if e.complexity.ComponentizableCartLine.DiscountAllocations == nil {
			break
		}

		return e.complexity.ComponentizableCartLine.DiscountAllocations(childComplexity), true

	case "ComponentizableCartLine.estimatedCost":
		if e.complexity.ComponentizableCartLine.EstimatedCost == nil {
			break
		}

		return e.complexity.ComponentizableCartLine.EstimatedCost(childComplexity), true

	case "ComponentizableCartLine.id":
		if e.complexity.ComponentizableCartLine.ID == nil {
			break
		}

		return e.complexity.ComponentizableCartLine.ID(childComplexity), true

	case "ComponentizableCartLine.lineComponents":
		if e.complexity.ComponentizableCartLine.LineComponents == nil {
			break
		}

		return e.complexity.ComponentizableCartLine.LineComponents(childComplexity), true

	case "ComponentizableCartLine.merchandise":
		if e.complexity.ComponentizableCartLine.Merchandise == nil {
			break
		}

		return e.complexity.ComponentizableCartLine.Merchandise(childComplexity), true

	case "ComponentizableCartLine.quantity":
		if e.complexity.ComponentizableCartLine.Quantity == nil {
			break
		}

		return e.complexity.ComponentizableCartLine.Quantity(childComplexity), true

	case "ComponentizableCartLine.sellingPlanAllocation":
		if e.complexity.ComponentizableCartLine.SellingPlanAllocation == nil {
			break
		}

		return e.complexity.ComponentizableCartLine.SellingPlanAllocation(childComplexity), true

	case "Count.count":
		if e.complexity.Count.Count == nil {
			break
		}

		return e.complexity.Count.Count(childComplexity), true

	case "Count.precision":
		if e.complexity.Count.Precision == nil {
			break
		}

		return e.complexity.Count.Precision(childComplexity), true

	case "Country.availableLanguages":
		if e.complexity.Country.AvailableLanguages == nil {
			break
		}

		return e.complexity.Country.AvailableLanguages(childComplexity), true

	case "Country.currency":
		if e.complexity.Country.Currency == nil {
			break
		}

		return e.complexity.Country.Currency(childComplexity), true

	case "Country.defaultLanguage":
		if e.complexity.Country.DefaultLanguage == nil {
			break
		}

		return e.complexity.Country.DefaultLanguage(childComplexity), true

	case "Country.isoCode":
		if e.complexity.Country.IsoCode == nil {
			break
		}

		return e.complexity.Country.IsoCode(childComplexity), true

	case "Country.market":
		if e.complexity.Country.Market == nil {
			break
		}

		return e.complexity.Country.Market(childComplexity), true

	case "Country.name":
		if e.complexity.Country.Name == nil {
			break
		}

		return e.complexity.Country.Name(childComplexity), true

	case "Country.unitSystem":
		if e.complexity.Country.UnitSystem == nil {
			break
		}

		return e.complexity.Country.UnitSystem(childComplexity), true

	case "CreditCard.brand":
		if e.complexity.CreditCard.Brand == nil {
			break
		}

		return e.complexity.CreditCard.Brand(childComplexity), true

	case "CreditCard.expiryMonth":
		if e.complexity.CreditCard.ExpiryMonth == nil {
			break
		}

		return e.complexity.CreditCard.ExpiryMonth(childComplexity), true

	case "CreditCard.expiryYear":
		if e.complexity.CreditCard.ExpiryYear == nil {
			break
		}

		return e.complexity.CreditCard.ExpiryYear(childComplexity), true

	case "CreditCard.firstDigits":
		if e.complexity.CreditCard.FirstDigits == nil {
			break
		}

		return e.complexity.CreditCard.FirstDigits(childComplexity), true

	case "CreditCard.firstName":
		if e.complexity.CreditCard.FirstName == nil {
			break
		}

		return e.complexity.CreditCard.FirstName(childComplexity), true

	case "CreditCard.lastDigits":
		if e.complexity.CreditCard.LastDigits == nil {
			break
		}

		return e.complexity.CreditCard.LastDigits(childComplexity), true

	case "CreditCard.lastName":
		if e.complexity.CreditCard.LastName == nil {
			break
		}

		return e.complexity.CreditCard.LastName(childComplexity), true

	case "CreditCard.maskedNumber":
		if e.complexity.CreditCard.MaskedNumber == nil {
			break
		}

		return e.complexity.CreditCard.MaskedNumber(childComplexity), true

	case "Currency.isoCode":
		if e.complexity.Currency.IsoCode == nil {
			break
		}

		return e.complexity.Currency.IsoCode(childComplexity), true

	case "Currency.name":
		if e.complexity.Currency.Name == nil {
			break
		}

		return e.complexity.Currency.Name(childComplexity), true

	case "Currency.symbol":
		if e.complexity.Currency.Symbol == nil {
			break
		}

		return e.complexity.Currency.Symbol(childComplexity), true

	case "Customer.acceptsMarketing":
		if e.complexity.Customer.AcceptsMarketing == nil {
			break
		}

		return e.complexity.Customer.AcceptsMarketing(childComplexity), true

	case "Customer.addresses":
		if e.complexity.Customer.Addresses == nil {
			break
		}

		args, err := ec.field_Customer_addresses_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Customer.Addresses(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "Customer.createdAt":
		if e.complexity.Customer.CreatedAt == nil {
			break
		}

		return e.complexity.Customer.CreatedAt(childComplexity), true

	case "Customer.defaultAddress":
		if e.complexity.Customer.DefaultAddress == nil {
			break
		}

		return e.complexity.Customer.DefaultAddress(childComplexity), true

	case "Customer.displayName":
		if e.complexity.Customer.DisplayName == nil {
			break
		}

		return e.complexity.Customer.DisplayName(childComplexity), true

	case "Customer.email":
		if e.complexity.Customer.Email == nil {
			break
		}

		return e.complexity.Customer.Email(childComplexity), true

	case "Customer.firstName":
		if e.complexity.Customer.FirstName == nil {
			break
		}

		return e.complexity.Customer.FirstName(childComplexity), true

	case "Customer.id":
		if e.complexity.Customer.ID == nil {
			break
		}

		return e.complexity.Customer.ID(childComplexity), true

	case "Customer.lastIncompleteCheckout":
		if e.complexity.Customer.LastIncompleteCheckout == nil {
			break
		}

		return e.complexity.Customer.LastIncompleteCheckout(childComplexity), true

	case "Customer.lastName":
		if e.complexity.Customer.LastName == nil {
			break
		}

		return e.complexity.Customer.LastName(childComplexity), true

	case "Customer.metafield":
		if e.complexity.Customer.Metafield == nil {
			break
		}

		args, err := ec.field_Customer_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Customer.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Customer.metafields":
		if e.complexity.Customer.Metafields == nil {
			break
		}

		args, err := ec.field_Customer_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Customer.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Customer.numberOfOrders":
		if e.complexity.Customer.NumberOfOrders == nil {
			break
		}

		return e.complexity.Customer.NumberOfOrders(childComplexity), true

	case "Customer.orders":
		if e.complexity.Customer.Orders == nil {
			break
		}

		args, err := ec.field_Customer_orders_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Customer.Orders(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["query"].(*string), args["reverse"].(*bool), args["sortKey"].(*model.OrderSortKeys)), true

	case "Customer.phone":
		if e.complexity.Customer.Phone == nil {
			break
		}

		return e.complexity.Customer.Phone(childComplexity), true

	case "Customer.tags":
		if e.complexity.Customer.Tags == nil {
			break
		}

		return e.complexity.Customer.Tags(childComplexity), true

	case "Customer.updatedAt":
		if e.complexity.Customer.UpdatedAt == nil {
			break
		}

		return e.complexity.Customer.UpdatedAt(childComplexity), true

	case "CustomerAccessToken.accessToken":
		if e.complexity.CustomerAccessToken.AccessToken == nil {
			break
		}

		return e.complexity.CustomerAccessToken.AccessToken(childComplexity), true

	case "CustomerAccessToken.expiresAt":
		if e.complexity.CustomerAccessToken.ExpiresAt == nil {
			break
		}

		return e.complexity.CustomerAccessToken.ExpiresAt(childComplexity), true

	case "CustomerAccessTokenCreatePayload.customerAccessToken":
		if e.complexity.CustomerAccessTokenCreatePayload.CustomerAccessToken == nil {
			break
		}

		return e.complexity.CustomerAccessTokenCreatePayload.CustomerAccessToken(childComplexity), true

	case "CustomerAccessTokenCreatePayload.customerUserErrors":
		if e.complexity.CustomerAccessTokenCreatePayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerAccessTokenCreatePayload.CustomerUserErrors(childComplexity), true

	case "CustomerAccessTokenCreatePayload.userErrors":
		if e.complexity.CustomerAccessTokenCreatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerAccessTokenCreatePayload.UserErrors(childComplexity), true

	case "CustomerAccessTokenCreateWithMultipassPayload.customerAccessToken":
		if e.complexity.CustomerAccessTokenCreateWithMultipassPayload.CustomerAccessToken == nil {
			break
		}

		return e.complexity.CustomerAccessTokenCreateWithMultipassPayload.CustomerAccessToken(childComplexity), true

	case "CustomerAccessTokenCreateWithMultipassPayload.customerUserErrors":
		if e.complexity.CustomerAccessTokenCreateWithMultipassPayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerAccessTokenCreateWithMultipassPayload.CustomerUserErrors(childComplexity), true

	case "CustomerAccessTokenCreateWithMultipassPayload.userErrors":
		if e.complexity.CustomerAccessTokenCreateWithMultipassPayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerAccessTokenCreateWithMultipassPayload.UserErrors(childComplexity), true

	case "CustomerAccessTokenDeletePayload.deletedAccessToken":
		if e.complexity.CustomerAccessTokenDeletePayload.DeletedAccessToken == nil {
			break
		}

		return e.complexity.CustomerAccessTokenDeletePayload.DeletedAccessToken(childComplexity), true

	case "CustomerAccessTokenDeletePayload.deletedCustomerAccessTokenId":
		if e.complexity.CustomerAccessTokenDeletePayload.DeletedCustomerAccessTokenID == nil {
			break
		}

		return e.complexity.CustomerAccessTokenDeletePayload.DeletedCustomerAccessTokenID(childComplexity), true

	case "CustomerAccessTokenDeletePayload.userErrors":
		if e.complexity.CustomerAccessTokenDeletePayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerAccessTokenDeletePayload.UserErrors(childComplexity), true

	case "CustomerAccessTokenRenewPayload.customerAccessToken":
		if e.complexity.CustomerAccessTokenRenewPayload.CustomerAccessToken == nil {
			break
		}

		return e.complexity.CustomerAccessTokenRenewPayload.CustomerAccessToken(childComplexity), true

	case "CustomerAccessTokenRenewPayload.userErrors":
		if e.complexity.CustomerAccessTokenRenewPayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerAccessTokenRenewPayload.UserErrors(childComplexity), true

	case "CustomerActivateByUrlPayload.customer":
		if e.complexity.CustomerActivateByUrlPayload.Customer == nil {
			break
		}

		return e.complexity.CustomerActivateByUrlPayload.Customer(childComplexity), true

	case "CustomerActivateByUrlPayload.customerAccessToken":
		if e.complexity.CustomerActivateByUrlPayload.CustomerAccessToken == nil {
			break
		}

		return e.complexity.CustomerActivateByUrlPayload.CustomerAccessToken(childComplexity), true

	case "CustomerActivateByUrlPayload.customerUserErrors":
		if e.complexity.CustomerActivateByUrlPayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerActivateByUrlPayload.CustomerUserErrors(childComplexity), true

	case "CustomerActivateByUrlPayload.userErrors":
		if e.complexity.CustomerActivateByUrlPayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerActivateByUrlPayload.UserErrors(childComplexity), true

	case "CustomerActivatePayload.customer":
		if e.complexity.CustomerActivatePayload.Customer == nil {
			break
		}

		return e.complexity.CustomerActivatePayload.Customer(childComplexity), true

	case "CustomerActivatePayload.customerAccessToken":
		if e.complexity.CustomerActivatePayload.CustomerAccessToken == nil {
			break
		}

		return e.complexity.CustomerActivatePayload.CustomerAccessToken(childComplexity), true

	case "CustomerActivatePayload.customerUserErrors":
		if e.complexity.CustomerActivatePayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerActivatePayload.CustomerUserErrors(childComplexity), true

	case "CustomerActivatePayload.userErrors":
		if e.complexity.CustomerActivatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerActivatePayload.UserErrors(childComplexity), true

	case "CustomerAddressCreatePayload.customerAddress":
		if e.complexity.CustomerAddressCreatePayload.CustomerAddress == nil {
			break
		}

		return e.complexity.CustomerAddressCreatePayload.CustomerAddress(childComplexity), true

	case "CustomerAddressCreatePayload.customerUserErrors":
		if e.complexity.CustomerAddressCreatePayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerAddressCreatePayload.CustomerUserErrors(childComplexity), true

	case "CustomerAddressCreatePayload.userErrors":
		if e.complexity.CustomerAddressCreatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerAddressCreatePayload.UserErrors(childComplexity), true

	case "CustomerAddressDeletePayload.customerUserErrors":
		if e.complexity.CustomerAddressDeletePayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerAddressDeletePayload.CustomerUserErrors(childComplexity), true

	case "CustomerAddressDeletePayload.deletedCustomerAddressId":
		if e.complexity.CustomerAddressDeletePayload.DeletedCustomerAddressID == nil {
			break
		}

		return e.complexity.CustomerAddressDeletePayload.DeletedCustomerAddressID(childComplexity), true

	case "CustomerAddressDeletePayload.userErrors":
		if e.complexity.CustomerAddressDeletePayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerAddressDeletePayload.UserErrors(childComplexity), true

	case "CustomerAddressUpdatePayload.customerAddress":
		if e.complexity.CustomerAddressUpdatePayload.CustomerAddress == nil {
			break
		}

		return e.complexity.CustomerAddressUpdatePayload.CustomerAddress(childComplexity), true

	case "CustomerAddressUpdatePayload.customerUserErrors":
		if e.complexity.CustomerAddressUpdatePayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerAddressUpdatePayload.CustomerUserErrors(childComplexity), true

	case "CustomerAddressUpdatePayload.userErrors":
		if e.complexity.CustomerAddressUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerAddressUpdatePayload.UserErrors(childComplexity), true

	case "CustomerCreatePayload.customer":
		if e.complexity.CustomerCreatePayload.Customer == nil {
			break
		}

		return e.complexity.CustomerCreatePayload.Customer(childComplexity), true

	case "CustomerCreatePayload.customerUserErrors":
		if e.complexity.CustomerCreatePayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerCreatePayload.CustomerUserErrors(childComplexity), true

	case "CustomerCreatePayload.userErrors":
		if e.complexity.CustomerCreatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerCreatePayload.UserErrors(childComplexity), true

	case "CustomerDefaultAddressUpdatePayload.customer":
		if e.complexity.CustomerDefaultAddressUpdatePayload.Customer == nil {
			break
		}

		return e.complexity.CustomerDefaultAddressUpdatePayload.Customer(childComplexity), true

	case "CustomerDefaultAddressUpdatePayload.customerUserErrors":
		if e.complexity.CustomerDefaultAddressUpdatePayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerDefaultAddressUpdatePayload.CustomerUserErrors(childComplexity), true

	case "CustomerDefaultAddressUpdatePayload.userErrors":
		if e.complexity.CustomerDefaultAddressUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerDefaultAddressUpdatePayload.UserErrors(childComplexity), true

	case "CustomerRecoverPayload.customerUserErrors":
		if e.complexity.CustomerRecoverPayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerRecoverPayload.CustomerUserErrors(childComplexity), true

	case "CustomerRecoverPayload.userErrors":
		if e.complexity.CustomerRecoverPayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerRecoverPayload.UserErrors(childComplexity), true

	case "CustomerResetByUrlPayload.customer":
		if e.complexity.CustomerResetByUrlPayload.Customer == nil {
			break
		}

		return e.complexity.CustomerResetByUrlPayload.Customer(childComplexity), true

	case "CustomerResetByUrlPayload.customerAccessToken":
		if e.complexity.CustomerResetByUrlPayload.CustomerAccessToken == nil {
			break
		}

		return e.complexity.CustomerResetByUrlPayload.CustomerAccessToken(childComplexity), true

	case "CustomerResetByUrlPayload.customerUserErrors":
		if e.complexity.CustomerResetByUrlPayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerResetByUrlPayload.CustomerUserErrors(childComplexity), true

	case "CustomerResetByUrlPayload.userErrors":
		if e.complexity.CustomerResetByUrlPayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerResetByUrlPayload.UserErrors(childComplexity), true

	case "CustomerResetPayload.customer":
		if e.complexity.CustomerResetPayload.Customer == nil {
			break
		}

		return e.complexity.CustomerResetPayload.Customer(childComplexity), true

	case "CustomerResetPayload.customerAccessToken":
		if e.complexity.CustomerResetPayload.CustomerAccessToken == nil {
			break
		}

		return e.complexity.CustomerResetPayload.CustomerAccessToken(childComplexity), true

	case "CustomerResetPayload.customerUserErrors":
		if e.complexity.CustomerResetPayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerResetPayload.CustomerUserErrors(childComplexity), true

	case "CustomerResetPayload.userErrors":
		if e.complexity.CustomerResetPayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerResetPayload.UserErrors(childComplexity), true

	case "CustomerUpdatePayload.customer":
		if e.complexity.CustomerUpdatePayload.Customer == nil {
			break
		}

		return e.complexity.CustomerUpdatePayload.Customer(childComplexity), true

	case "CustomerUpdatePayload.customerAccessToken":
		if e.complexity.CustomerUpdatePayload.CustomerAccessToken == nil {
			break
		}

		return e.complexity.CustomerUpdatePayload.CustomerAccessToken(childComplexity), true

	case "CustomerUpdatePayload.customerUserErrors":
		if e.complexity.CustomerUpdatePayload.CustomerUserErrors == nil {
			break
		}

		return e.complexity.CustomerUpdatePayload.CustomerUserErrors(childComplexity), true

	case "CustomerUpdatePayload.userErrors":
		if e.complexity.CustomerUpdatePayload.UserErrors == nil {
			break
		}

		return e.complexity.CustomerUpdatePayload.UserErrors(childComplexity), true

	case "CustomerUserError.code":
		if e.complexity.CustomerUserError.Code == nil {
			break
		}

		return e.complexity.CustomerUserError.Code(childComplexity), true

	case "CustomerUserError.field":
		if e.complexity.CustomerUserError.Field == nil {
			break
		}

		return e.complexity.CustomerUserError.Field(childComplexity), true

	case "CustomerUserError.message":
		if e.complexity.CustomerUserError.Message == nil {
			break
		}

		return e.complexity.CustomerUserError.Message(childComplexity), true

	case "DiscountAllocation.allocatedAmount":
		if e.complexity.DiscountAllocation.AllocatedAmount == nil {
			break
		}

		return e.complexity.DiscountAllocation.AllocatedAmount(childComplexity), true

	case "DiscountAllocation.discountApplication":
		if e.complexity.DiscountAllocation.DiscountApplication == nil {
			break
		}

		return e.complexity.DiscountAllocation.DiscountApplication(childComplexity), true

	case "DiscountApplicationConnection.edges":
		if e.complexity.DiscountApplicationConnection.Edges == nil {
			break
		}

		return e.complexity.DiscountApplicationConnection.Edges(childComplexity), true

	case "DiscountApplicationConnection.nodes":
		if e.complexity.DiscountApplicationConnection.Nodes == nil {
			break
		}

		return e.complexity.DiscountApplicationConnection.Nodes(childComplexity), true

	case "DiscountApplicationConnection.pageInfo":
		if e.complexity.DiscountApplicationConnection.PageInfo == nil {
			break
		}

		return e.complexity.DiscountApplicationConnection.PageInfo(childComplexity), true

	case "DiscountApplicationEdge.cursor":
		if e.complexity.DiscountApplicationEdge.Cursor == nil {
			break
		}

		return e.complexity.DiscountApplicationEdge.Cursor(childComplexity), true

	case "DiscountApplicationEdge.node":
		if e.complexity.DiscountApplicationEdge.Node == nil {
			break
		}

		return e.complexity.DiscountApplicationEdge.Node(childComplexity), true

	case "DiscountCodeApplication.allocationMethod":
		if e.complexity.DiscountCodeApplication.AllocationMethod == nil {
			break
		}

		return e.complexity.DiscountCodeApplication.AllocationMethod(childComplexity), true

	case "DiscountCodeApplication.applicable":
		if e.complexity.DiscountCodeApplication.Applicable == nil {
			break
		}

		return e.complexity.DiscountCodeApplication.Applicable(childComplexity), true

	case "DiscountCodeApplication.code":
		if e.complexity.DiscountCodeApplication.Code == nil {
			break
		}

		return e.complexity.DiscountCodeApplication.Code(childComplexity), true

	case "DiscountCodeApplication.targetSelection":
		if e.complexity.DiscountCodeApplication.TargetSelection == nil {
			break
		}

		return e.complexity.DiscountCodeApplication.TargetSelection(childComplexity), true

	case "DiscountCodeApplication.targetType":
		if e.complexity.DiscountCodeApplication.TargetType == nil {
			break
		}

		return e.complexity.DiscountCodeApplication.TargetType(childComplexity), true

	case "DiscountCodeApplication.value":
		if e.complexity.DiscountCodeApplication.Value == nil {
			break
		}

		return e.complexity.DiscountCodeApplication.Value(childComplexity), true

	case "Domain.host":
		if e.complexity.Domain.Host == nil {
			break
		}

		return e.complexity.Domain.Host(childComplexity), true

	case "Domain.sslEnabled":
		if e.complexity.Domain.SslEnabled == nil {
			break
		}

		return e.complexity.Domain.SslEnabled(childComplexity), true

	case "Domain.url":
		if e.complexity.Domain.URL == nil {
			break
		}

		return e.complexity.Domain.URL(childComplexity), true

	case "ExternalVideo.alt":
		if e.complexity.ExternalVideo.Alt == nil {
			break
		}

		return e.complexity.ExternalVideo.Alt(childComplexity), true

	case "ExternalVideo.embedUrl":
		if e.complexity.ExternalVideo.EmbedURL == nil {
			break
		}

		return e.complexity.ExternalVideo.EmbedURL(childComplexity), true

	case "ExternalVideo.embeddedUrl":
		if e.complexity.ExternalVideo.EmbeddedURL == nil {
			break
		}

		return e.complexity.ExternalVideo.EmbeddedURL(childComplexity), true

	case "ExternalVideo.host":
		if e.complexity.ExternalVideo.Host == nil {
			break
		}

		return e.complexity.ExternalVideo.Host(childComplexity), true

	case "ExternalVideo.id":
		if e.complexity.ExternalVideo.ID == nil {
			break
		}

		return e.complexity.ExternalVideo.ID(childComplexity), true

	case "ExternalVideo.mediaContentType":
		if e.complexity.ExternalVideo.MediaContentType == nil {
			break
		}

		return e.complexity.ExternalVideo.MediaContentType(childComplexity), true

	case "ExternalVideo.originUrl":
		if e.complexity.ExternalVideo.OriginURL == nil {
			break
		}

		return e.complexity.ExternalVideo.OriginURL(childComplexity), true

	case "ExternalVideo.presentation":
		if e.complexity.ExternalVideo.Presentation == nil {
			break
		}

		return e.complexity.ExternalVideo.Presentation(childComplexity), true

	case "ExternalVideo.previewImage":
		if e.complexity.ExternalVideo.PreviewImage == nil {
			break
		}

		return e.complexity.ExternalVideo.PreviewImage(childComplexity), true

	case "Filter.id":
		if e.complexity.Filter.ID == nil {
			break
		}

		return e.complexity.Filter.ID(childComplexity), true

	case "Filter.label":
		if e.complexity.Filter.Label == nil {
			break
		}

		return e.complexity.Filter.Label(childComplexity), true

	case "Filter.presentation":
		if e.complexity.Filter.Presentation == nil {
			break
		}

		return e.complexity.Filter.Presentation(childComplexity), true

	case "Filter.type":
		if e.complexity.Filter.Type == nil {
			break
		}

		return e.complexity.Filter.Type(childComplexity), true

	case "Filter.values":
		if e.complexity.Filter.Values == nil {
			break
		}

		return e.complexity.Filter.Values(childComplexity), true

	case "FilterValue.count":
		if e.complexity.FilterValue.Count == nil {
			break
		}

		return e.complexity.FilterValue.Count(childComplexity), true

	case "FilterValue.id":
		if e.complexity.FilterValue.ID == nil {
			break
		}

		return e.complexity.FilterValue.ID(childComplexity), true

	case "FilterValue.image":
		if e.complexity.FilterValue.Image == nil {
			break
		}

		return e.complexity.FilterValue.Image(childComplexity), true

	case "FilterValue.input":
		if e.complexity.FilterValue.Input == nil {
			break
		}

		return e.complexity.FilterValue.Input(childComplexity), true

	case "FilterValue.label":
		if e.complexity.FilterValue.Label == nil {
			break
		}

		return e.complexity.FilterValue.Label(childComplexity), true

	case "FilterValue.swatch":
		if e.complexity.FilterValue.Swatch == nil {
			break
		}

		return e.complexity.FilterValue.Swatch(childComplexity), true

	case "Fulfillment.fulfillmentLineItems":
		if e.complexity.Fulfillment.FulfillmentLineItems == nil {
			break
		}

		args, err := ec.field_Fulfillment_fulfillmentLineItems_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Fulfillment.FulfillmentLineItems(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "Fulfillment.trackingCompany":
		if e.complexity.Fulfillment.TrackingCompany == nil {
			break
		}

		return e.complexity.Fulfillment.TrackingCompany(childComplexity), true

	case "Fulfillment.trackingInfo":
		if e.complexity.Fulfillment.TrackingInfo == nil {
			break
		}

		args, err := ec.field_Fulfillment_trackingInfo_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Fulfillment.TrackingInfo(childComplexity, args["first"].(*int32)), true

	case "FulfillmentLineItem.lineItem":
		if e.complexity.FulfillmentLineItem.LineItem == nil {
			break
		}

		return e.complexity.FulfillmentLineItem.LineItem(childComplexity), true

	case "FulfillmentLineItem.quantity":
		if e.complexity.FulfillmentLineItem.Quantity == nil {
			break
		}

		return e.complexity.FulfillmentLineItem.Quantity(childComplexity), true

	case "FulfillmentLineItemConnection.edges":
		if e.complexity.FulfillmentLineItemConnection.Edges == nil {
			break
		}

		return e.complexity.FulfillmentLineItemConnection.Edges(childComplexity), true

	case "FulfillmentLineItemConnection.nodes":
		if e.complexity.FulfillmentLineItemConnection.Nodes == nil {
			break
		}

		return e.complexity.FulfillmentLineItemConnection.Nodes(childComplexity), true

	case "FulfillmentLineItemConnection.pageInfo":
		if e.complexity.FulfillmentLineItemConnection.PageInfo == nil {
			break
		}

		return e.complexity.FulfillmentLineItemConnection.PageInfo(childComplexity), true

	case "FulfillmentLineItemEdge.cursor":
		if e.complexity.FulfillmentLineItemEdge.Cursor == nil {
			break
		}

		return e.complexity.FulfillmentLineItemEdge.Cursor(childComplexity), true

	case "FulfillmentLineItemEdge.node":
		if e.complexity.FulfillmentLineItemEdge.Node == nil {
			break
		}

		return e.complexity.FulfillmentLineItemEdge.Node(childComplexity), true

	case "FulfillmentTrackingInfo.number":
		if e.complexity.FulfillmentTrackingInfo.Number == nil {
			break
		}

		return e.complexity.FulfillmentTrackingInfo.Number(childComplexity), true

	case "FulfillmentTrackingInfo.url":
		if e.complexity.FulfillmentTrackingInfo.URL == nil {
			break
		}

		return e.complexity.FulfillmentTrackingInfo.URL(childComplexity), true

	case "GenericFile.alt":
		if e.complexity.GenericFile.Alt == nil {
			break
		}

		return e.complexity.GenericFile.Alt(childComplexity), true

	case "GenericFile.id":
		if e.complexity.GenericFile.ID == nil {
			break
		}

		return e.complexity.GenericFile.ID(childComplexity), true

	case "GenericFile.mimeType":
		if e.complexity.GenericFile.MimeType == nil {
			break
		}

		return e.complexity.GenericFile.MimeType(childComplexity), true

	case "GenericFile.originalFileSize":
		if e.complexity.GenericFile.OriginalFileSize == nil {
			break
		}

		return e.complexity.GenericFile.OriginalFileSize(childComplexity), true

	case "GenericFile.previewImage":
		if e.complexity.GenericFile.PreviewImage == nil {
			break
		}

		return e.complexity.GenericFile.PreviewImage(childComplexity), true

	case "GenericFile.url":
		if e.complexity.GenericFile.URL == nil {
			break
		}

		return e.complexity.GenericFile.URL(childComplexity), true

	case "Image.altText":
		if e.complexity.Image.AltText == nil {
			break
		}

		return e.complexity.Image.AltText(childComplexity), true

	case "Image.height":
		if e.complexity.Image.Height == nil {
			break
		}

		return e.complexity.Image.Height(childComplexity), true

	case "Image.id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.originalSrc":
		if e.complexity.Image.OriginalSrc == nil {
			break
		}

		return e.complexity.Image.OriginalSrc(childComplexity), true

	case "Image.src":
		if e.complexity.Image.Src == nil {
			break
		}

		return e.complexity.Image.Src(childComplexity), true

	case "Image.thumbhash":
		if e.complexity.Image.Thumbhash == nil {
			break
		}

		return e.complexity.Image.Thumbhash(childComplexity), true

	case "Image.transformedSrc":
		if e.complexity.Image.TransformedSrc == nil {
			break
		}

		args, err := ec.field_Image_transformedSrc_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Image.TransformedSrc(childComplexity, args["crop"].(*model.CropRegion), args["maxHeight"].(*int32), args["maxWidth"].(*int32), args["preferredContentType"].(*model.ImageContentType), args["scale"].(*int32)), true

	case "Image.url":
		if e.complexity.Image.URL == nil {
			break
		}

		args, err := ec.field_Image_url_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Image.URL(childComplexity, args["transform"].(*model.ImageTransformInput)), true

	case "Image.width":
		if e.complexity.Image.Width == nil {
			break
		}

		return e.complexity.Image.Width(childComplexity), true

	case "ImageConnection.edges":
		if e.complexity.ImageConnection.Edges == nil {
			break
		}

		return e.complexity.ImageConnection.Edges(childComplexity), true

	case "ImageConnection.nodes":
		if e.complexity.ImageConnection.Nodes == nil {
			break
		}

		return e.complexity.ImageConnection.Nodes(childComplexity), true

	case "ImageConnection.pageInfo":
		if e.complexity.ImageConnection.PageInfo == nil {
			break
		}

		return e.complexity.ImageConnection.PageInfo(childComplexity), true

	case "ImageEdge.cursor":
		if e.complexity.ImageEdge.Cursor == nil {
			break
		}

		return e.complexity.ImageEdge.Cursor(childComplexity), true

	case "ImageEdge.node":
		if e.complexity.ImageEdge.Node == nil {
			break
		}

		return e.complexity.ImageEdge.Node(childComplexity), true

	case "InContextAnnotation.description":
		if e.complexity.InContextAnnotation.Description == nil {
			break
		}

		return e.complexity.InContextAnnotation.Description(childComplexity), true

	case "InContextAnnotation.type":
		if e.complexity.InContextAnnotation.Type == nil {
			break
		}

		return e.complexity.InContextAnnotation.Type(childComplexity), true

	case "InContextAnnotationType.kind":
		if e.complexity.InContextAnnotationType.Kind == nil {
			break
		}

		return e.complexity.InContextAnnotationType.Kind(childComplexity), true

	case "InContextAnnotationType.name":
		if e.complexity.InContextAnnotationType.Name == nil {
			break
		}

		return e.complexity.InContextAnnotationType.Name(childComplexity), true

	case "Language.endonymName":
		if e.complexity.Language.EndonymName == nil {
			break
		}

		return e.complexity.Language.EndonymName(childComplexity), true

	case "Language.isoCode":
		if e.complexity.Language.IsoCode == nil {
			break
		}

		return e.complexity.Language.IsoCode(childComplexity), true

	case "Language.name":
		if e.complexity.Language.Name == nil {
			break
		}

		return e.complexity.Language.Name(childComplexity), true

	case "Localization.availableCountries":
		if e.complexity.Localization.AvailableCountries == nil {
			break
		}

		return e.complexity.Localization.AvailableCountries(childComplexity), true

	case "Localization.availableLanguages":
		if e.complexity.Localization.AvailableLanguages == nil {
			break
		}

		return e.complexity.Localization.AvailableLanguages(childComplexity), true

	case "Localization.country":
		if e.complexity.Localization.Country == nil {
			break
		}

		return e.complexity.Localization.Country(childComplexity), true

	case "Localization.language":
		if e.complexity.Localization.Language == nil {
			break
		}

		return e.complexity.Localization.Language(childComplexity), true

	case "Localization.market":
		if e.complexity.Localization.Market == nil {
			break
		}

		return e.complexity.Localization.Market(childComplexity), true

	case "Location.address":
		if e.complexity.Location.Address == nil {
			break
		}

		return e.complexity.Location.Address(childComplexity), true

	case "Location.id":
		if e.complexity.Location.ID == nil {
			break
		}

		return e.complexity.Location.ID(childComplexity), true

	case "Location.metafield":
		if e.complexity.Location.Metafield == nil {
			break
		}

		args, err := ec.field_Location_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Location.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Location.metafields":
		if e.complexity.Location.Metafields == nil {
			break
		}

		args, err := ec.field_Location_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Location.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Location.name":
		if e.complexity.Location.Name == nil {
			break
		}

		return e.complexity.Location.Name(childComplexity), true

	case "LocationAddress.address1":
		if e.complexity.LocationAddress.Address1 == nil {
			break
		}

		return e.complexity.LocationAddress.Address1(childComplexity), true

	case "LocationAddress.address2":
		if e.complexity.LocationAddress.Address2 == nil {
			break
		}

		return e.complexity.LocationAddress.Address2(childComplexity), true

	case "LocationAddress.city":
		if e.complexity.LocationAddress.City == nil {
			break
		}

		return e.complexity.LocationAddress.City(childComplexity), true

	case "LocationAddress.country":
		if e.complexity.LocationAddress.Country == nil {
			break
		}

		return e.complexity.LocationAddress.Country(childComplexity), true

	case "LocationAddress.countryCode":
		if e.complexity.LocationAddress.CountryCode == nil {
			break
		}

		return e.complexity.LocationAddress.CountryCode(childComplexity), true

	case "LocationAddress.formatted":
		if e.complexity.LocationAddress.Formatted == nil {
			break
		}

		return e.complexity.LocationAddress.Formatted(childComplexity), true

	case "LocationAddress.latitude":
		if e.complexity.LocationAddress.Latitude == nil {
			break
		}

		return e.complexity.LocationAddress.Latitude(childComplexity), true

	case "LocationAddress.longitude":
		if e.complexity.LocationAddress.Longitude == nil {
			break
		}

		return e.complexity.LocationAddress.Longitude(childComplexity), true

	case "LocationAddress.phone":
		if e.complexity.LocationAddress.Phone == nil {
			break
		}

		return e.complexity.LocationAddress.Phone(childComplexity), true

	case "LocationAddress.province":
		if e.complexity.LocationAddress.Province == nil {
			break
		}

		return e.complexity.LocationAddress.Province(childComplexity), true

	case "LocationAddress.provinceCode":
		if e.complexity.LocationAddress.ProvinceCode == nil {
			break
		}

		return e.complexity.LocationAddress.ProvinceCode(childComplexity), true

	case "LocationAddress.zip":
		if e.complexity.LocationAddress.Zip == nil {
			break
		}

		return e.complexity.LocationAddress.Zip(childComplexity), true

	case "LocationConnection.edges":
		if e.complexity.LocationConnection.Edges == nil {
			break
		}

		return e.complexity.LocationConnection.Edges(childComplexity), true

	case "LocationConnection.nodes":
		if e.complexity.LocationConnection.Nodes == nil {
			break
		}

		return e.complexity.LocationConnection.Nodes(childComplexity), true

	case "LocationConnection.pageInfo":
		if e.complexity.LocationConnection.PageInfo == nil {
			break
		}

		return e.complexity.LocationConnection.PageInfo(childComplexity), true

	case "LocationEdge.cursor":
		if e.complexity.LocationEdge.Cursor == nil {
			break
		}

		return e.complexity.LocationEdge.Cursor(childComplexity), true

	case "LocationEdge.node":
		if e.complexity.LocationEdge.Node == nil {
			break
		}

		return e.complexity.LocationEdge.Node(childComplexity), true

	case "MailingAddress.address1":
		if e.complexity.MailingAddress.Address1 == nil {
			break
		}

		return e.complexity.MailingAddress.Address1(childComplexity), true

	case "MailingAddress.address2":
		if e.complexity.MailingAddress.Address2 == nil {
			break
		}

		return e.complexity.MailingAddress.Address2(childComplexity), true

	case "MailingAddress.city":
		if e.complexity.MailingAddress.City == nil {
			break
		}

		return e.complexity.MailingAddress.City(childComplexity), true

	case "MailingAddress.company":
		if e.complexity.MailingAddress.Company == nil {
			break
		}

		return e.complexity.MailingAddress.Company(childComplexity), true

	case "MailingAddress.country":
		if e.complexity.MailingAddress.Country == nil {
			break
		}

		return e.complexity.MailingAddress.Country(childComplexity), true

	case "MailingAddress.countryCode":
		if e.complexity.MailingAddress.CountryCode == nil {
			break
		}

		return e.complexity.MailingAddress.CountryCode(childComplexity), true

	case "MailingAddress.countryCodeV2":
		if e.complexity.MailingAddress.CountryCodeV2 == nil {
			break
		}

		return e.complexity.MailingAddress.CountryCodeV2(childComplexity), true

	case "MailingAddress.firstName":
		if e.complexity.MailingAddress.FirstName == nil {
			break
		}

		return e.complexity.MailingAddress.FirstName(childComplexity), true

	case "MailingAddress.formatted":
		if e.complexity.MailingAddress.Formatted == nil {
			break
		}

		args, err := ec.field_MailingAddress_formatted_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MailingAddress.Formatted(childComplexity, args["withCompany"].(*bool), args["withName"].(*bool)), true

	case "MailingAddress.formattedArea":
		if e.complexity.MailingAddress.FormattedArea == nil {
			break
		}

		return e.complexity.MailingAddress.FormattedArea(childComplexity), true

	case "MailingAddress.id":
		if e.complexity.MailingAddress.ID == nil {
			break
		}

		return e.complexity.MailingAddress.ID(childComplexity), true

	case "MailingAddress.lastName":
		if e.complexity.MailingAddress.LastName == nil {
			break
		}

		return e.complexity.MailingAddress.LastName(childComplexity), true

	case "MailingAddress.latitude":
		if e.complexity.MailingAddress.Latitude == nil {
			break
		}

		return e.complexity.MailingAddress.Latitude(childComplexity), true

	case "MailingAddress.longitude":
		if e.complexity.MailingAddress.Longitude == nil {
			break
		}

		return e.complexity.MailingAddress.Longitude(childComplexity), true

	case "MailingAddress.name":
		if e.complexity.MailingAddress.Name == nil {
			break
		}

		return e.complexity.MailingAddress.Name(childComplexity), true

	case "MailingAddress.phone":
		if e.complexity.MailingAddress.Phone == nil {
			break
		}

		return e.complexity.MailingAddress.Phone(childComplexity), true

	case "MailingAddress.province":
		if e.complexity.MailingAddress.Province == nil {
			break
		}

		return e.complexity.MailingAddress.Province(childComplexity), true

	case "MailingAddress.provinceCode":
		if e.complexity.MailingAddress.ProvinceCode == nil {
			break
		}

		return e.complexity.MailingAddress.ProvinceCode(childComplexity), true

	case "MailingAddress.zip":
		if e.complexity.MailingAddress.Zip == nil {
			break
		}

		return e.complexity.MailingAddress.Zip(childComplexity), true

	case "MailingAddressConnection.edges":
		if e.complexity.MailingAddressConnection.Edges == nil {
			break
		}

		return e.complexity.MailingAddressConnection.Edges(childComplexity), true

	case "MailingAddressConnection.nodes":
		if e.complexity.MailingAddressConnection.Nodes == nil {
			break
		}

		return e.complexity.MailingAddressConnection.Nodes(childComplexity), true

	case "MailingAddressConnection.pageInfo":
		if e.complexity.MailingAddressConnection.PageInfo == nil {
			break
		}

		return e.complexity.MailingAddressConnection.PageInfo(childComplexity), true

	case "MailingAddressEdge.cursor":
		if e.complexity.MailingAddressEdge.Cursor == nil {
			break
		}

		return e.complexity.MailingAddressEdge.Cursor(childComplexity), true

	case "MailingAddressEdge.node":
		if e.complexity.MailingAddressEdge.Node == nil {
			break
		}

		return e.complexity.MailingAddressEdge.Node(childComplexity), true

	case "ManualDiscountApplication.allocationMethod":
		if e.complexity.ManualDiscountApplication.AllocationMethod == nil {
			break
		}

		return e.complexity.ManualDiscountApplication.AllocationMethod(childComplexity), true

	case "ManualDiscountApplication.description":
		if e.complexity.ManualDiscountApplication.Description == nil {
			break
		}

		return e.complexity.ManualDiscountApplication.Description(childComplexity), true

	case "ManualDiscountApplication.targetSelection":
		if e.complexity.ManualDiscountApplication.TargetSelection == nil {
			break
		}

		return e.complexity.ManualDiscountApplication.TargetSelection(childComplexity), true

	case "ManualDiscountApplication.targetType":
		if e.complexity.ManualDiscountApplication.TargetType == nil {
			break
		}

		return e.complexity.ManualDiscountApplication.TargetType(childComplexity), true

	case "ManualDiscountApplication.title":
		if e.complexity.ManualDiscountApplication.Title == nil {
			break
		}

		return e.complexity.ManualDiscountApplication.Title(childComplexity), true

	case "ManualDiscountApplication.value":
		if e.complexity.ManualDiscountApplication.Value == nil {
			break
		}

		return e.complexity.ManualDiscountApplication.Value(childComplexity), true

	case "Market.handle":
		if e.complexity.Market.Handle == nil {
			break
		}

		return e.complexity.Market.Handle(childComplexity), true

	case "Market.id":
		if e.complexity.Market.ID == nil {
			break
		}

		return e.complexity.Market.ID(childComplexity), true

	case "Market.metafield":
		if e.complexity.Market.Metafield == nil {
			break
		}

		args, err := ec.field_Market_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Market.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Market.metafields":
		if e.complexity.Market.Metafields == nil {
			break
		}

		args, err := ec.field_Market_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Market.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "MediaConnection.edges":
		if e.complexity.MediaConnection.Edges == nil {
			break
		}

		return e.complexity.MediaConnection.Edges(childComplexity), true

	case "MediaConnection.nodes":
		if e.complexity.MediaConnection.Nodes == nil {
			break
		}

		return e.complexity.MediaConnection.Nodes(childComplexity), true

	case "MediaConnection.pageInfo":
		if e.complexity.MediaConnection.PageInfo == nil {
			break
		}

		return e.complexity.MediaConnection.PageInfo(childComplexity), true

	case "MediaEdge.cursor":
		if e.complexity.MediaEdge.Cursor == nil {
			break
		}

		return e.complexity.MediaEdge.Cursor(childComplexity), true

	case "MediaEdge.node":
		if e.complexity.MediaEdge.Node == nil {
			break
		}

		return e.complexity.MediaEdge.Node(childComplexity), true

	case "MediaImage.alt":
		if e.complexity.MediaImage.Alt == nil {
			break
		}

		return e.complexity.MediaImage.Alt(childComplexity), true

	case "MediaImage.id":
		if e.complexity.MediaImage.ID == nil {
			break
		}

		return e.complexity.MediaImage.ID(childComplexity), true

	case "MediaImage.image":
		if e.complexity.MediaImage.Image == nil {
			break
		}

		return e.complexity.MediaImage.Image(childComplexity), true

	case "MediaImage.mediaContentType":
		if e.complexity.MediaImage.MediaContentType == nil {
			break
		}

		return e.complexity.MediaImage.MediaContentType(childComplexity), true

	case "MediaImage.presentation":
		if e.complexity.MediaImage.Presentation == nil {
			break
		}

		return e.complexity.MediaImage.Presentation(childComplexity), true

	case "MediaImage.previewImage":
		if e.complexity.MediaImage.PreviewImage == nil {
			break
		}

		return e.complexity.MediaImage.PreviewImage(childComplexity), true

	case "MediaPresentation.asJson":
		if e.complexity.MediaPresentation.AsJSON == nil {
			break
		}

		args, err := ec.field_MediaPresentation_asJson_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MediaPresentation.AsJSON(childComplexity, args["format"].(model.MediaPresentationFormat)), true

	case "MediaPresentation.id":
		if e.complexity.MediaPresentation.ID == nil {
			break
		}

		return e.complexity.MediaPresentation.ID(childComplexity), true

	case "Menu.handle":
		if e.complexity.Menu.Handle == nil {
			break
		}

		return e.complexity.Menu.Handle(childComplexity), true

	case "Menu.id":
		if e.complexity.Menu.ID == nil {
			break
		}

		return e.complexity.Menu.ID(childComplexity), true

	case "Menu.items":
		if e.complexity.Menu.Items == nil {
			break
		}

		return e.complexity.Menu.Items(childComplexity), true

	case "Menu.itemsCount":
		if e.complexity.Menu.ItemsCount == nil {
			break
		}

		return e.complexity.Menu.ItemsCount(childComplexity), true

	case "Menu.title":
		if e.complexity.Menu.Title == nil {
			break
		}

		return e.complexity.Menu.Title(childComplexity), true

	case "MenuItem.id":
		if e.complexity.MenuItem.ID == nil {
			break
		}

		return e.complexity.MenuItem.ID(childComplexity), true

	case "MenuItem.items":
		if e.complexity.MenuItem.Items == nil {
			break
		}

		return e.complexity.MenuItem.Items(childComplexity), true

	case "MenuItem.resource":
		if e.complexity.MenuItem.Resource == nil {
			break
		}

		return e.complexity.MenuItem.Resource(childComplexity), true

	case "MenuItem.resourceId":
		if e.complexity.MenuItem.ResourceID == nil {
			break
		}

		return e.complexity.MenuItem.ResourceID(childComplexity), true

	case "MenuItem.tags":
		if e.complexity.MenuItem.Tags == nil {
			break
		}

		return e.complexity.MenuItem.Tags(childComplexity), true

	case "MenuItem.title":
		if e.complexity.MenuItem.Title == nil {
			break
		}

		return e.complexity.MenuItem.Title(childComplexity), true

	case "MenuItem.type":
		if e.complexity.MenuItem.Type == nil {
			break
		}

		return e.complexity.MenuItem.Type(childComplexity), true

	case "MenuItem.url":
		if e.complexity.MenuItem.URL == nil {
			break
		}

		return e.complexity.MenuItem.URL(childComplexity), true

	case "Metafield.createdAt":
		if e.complexity.Metafield.CreatedAt == nil {
			break
		}

		return e.complexity.Metafield.CreatedAt(childComplexity), true

	case "Metafield.description":
		if e.complexity.Metafield.Description == nil {
			break
		}

		return e.complexity.Metafield.Description(childComplexity), true

	case "Metafield.id":
		if e.complexity.Metafield.ID == nil {
			break
		}

		return e.complexity.Metafield.ID(childComplexity), true

	case "Metafield.key":
		if e.complexity.Metafield.Key == nil {
			break
		}

		return e.complexity.Metafield.Key(childComplexity), true

	case "Metafield.namespace":
		if e.complexity.Metafield.Namespace == nil {
			break
		}

		return e.complexity.Metafield.Namespace(childComplexity), true

	case "Metafield.parentResource":
		if e.complexity.Metafield.ParentResource == nil {
			break
		}

		return e.complexity.Metafield.ParentResource(childComplexity), true

	case "Metafield.reference":
		if e.complexity.Metafield.Reference == nil {
			break
		}

		return e.complexity.Metafield.Reference(childComplexity), true

	case "Metafield.references":
		if e.complexity.Metafield.References == nil {
			break
		}

		args, err := ec.field_Metafield_references_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Metafield.References(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32)), true

	case "Metafield.type":
		if e.complexity.Metafield.Type == nil {
			break
		}

		return e.complexity.Metafield.Type(childComplexity), true

	case "Metafield.updatedAt":
		if e.complexity.Metafield.UpdatedAt == nil {
			break
		}

		return e.complexity.Metafield.UpdatedAt(childComplexity), true

	case "Metafield.value":
		if e.complexity.Metafield.Value == nil {
			break
		}

		return e.complexity.Metafield.Value(childComplexity), true

	case "MetafieldDeleteUserError.code":
		if e.complexity.MetafieldDeleteUserError.Code == nil {
			break
		}

		return e.complexity.MetafieldDeleteUserError.Code(childComplexity), true

	case "MetafieldDeleteUserError.field":
		if e.complexity.MetafieldDeleteUserError.Field == nil {
			break
		}

		return e.complexity.MetafieldDeleteUserError.Field(childComplexity), true

	case "MetafieldDeleteUserError.message":
		if e.complexity.MetafieldDeleteUserError.Message == nil {
			break
		}

		return e.complexity.MetafieldDeleteUserError.Message(childComplexity), true

	case "MetafieldReferenceConnection.edges":
		if e.complexity.MetafieldReferenceConnection.Edges == nil {
			break
		}

		return e.complexity.MetafieldReferenceConnection.Edges(childComplexity), true

	case "MetafieldReferenceConnection.nodes":
		if e.complexity.MetafieldReferenceConnection.Nodes == nil {
			break
		}

		return e.complexity.MetafieldReferenceConnection.Nodes(childComplexity), true

	case "MetafieldReferenceConnection.pageInfo":
		if e.complexity.MetafieldReferenceConnection.PageInfo == nil {
			break
		}

		return e.complexity.MetafieldReferenceConnection.PageInfo(childComplexity), true

	case "MetafieldReferenceEdge.cursor":
		if e.complexity.MetafieldReferenceEdge.Cursor == nil {
			break
		}

		return e.complexity.MetafieldReferenceEdge.Cursor(childComplexity), true

	case "MetafieldReferenceEdge.node":
		if e.complexity.MetafieldReferenceEdge.Node == nil {
			break
		}

		return e.complexity.MetafieldReferenceEdge.Node(childComplexity), true

	case "MetafieldsSetUserError.code":
		if e.complexity.MetafieldsSetUserError.Code == nil {
			break
		}

		return e.complexity.MetafieldsSetUserError.Code(childComplexity), true

	case "MetafieldsSetUserError.elementIndex":
		if e.complexity.MetafieldsSetUserError.ElementIndex == nil {
			break
		}

		return e.complexity.MetafieldsSetUserError.ElementIndex(childComplexity), true

	case "MetafieldsSetUserError.field":
		if e.complexity.MetafieldsSetUserError.Field == nil {
			break
		}

		return e.complexity.MetafieldsSetUserError.Field(childComplexity), true

	case "MetafieldsSetUserError.message":
		if e.complexity.MetafieldsSetUserError.Message == nil {
			break
		}

		return e.complexity.MetafieldsSetUserError.Message(childComplexity), true

	case "Metaobject.field":
		if e.complexity.Metaobject.Field == nil {
			break
		}

		args, err := ec.field_Metaobject_field_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Metaobject.Field(childComplexity, args["key"].(string)), true

	case "Metaobject.fields":
		if e.complexity.Metaobject.Fields == nil {
			break
		}

		return e.complexity.Metaobject.Fields(childComplexity), true

	case "Metaobject.handle":
		if e.complexity.Metaobject.Handle == nil {
			break
		}

		return e.complexity.Metaobject.Handle(childComplexity), true

	case "Metaobject.id":
		if e.complexity.Metaobject.ID == nil {
			break
		}

		return e.complexity.Metaobject.ID(childComplexity), true

	case "Metaobject.onlineStoreUrl":
		if e.complexity.Metaobject.OnlineStoreURL == nil {
			break
		}

		return e.complexity.Metaobject.OnlineStoreURL(childComplexity), true

	case "Metaobject.seo":
		if e.complexity.Metaobject.Seo == nil {
			break
		}

		return e.complexity.Metaobject.Seo(childComplexity), true

	case "Metaobject.type":
		if e.complexity.Metaobject.Type == nil {
			break
		}

		return e.complexity.Metaobject.Type(childComplexity), true

	case "Metaobject.updatedAt":
		if e.complexity.Metaobject.UpdatedAt == nil {
			break
		}

		return e.complexity.Metaobject.UpdatedAt(childComplexity), true

	case "MetaobjectConnection.edges":
		if e.complexity.MetaobjectConnection.Edges == nil {
			break
		}

		return e.complexity.MetaobjectConnection.Edges(childComplexity), true

	case "MetaobjectConnection.nodes":
		if e.complexity.MetaobjectConnection.Nodes == nil {
			break
		}

		return e.complexity.MetaobjectConnection.Nodes(childComplexity), true

	case "MetaobjectConnection.pageInfo":
		if e.complexity.MetaobjectConnection.PageInfo == nil {
			break
		}

		return e.complexity.MetaobjectConnection.PageInfo(childComplexity), true

	case "MetaobjectEdge.cursor":
		if e.complexity.MetaobjectEdge.Cursor == nil {
			break
		}

		return e.complexity.MetaobjectEdge.Cursor(childComplexity), true

	case "MetaobjectEdge.node":
		if e.complexity.MetaobjectEdge.Node == nil {
			break
		}

		return e.complexity.MetaobjectEdge.Node(childComplexity), true

	case "MetaobjectField.key":
		if e.complexity.MetaobjectField.Key == nil {
			break
		}

		return e.complexity.MetaobjectField.Key(childComplexity), true

	case "MetaobjectField.reference":
		if e.complexity.MetaobjectField.Reference == nil {
			break
		}

		return e.complexity.MetaobjectField.Reference(childComplexity), true

	case "MetaobjectField.references":
		if e.complexity.MetaobjectField.References == nil {
			break
		}

		args, err := ec.field_MetaobjectField_references_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MetaobjectField.References(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32)), true

	case "MetaobjectField.type":
		if e.complexity.MetaobjectField.Type == nil {
			break
		}

		return e.complexity.MetaobjectField.Type(childComplexity), true

	case "MetaobjectField.value":
		if e.complexity.MetaobjectField.Value == nil {
			break
		}

		return e.complexity.MetaobjectField.Value(childComplexity), true

	case "MetaobjectSEO.description":
		if e.complexity.MetaobjectSEO.Description == nil {
			break
		}

		return e.complexity.MetaobjectSEO.Description(childComplexity), true

	case "MetaobjectSEO.title":
		if e.complexity.MetaobjectSEO.Title == nil {
			break
		}

		return e.complexity.MetaobjectSEO.Title(childComplexity), true

	case "Model3d.alt":
		if e.complexity.Model3d.Alt == nil {
			break
		}

		return e.complexity.Model3d.Alt(childComplexity), true

	case "Model3d.id":
		if e.complexity.Model3d.ID == nil {
			break
		}

		return e.complexity.Model3d.ID(childComplexity), true

	case "Model3d.mediaContentType":
		if e.complexity.Model3d.MediaContentType == nil {
			break
		}

		return e.complexity.Model3d.MediaContentType(childComplexity), true

	case "Model3d.presentation":
		if e.complexity.Model3d.Presentation == nil {
			break
		}

		return e.complexity.Model3d.Presentation(childComplexity), true

	case "Model3d.previewImage":
		if e.complexity.Model3d.PreviewImage == nil {
			break
		}

		return e.complexity.Model3d.PreviewImage(childComplexity), true

	case "Model3d.sources":
		if e.complexity.Model3d.Sources == nil {
			break
		}

		return e.complexity.Model3d.Sources(childComplexity), true

	case "Model3dSource.filesize":
		if e.complexity.Model3dSource.Filesize == nil {
			break
		}

		return e.complexity.Model3dSource.Filesize(childComplexity), true

	case "Model3dSource.format":
		if e.complexity.Model3dSource.Format == nil {
			break
		}

		return e.complexity.Model3dSource.Format(childComplexity), true

	case "Model3dSource.mimeType":
		if e.complexity.Model3dSource.MimeType == nil {
			break
		}

		return e.complexity.Model3dSource.MimeType(childComplexity), true

	case "Model3dSource.url":
		if e.complexity.Model3dSource.URL == nil {
			break
		}

		return e.complexity.Model3dSource.URL(childComplexity), true

	case "MoneyV2.amount":
		if e.complexity.MoneyV2.Amount == nil {
			break
		}

		return e.complexity.MoneyV2.Amount(childComplexity), true

	case "MoneyV2.currencyCode":
		if e.complexity.MoneyV2.CurrencyCode == nil {
			break
		}

		return e.complexity.MoneyV2.CurrencyCode(childComplexity), true

	case "Mutation.cartAttributesUpdate":
		if e.complexity.Mutation.CartAttributesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartAttributesUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartAttributesUpdate(childComplexity, args["attributes"].([]*model.AttributeInput), args["cartId"].(string)), true

	case "Mutation.cartBillingAddressUpdate":
		if e.complexity.Mutation.CartBillingAddressUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartBillingAddressUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartBillingAddressUpdate(childComplexity, args["billingAddress"].(*model.MailingAddressInput), args["cartId"].(string)), true

	case "Mutation.cartBuyerIdentityUpdate":
		if e.complexity.Mutation.CartBuyerIdentityUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartBuyerIdentityUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartBuyerIdentityUpdate(childComplexity, args["buyerIdentity"].(model.CartBuyerIdentityInput), args["cartId"].(string)), true

	case "Mutation.cartCreate":
		if e.complexity.Mutation.CartCreate == nil {
			break
		}

		args, err := ec.field_Mutation_cartCreate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartCreate(childComplexity, args["input"].(*model.CartInput)), true

	case "Mutation.cartDeliveryAddressesAdd":
		if e.complexity.Mutation.CartDeliveryAddressesAdd == nil {
			break
		}

		args, err := ec.field_Mutation_cartDeliveryAddressesAdd_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartDeliveryAddressesAdd(childComplexity, args["addresses"].([]*model.CartSelectableAddressInput), args["cartId"].(string)), true

	case "Mutation.cartDeliveryAddressesRemove":
		if e.complexity.Mutation.CartDeliveryAddressesRemove == nil {
			break
		}

		args, err := ec.field_Mutation_cartDeliveryAddressesRemove_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartDeliveryAddressesRemove(childComplexity, args["addressIds"].([]string), args["cartId"].(string)), true

	case "Mutation.cartDeliveryAddressesReplace":
		if e.complexity.Mutation.CartDeliveryAddressesReplace == nil {
			break
		}

		args, err := ec.field_Mutation_cartDeliveryAddressesReplace_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartDeliveryAddressesReplace(childComplexity, args["addresses"].([]*model.CartSelectableAddressInput), args["cartId"].(string)), true

	case "Mutation.cartDeliveryAddressesUpdate":
		if e.complexity.Mutation.CartDeliveryAddressesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartDeliveryAddressesUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartDeliveryAddressesUpdate(childComplexity, args["addresses"].([]*model.CartSelectableAddressUpdateInput), args["cartId"].(string)), true

	case "Mutation.cartDiscountCodesUpdate":
		if e.complexity.Mutation.CartDiscountCodesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartDiscountCodesUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartDiscountCodesUpdate(childComplexity, args["cartId"].(string), args["discountCodes"].([]string)), true

	case "Mutation.cartGiftCardCodesRemove":
		if e.complexity.Mutation.CartGiftCardCodesRemove == nil {
			break
		}

		args, err := ec.field_Mutation_cartGiftCardCodesRemove_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartGiftCardCodesRemove(childComplexity, args["appliedGiftCardIds"].([]string), args["cartId"].(string)), true

	case "Mutation.cartGiftCardCodesUpdate":
		if e.complexity.Mutation.CartGiftCardCodesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartGiftCardCodesUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartGiftCardCodesUpdate(childComplexity, args["cartId"].(string), args["giftCardCodes"].([]string)), true

	case "Mutation.cartLinesAdd":
		if e.complexity.Mutation.CartLinesAdd == nil {
			break
		}

		args, err := ec.field_Mutation_cartLinesAdd_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartLinesAdd(childComplexity, args["cartId"].(string), args["lines"].([]*model.CartLineInput)), true

	case "Mutation.cartLinesRemove":
		if e.complexity.Mutation.CartLinesRemove == nil {
			break
		}

		args, err := ec.field_Mutation_cartLinesRemove_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartLinesRemove(childComplexity, args["cartId"].(string), args["lineIds"].([]string)), true

	case "Mutation.cartLinesUpdate":
		if e.complexity.Mutation.CartLinesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartLinesUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartLinesUpdate(childComplexity, args["cartId"].(string), args["lines"].([]*model.CartLineUpdateInput)), true

	case "Mutation.cartMetafieldDelete":
		if e.complexity.Mutation.CartMetafieldDelete == nil {
			break
		}

		args, err := ec.field_Mutation_cartMetafieldDelete_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartMetafieldDelete(childComplexity, args["input"].(model.CartMetafieldDeleteInput)), true

	case "Mutation.cartMetafieldsSet":
		if e.complexity.Mutation.CartMetafieldsSet == nil {
			break
		}

		args, err := ec.field_Mutation_cartMetafieldsSet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartMetafieldsSet(childComplexity, args["metafields"].([]*model.CartMetafieldsSetInput)), true

	case "Mutation.cartNoteUpdate":
		if e.complexity.Mutation.CartNoteUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartNoteUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartNoteUpdate(childComplexity, args["cartId"].(string), args["note"].(string)), true

	case "Mutation.cartPaymentUpdate":
		if e.complexity.Mutation.CartPaymentUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartPaymentUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartPaymentUpdate(childComplexity, args["cartId"].(string), args["payment"].(model.CartPaymentInput)), true

	case "Mutation.cartPrepareForCompletion":
		if e.complexity.Mutation.CartPrepareForCompletion == nil {
			break
		}

		args, err := ec.field_Mutation_cartPrepareForCompletion_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartPrepareForCompletion(childComplexity, args["cartId"].(string)), true

	case "Mutation.cartRemovePersonalData":
		if e.complexity.Mutation.CartRemovePersonalData == nil {
			break
		}

		args, err := ec.field_Mutation_cartRemovePersonalData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartRemovePersonalData(childComplexity, args["cartId"].(string)), true

	case "Mutation.cartSelectedDeliveryOptionsUpdate":
		if e.complexity.Mutation.CartSelectedDeliveryOptionsUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartSelectedDeliveryOptionsUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartSelectedDeliveryOptionsUpdate(childComplexity, args["cartId"].(string), args["selectedDeliveryOptions"].([]*model.CartSelectedDeliveryOptionInput)), true

	case "Mutation.cartSubmitForCompletion":
		if e.complexity.Mutation.CartSubmitForCompletion == nil {
			break
		}

		args, err := ec.field_Mutation_cartSubmitForCompletion_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartSubmitForCompletion(childComplexity, args["attemptToken"].(string), args["cartId"].(string)), true

	case "Mutation.checkoutAttributesUpdateV2":
		if e.complexity.Mutation.CheckoutAttributesUpdateV2 == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutAttributesUpdateV2_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutAttributesUpdateV2(childComplexity, args["checkoutId"].(string), args["input"].(model.CheckoutAttributesUpdateV2Input)), true

	case "Mutation.checkoutCompleteFree":
		if e.complexity.Mutation.CheckoutCompleteFree == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutCompleteFree_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutCompleteFree(childComplexity, args["checkoutId"].(string)), true

	case "Mutation.checkoutCompleteWithCreditCardV2":
		if e.complexity.Mutation.CheckoutCompleteWithCreditCardV2 == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutCompleteWithCreditCardV2_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutCompleteWithCreditCardV2(childComplexity, args["checkoutId"].(string), args["payment"].(model.CreditCardPaymentInputV2)), true

	case "Mutation.checkoutCompleteWithTokenizedPaymentV3":
		if e.complexity.Mutation.CheckoutCompleteWithTokenizedPaymentV3 == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutCompleteWithTokenizedPaymentV3_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutCompleteWithTokenizedPaymentV3(childComplexity, args["checkoutId"].(string), args["payment"].(model.TokenizedPaymentInputV3)), true

	case "Mutation.checkoutCreate":
		if e.complexity.Mutation.CheckoutCreate == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutCreate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutCreate(childComplexity, args["input"].(model.CheckoutCreateInput), args["queueToken"].(*string)), true

	case "Mutation.checkoutCustomerAssociateV2":
		if e.complexity.Mutation.CheckoutCustomerAssociateV2 == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutCustomerAssociateV2_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutCustomerAssociateV2(childComplexity, args["checkoutId"].(string), args["customerAccessToken"].(string)), true

	case "Mutation.checkoutCustomerDisassociateV2":
		if e.complexity.Mutation.CheckoutCustomerDisassociateV2 == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutCustomerDisassociateV2_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutCustomerDisassociateV2(childComplexity, args["checkoutId"].(string)), true

	case "Mutation.checkoutDiscountCodeApplyV2":
		if e.complexity.Mutation.CheckoutDiscountCodeApplyV2 == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutDiscountCodeApplyV2_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutDiscountCodeApplyV2(childComplexity, args["checkoutId"].(string), args["discountCode"].(string)), true

	case "Mutation.checkoutDiscountCodeRemove":
		if e.complexity.Mutation.CheckoutDiscountCodeRemove == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutDiscountCodeRemove_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutDiscountCodeRemove(childComplexity, args["checkoutId"].(string)), true

	case "Mutation.checkoutEmailUpdateV2":
		if e.complexity.Mutation.CheckoutEmailUpdateV2 == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutEmailUpdateV2_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutEmailUpdateV2(childComplexity, args["checkoutId"].(string), args["email"].(string)), true

	case "Mutation.checkoutGiftCardRemoveV2":
		if e.complexity.Mutation.CheckoutGiftCardRemoveV2 == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutGiftCardRemoveV2_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutGiftCardRemoveV2(childComplexity, args["appliedGiftCardId"].(string), args["checkoutId"].(string)), true

	case "Mutation.checkoutGiftCardsAppend":
		if e.complexity.Mutation.CheckoutGiftCardsAppend == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutGiftCardsAppend_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutGiftCardsAppend(childComplexity, args["checkoutId"].(string), args["giftCardCodes"].([]string)), true

	case "Mutation.checkoutLineItemsAdd":
		if e.complexity.Mutation.CheckoutLineItemsAdd == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutLineItemsAdd_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutLineItemsAdd(childComplexity, args["checkoutId"].(string), args["lineItems"].([]*model.CheckoutLineItemInput)), true

	case "Mutation.checkoutLineItemsRemove":
		if e.complexity.Mutation.CheckoutLineItemsRemove == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutLineItemsRemove_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutLineItemsRemove(childComplexity, args["checkoutId"].(string), args["lineItemIds"].([]string)), true

	case "Mutation.checkoutLineItemsReplace":
		if e.complexity.Mutation.CheckoutLineItemsReplace == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutLineItemsReplace_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutLineItemsReplace(childComplexity, args["checkoutId"].(string), args["lineItems"].([]*model.CheckoutLineItemInput)), true

	case "Mutation.checkoutLineItemsUpdate":
		if e.complexity.Mutation.CheckoutLineItemsUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutLineItemsUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutLineItemsUpdate(childComplexity, args["checkoutId"].(string), args["lineItems"].([]*model.CheckoutLineItemUpdateInput)), true

	case "Mutation.checkoutShippingAddressUpdateV2":
		if e.complexity.Mutation.CheckoutShippingAddressUpdateV2 == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutShippingAddressUpdateV2_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutShippingAddressUpdateV2(childComplexity, args["checkoutId"].(string), args["shippingAddress"].(model.MailingAddressInput)), true

	case "Mutation.checkoutShippingLineUpdate":
		if e.complexity.Mutation.CheckoutShippingLineUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_checkoutShippingLineUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckoutShippingLineUpdate(childComplexity, args["checkoutId"].(string), args["shippingRateHandle"].(string)), true

	case "Mutation.customerAccessTokenCreate":
		if e.complexity.Mutation.CustomerAccessTokenCreate == nil {
			break
		}

		args, err := ec.field_Mutation_customerAccessTokenCreate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerAccessTokenCreate(childComplexity, args["input"].(model.CustomerAccessTokenCreateInput)), true

	case "Mutation.customerAccessTokenCreateWithMultipass":
		if e.complexity.Mutation.CustomerAccessTokenCreateWithMultipass == nil {
			break
		}

		args, err := ec.field_Mutation_customerAccessTokenCreateWithMultipass_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerAccessTokenCreateWithMultipass(childComplexity, args["multipassToken"].(string)), true

	case "Mutation.customerAccessTokenDelete":
		if e.complexity.Mutation.CustomerAccessTokenDelete == nil {
			break
		}

		args, err := ec.field_Mutation_customerAccessTokenDelete_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerAccessTokenDelete(childComplexity, args["customerAccessToken"].(string)), true

	case "Mutation.customerAccessTokenRenew":
		if e.complexity.Mutation.CustomerAccessTokenRenew == nil {
			break
		}

		args, err := ec.field_Mutation_customerAccessTokenRenew_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerAccessTokenRenew(childComplexity, args["customerAccessToken"].(string)), true

	case "Mutation.customerActivate":
		if e.complexity.Mutation.CustomerActivate == nil {
			break
		}

		args, err := ec.field_Mutation_customerActivate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerActivate(childComplexity, args["id"].(string), args["input"].(model.CustomerActivateInput)), true

	case "Mutation.customerActivateByUrl":
		if e.complexity.Mutation.CustomerActivateByURL == nil {
			break
		}

		args, err := ec.field_Mutation_customerActivateByUrl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerActivateByURL(childComplexity, args["activationUrl"].(string), args["password"].(string)), true

	case "Mutation.customerAddressCreate":
		if e.complexity.Mutation.CustomerAddressCreate == nil {
			break
		}

		args, err := ec.field_Mutation_customerAddressCreate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerAddressCreate(childComplexity, args["address"].(model.MailingAddressInput), args["customerAccessToken"].(string)), true

	case "Mutation.customerAddressDelete":
		if e.complexity.Mutation.CustomerAddressDelete == nil {
			break
		}

		args, err := ec.field_Mutation_customerAddressDelete_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerAddressDelete(childComplexity, args["customerAccessToken"].(string), args["id"].(string)), true

	case "Mutation.customerAddressUpdate":
		if e.complexity.Mutation.CustomerAddressUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_customerAddressUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerAddressUpdate(childComplexity, args["address"].(model.MailingAddressInput), args["customerAccessToken"].(string), args["id"].(string)), true

	case "Mutation.customerCreate":
		if e.complexity.Mutation.CustomerCreate == nil {
			break
		}

		args, err := ec.field_Mutation_customerCreate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerCreate(childComplexity, args["input"].(model.CustomerCreateInput)), true

	case "Mutation.customerDefaultAddressUpdate":
		if e.complexity.Mutation.CustomerDefaultAddressUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_customerDefaultAddressUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerDefaultAddressUpdate(childComplexity, args["addressId"].(string), args["customerAccessToken"].(string)), true

	case "Mutation.customerRecover":
		if e.complexity.Mutation.CustomerRecover == nil {
			break
		}

		args, err := ec.field_Mutation_customerRecover_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerRecover(childComplexity, args["email"].(string)), true

	case "Mutation.customerReset":
		if e.complexity.Mutation.CustomerReset == nil {
			break
		}

		args, err := ec.field_Mutation_customerReset_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerReset(childComplexity, args["id"].(string), args["input"].(model.CustomerResetInput)), true

	case "Mutation.customerResetByUrl":
		if e.complexity.Mutation.CustomerResetByURL == nil {
			break
		}

		args, err := ec.field_Mutation_customerResetByUrl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerResetByURL(childComplexity, args["password"].(string), args["resetUrl"].(string)), true

	case "Mutation.customerUpdate":
		if e.complexity.Mutation.CustomerUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_customerUpdate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerUpdate(childComplexity, args["customer"].(model.CustomerUpdateInput), args["customerAccessToken"].(string)), true

	case "Mutation.shopPayPaymentRequestSessionCreate":
		if e.complexity.Mutation.ShopPayPaymentRequestSessionCreate == nil {
			break
		}

		args, err := ec.field_Mutation_shopPayPaymentRequestSessionCreate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ShopPayPaymentRequestSessionCreate(childComplexity, args["paymentRequest"].(model.ShopPayPaymentRequestInput), args["sourceIdentifier"].(string)), true

	case "Mutation.shopPayPaymentRequestSessionSubmit":
		if e.complexity.Mutation.ShopPayPaymentRequestSessionSubmit == nil {
			break
		}

		args, err := ec.field_Mutation_shopPayPaymentRequestSessionSubmit_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ShopPayPaymentRequestSessionSubmit(childComplexity, args["idempotencyKey"].(string), args["orderName"].(*string), args["paymentRequest"].(model.ShopPayPaymentRequestInput), args["token"].(string)), true

	case "Order.billingAddress":
		if e.complexity.Order.BillingAddress == nil {
			break
		}

		return e.complexity.Order.BillingAddress(childComplexity), true

	case "Order.cancelReason":
		if e.complexity.Order.CancelReason == nil {
			break
		}

		return e.complexity.Order.CancelReason(childComplexity), true

	case "Order.canceledAt":
		if e.complexity.Order.CanceledAt == nil {
			break
		}

		return e.complexity.Order.CanceledAt(childComplexity), true

	case "Order.currencyCode":
		if e.complexity.Order.CurrencyCode == nil {
			break
		}

		return e.complexity.Order.CurrencyCode(childComplexity), true

	case "Order.currentSubtotalPrice":
		if e.complexity.Order.CurrentSubtotalPrice == nil {
			break
		}

		return e.complexity.Order.CurrentSubtotalPrice(childComplexity), true

	case "Order.currentTotalDuties":
		if e.complexity.Order.CurrentTotalDuties == nil {
			break
		}

		return e.complexity.Order.CurrentTotalDuties(childComplexity), true

	case "Order.currentTotalPrice":
		if e.complexity.Order.CurrentTotalPrice == nil {
			break
		}

		return e.complexity.Order.CurrentTotalPrice(childComplexity), true

	case "Order.currentTotalShippingPrice":
		if e.complexity.Order.CurrentTotalShippingPrice == nil {
			break
		}

		return e.complexity.Order.CurrentTotalShippingPrice(childComplexity), true

	case "Order.currentTotalTax":
		if e.complexity.Order.CurrentTotalTax == nil {
			break
		}

		return e.complexity.Order.CurrentTotalTax(childComplexity), true

	case "Order.customAttributes":
		if e.complexity.Order.CustomAttributes == nil {
			break
		}

		return e.complexity.Order.CustomAttributes(childComplexity), true

	case "Order.customerLocale":
		if e.complexity.Order.CustomerLocale == nil {
			break
		}

		return e.complexity.Order.CustomerLocale(childComplexity), true

	case "Order.customerUrl":
		if e.complexity.Order.CustomerURL == nil {
			break
		}

		return e.complexity.Order.CustomerURL(childComplexity), true

	case "Order.discountApplications":
		if e.complexity.Order.DiscountApplications == nil {
			break
		}

		args, err := ec.field_Order_discountApplications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Order.DiscountApplications(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "Order.edited":
		if e.complexity.Order.Edited == nil {
			break
		}

		return e.complexity.Order.Edited(childComplexity), true

	case "Order.email":
		if e.complexity.Order.Email == nil {
			break
		}

		return e.complexity.Order.Email(childComplexity), true

	case "Order.financialStatus":
		if e.complexity.Order.FinancialStatus == nil {
			break
		}

		return e.complexity.Order.FinancialStatus(childComplexity), true

	case "Order.fulfillmentStatus":
		if e.complexity.Order.FulfillmentStatus == nil {
			break
		}

		return e.complexity.Order.FulfillmentStatus(childComplexity), true

	case "Order.id":
		if e.complexity.Order.ID == nil {
			break
		}

		return e.complexity.Order.ID(childComplexity), true

	case "Order.lineItems":
		if e.complexity.Order.LineItems == nil {
			break
		}

		args, err := ec.field_Order_lineItems_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Order.LineItems(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "Order.metafield":
		if e.complexity.Order.Metafield == nil {
			break
		}

		args, err := ec.field_Order_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Order.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Order.metafields":
		if e.complexity.Order.Metafields == nil {
			break
		}

		args, err := ec.field_Order_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Order.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Order.name":
		if e.complexity.Order.Name == nil {
			break
		}

		return e.complexity.Order.Name(childComplexity), true

	case "Order.orderNumber":
		if e.complexity.Order.OrderNumber == nil {
			break
		}

		return e.complexity.Order.OrderNumber(childComplexity), true

	case "Order.originalTotalDuties":
		if e.complexity.Order.OriginalTotalDuties == nil {
			break
		}

		return e.complexity.Order.OriginalTotalDuties(childComplexity), true

	case "Order.originalTotalPrice":
		if e.complexity.Order.OriginalTotalPrice == nil {
			break
		}

		return e.complexity.Order.OriginalTotalPrice(childComplexity), true

	case "Order.phone":
		if e.complexity.Order.Phone == nil {
			break
		}

		return e.complexity.Order.Phone(childComplexity), true

	case "Order.processedAt":
		if e.complexity.Order.ProcessedAt == nil {
			break
		}

		return e.complexity.Order.ProcessedAt(childComplexity), true

	case "Order.shippingAddress":
		if e.complexity.Order.ShippingAddress == nil {
			break
		}

		return e.complexity.Order.ShippingAddress(childComplexity), true

	case "Order.shippingDiscountAllocations":
		if e.complexity.Order.ShippingDiscountAllocations == nil {
			break
		}

		return e.complexity.Order.ShippingDiscountAllocations(childComplexity), true

	case "Order.statusUrl":
		if e.complexity.Order.StatusURL == nil {
			break
		}

		return e.complexity.Order.StatusURL(childComplexity), true

	case "Order.subtotalPrice":
		if e.complexity.Order.SubtotalPrice == nil {
			break
		}

		return e.complexity.Order.SubtotalPrice(childComplexity), true

	case "Order.subtotalPriceV2":
		if e.complexity.Order.SubtotalPriceV2 == nil {
			break
		}

		return e.complexity.Order.SubtotalPriceV2(childComplexity), true

	case "Order.successfulFulfillments":
		if e.complexity.Order.SuccessfulFulfillments == nil {
			break
		}

		args, err := ec.field_Order_successfulFulfillments_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Order.SuccessfulFulfillments(childComplexity, args["first"].(*int32)), true

	case "Order.totalPrice":
		if e.complexity.Order.TotalPrice == nil {
			break
		}

		return e.complexity.Order.TotalPrice(childComplexity), true

	case "Order.totalPriceV2":
		if e.complexity.Order.TotalPriceV2 == nil {
			break
		}

		return e.complexity.Order.TotalPriceV2(childComplexity), true

	case "Order.totalRefunded":
		if e.complexity.Order.TotalRefunded == nil {
			break
		}

		return e.complexity.Order.TotalRefunded(childComplexity), true

	case "Order.totalRefundedV2":
		if e.complexity.Order.TotalRefundedV2 == nil {
			break
		}

		return e.complexity.Order.TotalRefundedV2(childComplexity), true

	case "Order.totalShippingPrice":
		if e.complexity.Order.TotalShippingPrice == nil {
			break
		}

		return e.complexity.Order.TotalShippingPrice(childComplexity), true

	case "Order.totalShippingPriceV2":
		if e.complexity.Order.TotalShippingPriceV2 == nil {
			break
		}

		return e.complexity.Order.TotalShippingPriceV2(childComplexity), true

	case "Order.totalTax":
		if e.complexity.Order.TotalTax == nil {
			break
		}

		return e.complexity.Order.TotalTax(childComplexity), true

	case "Order.totalTaxV2":
		if e.complexity.Order.TotalTaxV2 == nil {
			break
		}

		return e.complexity.Order.TotalTaxV2(childComplexity), true

	case "OrderConnection.edges":
		if e.complexity.OrderConnection.Edges == nil {
			break
		}

		return e.complexity.OrderConnection.Edges(childComplexity), true

	case "OrderConnection.nodes":
		if e.complexity.OrderConnection.Nodes == nil {
			break
		}

		return e.complexity.OrderConnection.Nodes(childComplexity), true

	case "OrderConnection.pageInfo":
		if e.complexity.OrderConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrderConnection.PageInfo(childComplexity), true

	case "OrderConnection.totalCount":
		if e.complexity.OrderConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrderConnection.TotalCount(childComplexity), true

	case "OrderEdge.cursor":
		if e.complexity.OrderEdge.Cursor == nil {
			break
		}

		return e.complexity.OrderEdge.Cursor(childComplexity), true

	case "OrderEdge.node":
		if e.complexity.OrderEdge.Node == nil {
			break
		}

		return e.complexity.OrderEdge.Node(childComplexity), true

	case "OrderLineItem.currentQuantity":
		if e.complexity.OrderLineItem.CurrentQuantity == nil {
			break
		}

		return e.complexity.OrderLineItem.CurrentQuantity(childComplexity), true

	case "OrderLineItem.customAttributes":
		if e.complexity.OrderLineItem.CustomAttributes == nil {
			break
		}

		return e.complexity.OrderLineItem.CustomAttributes(childComplexity), true

	case "OrderLineItem.discountAllocations":
		if e.complexity.OrderLineItem.DiscountAllocations == nil {
			break
		}

		return e.complexity.OrderLineItem.DiscountAllocations(childComplexity), true

	case "OrderLineItem.discountedTotalPrice":
		if e.complexity.OrderLineItem.DiscountedTotalPrice == nil {
			break
		}

		return e.complexity.OrderLineItem.DiscountedTotalPrice(childComplexity), true

	case "OrderLineItem.originalTotalPrice":
		if e.complexity.OrderLineItem.OriginalTotalPrice == nil {
			break
		}

		return e.complexity.OrderLineItem.OriginalTotalPrice(childComplexity), true

	case "OrderLineItem.quantity":
		if e.complexity.OrderLineItem.Quantity == nil {
			break
		}

		return e.complexity.OrderLineItem.Quantity(childComplexity), true

	case "OrderLineItem.title":
		if e.complexity.OrderLineItem.Title == nil {
			break
		}

		return e.complexity.OrderLineItem.Title(childComplexity), true

	case "OrderLineItem.variant":
		if e.complexity.OrderLineItem.Variant == nil {
			break
		}

		return e.complexity.OrderLineItem.Variant(childComplexity), true

	case "OrderLineItemConnection.edges":
		if e.complexity.OrderLineItemConnection.Edges == nil {
			break
		}

		return e.complexity.OrderLineItemConnection.Edges(childComplexity), true

	case "OrderLineItemConnection.nodes":
		if e.complexity.OrderLineItemConnection.Nodes == nil {
			break
		}

		return e.complexity.OrderLineItemConnection.Nodes(childComplexity), true

	case "OrderLineItemConnection.pageInfo":
		if e.complexity.OrderLineItemConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrderLineItemConnection.PageInfo(childComplexity), true

	case "OrderLineItemEdge.cursor":
		if e.complexity.OrderLineItemEdge.Cursor == nil {
			break
		}

		return e.complexity.OrderLineItemEdge.Cursor(childComplexity), true

	case "OrderLineItemEdge.node":
		if e.complexity.OrderLineItemEdge.Node == nil {
			break
		}

		return e.complexity.OrderLineItemEdge.Node(childComplexity), true

	case "Page.body":
		if e.complexity.Page.Body == nil {
			break
		}

		return e.complexity.Page.Body(childComplexity), true

	case "Page.bodySummary":
		if e.complexity.Page.BodySummary == nil {
			break
		}

		return e.complexity.Page.BodySummary(childComplexity), true

	case "Page.createdAt":
		if e.complexity.Page.CreatedAt == nil {
			break
		}

		return e.complexity.Page.CreatedAt(childComplexity), true

	case "Page.handle":
		if e.complexity.Page.Handle == nil {
			break
		}

		return e.complexity.Page.Handle(childComplexity), true

	case "Page.id":
		if e.complexity.Page.ID == nil {
			break
		}

		return e.complexity.Page.ID(childComplexity), true

	case "Page.metafield":
		if e.complexity.Page.Metafield == nil {
			break
		}

		args, err := ec.field_Page_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Page.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Page.metafields":
		if e.complexity.Page.Metafields == nil {
			break
		}

		args, err := ec.field_Page_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Page.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Page.onlineStoreUrl":
		if e.complexity.Page.OnlineStoreURL == nil {
			break
		}

		return e.complexity.Page.OnlineStoreURL(childComplexity), true

	case "Page.seo":
		if e.complexity.Page.Seo == nil {
			break
		}

		return e.complexity.Page.Seo(childComplexity), true

	case "Page.title":
		if e.complexity.Page.Title == nil {
			break
		}

		return e.complexity.Page.Title(childComplexity), true

	case "Page.trackingParameters":
		if e.complexity.Page.TrackingParameters == nil {
			break
		}

		return e.complexity.Page.TrackingParameters(childComplexity), true

	case "Page.updatedAt":
		if e.complexity.Page.UpdatedAt == nil {
			break
		}

		return e.complexity.Page.UpdatedAt(childComplexity), true

	case "PageConnection.edges":
		if e.complexity.PageConnection.Edges == nil {
			break
		}

		return e.complexity.PageConnection.Edges(childComplexity), true

	case "PageConnection.nodes":
		if e.complexity.PageConnection.Nodes == nil {
			break
		}

		return e.complexity.PageConnection.Nodes(childComplexity), true

	case "PageConnection.pageInfo":
		if e.complexity.PageConnection.PageInfo == nil {
			break
		}

		return e.complexity.PageConnection.PageInfo(childComplexity), true

	case "PageEdge.cursor":
		if e.complexity.PageEdge.Cursor == nil {
			break
		}

		return e.complexity.PageEdge.Cursor(childComplexity), true

	case "PageEdge.node":
		if e.complexity.PageEdge.Node == nil {
			break
		}

		return e.complexity.PageEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "PaginatedSitemapResources.hasNextPage":
		if e.complexity.PaginatedSitemapResources.HasNextPage == nil {
			break
		}

		return e.complexity.PaginatedSitemapResources.HasNextPage(childComplexity), true

	case "PaginatedSitemapResources.items":
		if e.complexity.PaginatedSitemapResources.Items == nil {
			break
		}

		return e.complexity.PaginatedSitemapResources.Items(childComplexity), true

	case "Payment.amount":
		if e.complexity.Payment.Amount == nil {
			break
		}

		return e.complexity.Payment.Amount(childComplexity), true

	case "Payment.amountV2":
		if e.complexity.Payment.AmountV2 == nil {
			break
		}

		return e.complexity.Payment.AmountV2(childComplexity), true

	case "Payment.billingAddress":
		if e.complexity.Payment.BillingAddress == nil {
			break
		}

		return e.complexity.Payment.BillingAddress(childComplexity), true

	case "Payment.checkout":
		if e.complexity.Payment.Checkout == nil {
			break
		}

		return e.complexity.Payment.Checkout(childComplexity), true

	case "Payment.creditCard":
		if e.complexity.Payment.CreditCard == nil {
			break
		}

		return e.complexity.Payment.CreditCard(childComplexity), true

	case "Payment.errorMessage":
		if e.complexity.Payment.ErrorMessage == nil {
			break
		}

		return e.complexity.Payment.ErrorMessage(childComplexity), true

	case "Payment.id":
		if e.complexity.Payment.ID == nil {
			break
		}

		return e.complexity.Payment.ID(childComplexity), true

	case "Payment.idempotencyKey":
		if e.complexity.Payment.IdempotencyKey == nil {
			break
		}

		return e.complexity.Payment.IdempotencyKey(childComplexity), true

	case "Payment.nextActionUrl":
		if e.complexity.Payment.NextActionURL == nil {
			break
		}

		return e.complexity.Payment.NextActionURL(childComplexity), true

	case "Payment.ready":
		if e.complexity.Payment.Ready == nil {
			break
		}

		return e.complexity.Payment.Ready(childComplexity), true

	case "Payment.test":
		if e.complexity.Payment.Test == nil {
			break
		}

		return e.complexity.Payment.Test(childComplexity), true

	case "Payment.transaction":
		if e.complexity.Payment.Transaction == nil {
			break
		}

		return e.complexity.Payment.Transaction(childComplexity), true

	case "PaymentSettings.acceptedCardBrands":
		if e.complexity.PaymentSettings.AcceptedCardBrands == nil {
			break
		}

		return e.complexity.PaymentSettings.AcceptedCardBrands(childComplexity), true

	case "PaymentSettings.cardVaultUrl":
		if e.complexity.PaymentSettings.CardVaultURL == nil {
			break
		}

		return e.complexity.PaymentSettings.CardVaultURL(childComplexity), true

	case "PaymentSettings.countryCode":
		if e.complexity.PaymentSettings.CountryCode == nil {
			break
		}

		return e.complexity.PaymentSettings.CountryCode(childComplexity), true

	case "PaymentSettings.currencyCode":
		if e.complexity.PaymentSettings.CurrencyCode == nil {
			break
		}

		return e.complexity.PaymentSettings.CurrencyCode(childComplexity), true

	case "PaymentSettings.enabledPresentmentCurrencies":
		if e.complexity.PaymentSettings.EnabledPresentmentCurrencies == nil {
			break
		}

		return e.complexity.PaymentSettings.EnabledPresentmentCurrencies(childComplexity), true

	case "PaymentSettings.shopifyPaymentsAccountId":
		if e.complexity.PaymentSettings.ShopifyPaymentsAccountID == nil {
			break
		}

		return e.complexity.PaymentSettings.ShopifyPaymentsAccountID(childComplexity), true

	case "PaymentSettings.supportedDigitalWallets":
		if e.complexity.PaymentSettings.SupportedDigitalWallets == nil {
			break
		}

		return e.complexity.PaymentSettings.SupportedDigitalWallets(childComplexity), true

	case "PredictiveSearchResult.articles":
		if e.complexity.PredictiveSearchResult.Articles == nil {
			break
		}

		return e.complexity.PredictiveSearchResult.Articles(childComplexity), true

	case "PredictiveSearchResult.collections":
		if e.complexity.PredictiveSearchResult.Collections == nil {
			break
		}

		return e.complexity.PredictiveSearchResult.Collections(childComplexity), true

	case "PredictiveSearchResult.pages":
		if e.complexity.PredictiveSearchResult.Pages == nil {
			break
		}

		return e.complexity.PredictiveSearchResult.Pages(childComplexity), true

	case "PredictiveSearchResult.products":
		if e.complexity.PredictiveSearchResult.Products == nil {
			break
		}

		return e.complexity.PredictiveSearchResult.Products(childComplexity), true

	case "PredictiveSearchResult.queries":
		if e.complexity.PredictiveSearchResult.Queries == nil {
			break
		}

		return e.complexity.PredictiveSearchResult.Queries(childComplexity), true

	case "PricingPercentageValue.percentage":
		if e.complexity.PricingPercentageValue.Percentage == nil {
			break
		}

		return e.complexity.PricingPercentageValue.Percentage(childComplexity), true

	case "Product.adjacentVariants":
		if e.complexity.Product.AdjacentVariants == nil {
			break
		}

		args, err := ec.field_Product_adjacentVariants_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.AdjacentVariants(childComplexity, args["caseInsensitiveMatch"].(*bool), args["ignoreUnknownOptions"].(*bool), args["selectedOptions"].([]*model.SelectedOptionInput)), true

	case "Product.availableForSale":
		if e.complexity.Product.AvailableForSale == nil {
			break
		}

		return e.complexity.Product.AvailableForSale(childComplexity), true

	case "Product.category":
		if e.complexity.Product.Category == nil {
			break
		}

		return e.complexity.Product.Category(childComplexity), true

	case "Product.collections":
		if e.complexity.Product.Collections == nil {
			break
		}

		args, err := ec.field_Product_collections_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.Collections(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "Product.compareAtPriceRange":
		if e.complexity.Product.CompareAtPriceRange == nil {
			break
		}

		return e.complexity.Product.CompareAtPriceRange(childComplexity), true

	case "Product.createdAt":
		if e.complexity.Product.CreatedAt == nil {
			break
		}

		return e.complexity.Product.CreatedAt(childComplexity), true

	case "Product.description":
		if e.complexity.Product.Description == nil {
			break
		}

		args, err := ec.field_Product_description_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.Description(childComplexity, args["truncateAt"].(*int32)), true

	case "Product.descriptionHtml":
		if e.complexity.Product.DescriptionHTML == nil {
			break
		}

		return e.complexity.Product.DescriptionHTML(childComplexity), true

	case "Product.encodedVariantAvailability":
		if e.complexity.Product.EncodedVariantAvailability == nil {
			break
		}

		return e.complexity.Product.EncodedVariantAvailability(childComplexity), true

	case "Product.encodedVariantExistence":
		if e.complexity.Product.EncodedVariantExistence == nil {
			break
		}

		return e.complexity.Product.EncodedVariantExistence(childComplexity), true

	case "Product.featuredImage":
		if e.complexity.Product.FeaturedImage == nil {
			break
		}

		return e.complexity.Product.FeaturedImage(childComplexity), true

	case "Product.handle":
		if e.complexity.Product.Handle == nil {
			break
		}

		return e.complexity.Product.Handle(childComplexity), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.images":
		if e.complexity.Product.Images == nil {
			break
		}

		args, err := ec.field_Product_images_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.Images(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool), args["sortKey"].(*model.ProductImageSortKeys)), true

	case "Product.isGiftCard":
		if e.complexity.Product.IsGiftCard == nil {
			break
		}

		return e.complexity.Product.IsGiftCard(childComplexity), true

	case "Product.media":
		if e.complexity.Product.Media == nil {
			break
		}

		args, err := ec.field_Product_media_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.Media(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool), args["sortKey"].(*model.ProductMediaSortKeys)), true

	case "Product.metafield":
		if e.complexity.Product.Metafield == nil {
			break
		}

		args, err := ec.field_Product_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Product.metafields":
		if e.complexity.Product.Metafields == nil {
			break
		}

		args, err := ec.field_Product_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Product.onlineStoreUrl":
		if e.complexity.Product.OnlineStoreURL == nil {
			break
		}

		return e.complexity.Product.OnlineStoreURL(childComplexity), true

	case "Product.options":
		if e.complexity.Product.Options == nil {
			break
		}

		args, err := ec.field_Product_options_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.Options(childComplexity, args["first"].(*int32)), true

	case "Product.priceRange":
		if e.complexity.Product.PriceRange == nil {
			break
		}

		return e.complexity.Product.PriceRange(childComplexity), true

	case "Product.productType":
		if e.complexity.Product.ProductType == nil {
			break
		}

		return e.complexity.Product.ProductType(childComplexity), true

	case "Product.publishedAt":
		if e.complexity.Product.PublishedAt == nil {
			break
		}

		return e.complexity.Product.PublishedAt(childComplexity), true

	case "Product.requiresSellingPlan":
		if e.complexity.Product.RequiresSellingPlan == nil {
			break
		}

		return e.complexity.Product.RequiresSellingPlan(childComplexity), true

	case "Product.selectedOrFirstAvailableVariant":
		if e.complexity.Product.SelectedOrFirstAvailableVariant == nil {
			break
		}

		args, err := ec.field_Product_selectedOrFirstAvailableVariant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.SelectedOrFirstAvailableVariant(childComplexity, args["caseInsensitiveMatch"].(*bool), args["ignoreUnknownOptions"].(*bool), args["selectedOptions"].([]*model.SelectedOptionInput)), true

	case "Product.sellingPlanGroups":
		if e.complexity.Product.SellingPlanGroups == nil {
			break
		}

		args, err := ec.field_Product_sellingPlanGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.SellingPlanGroups(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "Product.seo":
		if e.complexity.Product.Seo == nil {
			break
		}

		return e.complexity.Product.Seo(childComplexity), true

	case "Product.tags":
		if e.complexity.Product.Tags == nil {
			break
		}

		return e.complexity.Product.Tags(childComplexity), true

	case "Product.title":
		if e.complexity.Product.Title == nil {
			break
		}

		return e.complexity.Product.Title(childComplexity), true

	case "Product.totalInventory":
		if e.complexity.Product.TotalInventory == nil {
			break
		}

		return e.complexity.Product.TotalInventory(childComplexity), true

	case "Product.trackingParameters":
		if e.complexity.Product.TrackingParameters == nil {
			break
		}

		return e.complexity.Product.TrackingParameters(childComplexity), true

	case "Product.updatedAt":
		if e.complexity.Product.UpdatedAt == nil {
			break
		}

		return e.complexity.Product.UpdatedAt(childComplexity), true

	case "Product.variantBySelectedOptions":
		if e.complexity.Product.VariantBySelectedOptions == nil {
			break
		}

		args, err := ec.field_Product_variantBySelectedOptions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.VariantBySelectedOptions(childComplexity, args["caseInsensitiveMatch"].(*bool), args["ignoreUnknownOptions"].(*bool), args["selectedOptions"].([]*model.SelectedOptionInput)), true

	case "Product.variants":
		if e.complexity.Product.Variants == nil {
			break
		}

		args, err := ec.field_Product_variants_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.Variants(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool), args["sortKey"].(*model.ProductVariantSortKeys)), true

	case "Product.variantsCount":
		if e.complexity.Product.VariantsCount == nil {
			break
		}

		return e.complexity.Product.VariantsCount(childComplexity), true

	case "Product.vendor":
		if e.complexity.Product.Vendor == nil {
			break
		}

		return e.complexity.Product.Vendor(childComplexity), true

	case "ProductConnection.edges":
		if e.complexity.ProductConnection.Edges == nil {
			break
		}

		return e.complexity.ProductConnection.Edges(childComplexity), true

	case "ProductConnection.filters":
		if e.complexity.ProductConnection.Filters == nil {
			break
		}

		return e.complexity.ProductConnection.Filters(childComplexity), true

	case "ProductConnection.nodes":
		if e.complexity.ProductConnection.Nodes == nil {
			break
		}

		return e.complexity.ProductConnection.Nodes(childComplexity), true

	case "ProductConnection.pageInfo":
		if e.complexity.ProductConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductConnection.PageInfo(childComplexity), true

	case "ProductEdge.cursor":
		if e.complexity.ProductEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductEdge.Cursor(childComplexity), true

	case "ProductEdge.node":
		if e.complexity.ProductEdge.Node == nil {
			break
		}

		return e.complexity.ProductEdge.Node(childComplexity), true

	case "ProductOption.id":
		if e.complexity.ProductOption.ID == nil {
			break
		}

		return e.complexity.ProductOption.ID(childComplexity), true

	case "ProductOption.name":
		if e.complexity.ProductOption.Name == nil {
			break
		}

		return e.complexity.ProductOption.Name(childComplexity), true

	case "ProductOption.optionValues":
		if e.complexity.ProductOption.OptionValues == nil {
			break
		}

		return e.complexity.ProductOption.OptionValues(childComplexity), true

	case "ProductOption.values":
		if e.complexity.ProductOption.Values == nil {
			break
		}

		return e.complexity.ProductOption.Values(childComplexity), true

	case "ProductOptionValue.firstSelectableVariant":
		if e.complexity.ProductOptionValue.FirstSelectableVariant == nil {
			break
		}

		return e.complexity.ProductOptionValue.FirstSelectableVariant(childComplexity), true

	case "ProductOptionValue.id":
		if e.complexity.ProductOptionValue.ID == nil {
			break
		}

		return e.complexity.ProductOptionValue.ID(childComplexity), true

	case "ProductOptionValue.name":
		if e.complexity.ProductOptionValue.Name == nil {
			break
		}

		return e.complexity.ProductOptionValue.Name(childComplexity), true

	case "ProductOptionValue.swatch":
		if e.complexity.ProductOptionValue.Swatch == nil {
			break
		}

		return e.complexity.ProductOptionValue.Swatch(childComplexity), true

	case "ProductOptionValueSwatch.color":
		if e.complexity.ProductOptionValueSwatch.Color == nil {
			break
		}

		return e.complexity.ProductOptionValueSwatch.Color(childComplexity), true

	case "ProductOptionValueSwatch.image":
		if e.complexity.ProductOptionValueSwatch.Image == nil {
			break
		}

		return e.complexity.ProductOptionValueSwatch.Image(childComplexity), true

	case "ProductPriceRange.maxVariantPrice":
		if e.complexity.ProductPriceRange.MaxVariantPrice == nil {
			break
		}

		return e.complexity.ProductPriceRange.MaxVariantPrice(childComplexity), true

	case "ProductPriceRange.minVariantPrice":
		if e.complexity.ProductPriceRange.MinVariantPrice == nil {
			break
		}

		return e.complexity.ProductPriceRange.MinVariantPrice(childComplexity), true

	case "ProductVariant.availableForSale":
		if e.complexity.ProductVariant.AvailableForSale == nil {
			break
		}

		return e.complexity.ProductVariant.AvailableForSale(childComplexity), true

	case "ProductVariant.barcode":
		if e.complexity.ProductVariant.Barcode == nil {
			break
		}

		return e.complexity.ProductVariant.Barcode(childComplexity), true

	case "ProductVariant.compareAtPrice":
		if e.complexity.ProductVariant.CompareAtPrice == nil {
			break
		}

		return e.complexity.ProductVariant.CompareAtPrice(childComplexity), true

	case "ProductVariant.compareAtPriceV2":
		if e.complexity.ProductVariant.CompareAtPriceV2 == nil {
			break
		}

		return e.complexity.ProductVariant.CompareAtPriceV2(childComplexity), true

	case "ProductVariant.components":
		if e.complexity.ProductVariant.Components == nil {
			break
		}

		args, err := ec.field_ProductVariant_components_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProductVariant.Components(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32)), true

	case "ProductVariant.currentlyNotInStock":
		if e.complexity.ProductVariant.CurrentlyNotInStock == nil {
			break
		}

		return e.complexity.ProductVariant.CurrentlyNotInStock(childComplexity), true

	case "ProductVariant.groupedBy":
		if e.complexity.ProductVariant.GroupedBy == nil {
			break
		}

		args, err := ec.field_ProductVariant_groupedBy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProductVariant.GroupedBy(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32)), true

	case "ProductVariant.id":
		if e.complexity.ProductVariant.ID == nil {
			break
		}

		return e.complexity.ProductVariant.ID(childComplexity), true

	case "ProductVariant.image":
		if e.complexity.ProductVariant.Image == nil {
			break
		}

		return e.complexity.ProductVariant.Image(childComplexity), true

	case "ProductVariant.metafield":
		if e.complexity.ProductVariant.Metafield == nil {
			break
		}

		args, err := ec.field_ProductVariant_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProductVariant.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "ProductVariant.metafields":
		if e.complexity.ProductVariant.Metafields == nil {
			break
		}

		args, err := ec.field_ProductVariant_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProductVariant.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "ProductVariant.price":
		if e.complexity.ProductVariant.Price == nil {
			break
		}

		return e.complexity.ProductVariant.Price(childComplexity), true

	case "ProductVariant.priceV2":
		if e.complexity.ProductVariant.PriceV2 == nil {
			break
		}

		return e.complexity.ProductVariant.PriceV2(childComplexity), true

	case "ProductVariant.product":
		if e.complexity.ProductVariant.Product == nil {
			break
		}

		return e.complexity.ProductVariant.Product(childComplexity), true

	case "ProductVariant.quantityAvailable":
		if e.complexity.ProductVariant.QuantityAvailable == nil {
			break
		}

		return e.complexity.ProductVariant.QuantityAvailable(childComplexity), true

	case "ProductVariant.quantityPriceBreaks":
		if e.complexity.ProductVariant.QuantityPriceBreaks == nil {
			break
		}

		args, err := ec.field_ProductVariant_quantityPriceBreaks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProductVariant.QuantityPriceBreaks(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32)), true

	case "ProductVariant.quantityRule":
		if e.complexity.ProductVariant.QuantityRule == nil {
			break
		}

		return e.complexity.ProductVariant.QuantityRule(childComplexity), true

	case "ProductVariant.requiresComponents":
		if e.complexity.ProductVariant.RequiresComponents == nil {
			break
		}

		return e.complexity.ProductVariant.RequiresComponents(childComplexity), true

	case "ProductVariant.requiresShipping":
		if e.complexity.ProductVariant.RequiresShipping == nil {
			break
		}

		return e.complexity.ProductVariant.RequiresShipping(childComplexity), true

	case "ProductVariant.selectedOptions":
		if e.complexity.ProductVariant.SelectedOptions == nil {
			break
		}

		return e.complexity.ProductVariant.SelectedOptions(childComplexity), true

	case "ProductVariant.sellingPlanAllocations":
		if e.complexity.ProductVariant.SellingPlanAllocations == nil {
			break
		}

		args, err := ec.field_ProductVariant_sellingPlanAllocations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProductVariant.SellingPlanAllocations(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "ProductVariant.shopPayInstallmentsPricing":
		if e.complexity.ProductVariant.ShopPayInstallmentsPricing == nil {
			break
		}

		return e.complexity.ProductVariant.ShopPayInstallmentsPricing(childComplexity), true

	case "ProductVariant.sku":
		if e.complexity.ProductVariant.Sku == nil {
			break
		}

		return e.complexity.ProductVariant.Sku(childComplexity), true

	case "ProductVariant.storeAvailability":
		if e.complexity.ProductVariant.StoreAvailability == nil {
			break
		}

		args, err := ec.field_ProductVariant_storeAvailability_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProductVariant.StoreAvailability(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["near"].(*model.GeoCoordinateInput), args["reverse"].(*bool)), true

	case "ProductVariant.taxable":
		if e.complexity.ProductVariant.Taxable == nil {
			break
		}

		return e.complexity.ProductVariant.Taxable(childComplexity), true

	case "ProductVariant.title":
		if e.complexity.ProductVariant.Title == nil {
			break
		}

		return e.complexity.ProductVariant.Title(childComplexity), true

	case "ProductVariant.unitPrice":
		if e.complexity.ProductVariant.UnitPrice == nil {
			break
		}

		return e.complexity.ProductVariant.UnitPrice(childComplexity), true

	case "ProductVariant.unitPriceMeasurement":
		if e.complexity.ProductVariant.UnitPriceMeasurement == nil {
			break
		}

		return e.complexity.ProductVariant.UnitPriceMeasurement(childComplexity), true

	case "ProductVariant.weight":
		if e.complexity.ProductVariant.Weight == nil {
			break
		}

		return e.complexity.ProductVariant.Weight(childComplexity), true

	case "ProductVariant.weightUnit":
		if e.complexity.ProductVariant.WeightUnit == nil {
			break
		}

		return e.complexity.ProductVariant.WeightUnit(childComplexity), true

	case "ProductVariantComponent.productVariant":
		if e.complexity.ProductVariantComponent.ProductVariant == nil {
			break
		}

		return e.complexity.ProductVariantComponent.ProductVariant(childComplexity), true

	case "ProductVariantComponent.quantity":
		if e.complexity.ProductVariantComponent.Quantity == nil {
			break
		}

		return e.complexity.ProductVariantComponent.Quantity(childComplexity), true

	case "ProductVariantComponentConnection.edges":
		if e.complexity.ProductVariantComponentConnection.Edges == nil {
			break
		}

		return e.complexity.ProductVariantComponentConnection.Edges(childComplexity), true

	case "ProductVariantComponentConnection.nodes":
		if e.complexity.ProductVariantComponentConnection.Nodes == nil {
			break
		}

		return e.complexity.ProductVariantComponentConnection.Nodes(childComplexity), true

	case "ProductVariantComponentConnection.pageInfo":
		if e.complexity.ProductVariantComponentConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductVariantComponentConnection.PageInfo(childComplexity), true

	case "ProductVariantComponentEdge.cursor":
		if e.complexity.ProductVariantComponentEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductVariantComponentEdge.Cursor(childComplexity), true

	case "ProductVariantComponentEdge.node":
		if e.complexity.ProductVariantComponentEdge.Node == nil {
			break
		}

		return e.complexity.ProductVariantComponentEdge.Node(childComplexity), true

	case "ProductVariantConnection.edges":
		if e.complexity.ProductVariantConnection.Edges == nil {
			break
		}

		return e.complexity.ProductVariantConnection.Edges(childComplexity), true

	case "ProductVariantConnection.nodes":
		if e.complexity.ProductVariantConnection.Nodes == nil {
			break
		}

		return e.complexity.ProductVariantConnection.Nodes(childComplexity), true

	case "ProductVariantConnection.pageInfo":
		if e.complexity.ProductVariantConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductVariantConnection.PageInfo(childComplexity), true

	case "ProductVariantEdge.cursor":
		if e.complexity.ProductVariantEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductVariantEdge.Cursor(childComplexity), true

	case "ProductVariantEdge.node":
		if e.complexity.ProductVariantEdge.Node == nil {
			break
		}

		return e.complexity.ProductVariantEdge.Node(childComplexity), true

	case "PurchasingCompany.company":
		if e.complexity.PurchasingCompany.Company == nil {
			break
		}

		return e.complexity.PurchasingCompany.Company(childComplexity), true

	case "PurchasingCompany.contact":
		if e.complexity.PurchasingCompany.Contact == nil {
			break
		}

		return e.complexity.PurchasingCompany.Contact(childComplexity), true

	case "PurchasingCompany.location":
		if e.complexity.PurchasingCompany.Location == nil {
			break
		}

		return e.complexity.PurchasingCompany.Location(childComplexity), true

	case "QuantityPriceBreak.minimumQuantity":
		if e.complexity.QuantityPriceBreak.MinimumQuantity == nil {
			break
		}

		return e.complexity.QuantityPriceBreak.MinimumQuantity(childComplexity), true

	case "QuantityPriceBreak.price":
		if e.complexity.QuantityPriceBreak.Price == nil {
			break
		}

		return e.complexity.QuantityPriceBreak.Price(childComplexity), true

	case "QuantityPriceBreakConnection.edges":
		if e.complexity.QuantityPriceBreakConnection.Edges == nil {
			break
		}

		return e.complexity.QuantityPriceBreakConnection.Edges(childComplexity), true

	case "QuantityPriceBreakConnection.nodes":
		if e.complexity.QuantityPriceBreakConnection.Nodes == nil {
			break
		}

		return e.complexity.QuantityPriceBreakConnection.Nodes(childComplexity), true

	case "QuantityPriceBreakConnection.pageInfo":
		if e.complexity.QuantityPriceBreakConnection.PageInfo == nil {
			break
		}

		return e.complexity.QuantityPriceBreakConnection.PageInfo(childComplexity), true

	case "QuantityPriceBreakEdge.cursor":
		if e.complexity.QuantityPriceBreakEdge.Cursor == nil {
			break
		}

		return e.complexity.QuantityPriceBreakEdge.Cursor(childComplexity), true

	case "QuantityPriceBreakEdge.node":
		if e.complexity.QuantityPriceBreakEdge.Node == nil {
			break
		}

		return e.complexity.QuantityPriceBreakEdge.Node(childComplexity), true

	case "QuantityRule.increment":
		if e.complexity.QuantityRule.Increment == nil {
			break
		}

		return e.complexity.QuantityRule.Increment(childComplexity), true

	case "QuantityRule.maximum":
		if e.complexity.QuantityRule.Maximum == nil {
			break
		}

		return e.complexity.QuantityRule.Maximum(childComplexity), true

	case "QuantityRule.minimum":
		if e.complexity.QuantityRule.Minimum == nil {
			break
		}

		return e.complexity.QuantityRule.Minimum(childComplexity), true

	case "QueryRoot.article":
		if e.complexity.QueryRoot.Article == nil {
			break
		}

		args, err := ec.field_QueryRoot_article_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Article(childComplexity, args["id"].(string)), true

	case "QueryRoot.articles":
		if e.complexity.QueryRoot.Articles == nil {
			break
		}

		args, err := ec.field_QueryRoot_articles_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Articles(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["query"].(*string), args["reverse"].(*bool), args["sortKey"].(*model.ArticleSortKeys)), true

	case "QueryRoot.blog":
		if e.complexity.QueryRoot.Blog == nil {
			break
		}

		args, err := ec.field_QueryRoot_blog_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Blog(childComplexity, args["handle"].(*string), args["id"].(*string)), true

	case "QueryRoot.blogByHandle":
		if e.complexity.QueryRoot.BlogByHandle == nil {
			break
		}

		args, err := ec.field_QueryRoot_blogByHandle_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.BlogByHandle(childComplexity, args["handle"].(string)), true

	case "QueryRoot.blogs":
		if e.complexity.QueryRoot.Blogs == nil {
			break
		}

		args, err := ec.field_QueryRoot_blogs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Blogs(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["query"].(*string), args["reverse"].(*bool), args["sortKey"].(*model.BlogSortKeys)), true

	case "QueryRoot.cart":
		if e.complexity.QueryRoot.Cart == nil {
			break
		}

		args, err := ec.field_QueryRoot_cart_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Cart(childComplexity, args["id"].(string)), true

	case "QueryRoot.cartCompletionAttempt":
		if e.complexity.QueryRoot.CartCompletionAttempt == nil {
			break
		}

		args, err := ec.field_QueryRoot_cartCompletionAttempt_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.CartCompletionAttempt(childComplexity, args["attemptId"].(string)), true

	case "QueryRoot.collection":
		if e.complexity.QueryRoot.Collection == nil {
			break
		}

		args, err := ec.field_QueryRoot_collection_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Collection(childComplexity, args["handle"].(*string), args["id"].(*string)), true

	case "QueryRoot.collectionByHandle":
		if e.complexity.QueryRoot.CollectionByHandle == nil {
			break
		}

		args, err := ec.field_QueryRoot_collectionByHandle_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.CollectionByHandle(childComplexity, args["handle"].(string)), true

	case "QueryRoot.collections":
		if e.complexity.QueryRoot.Collections == nil {
			break
		}

		args, err := ec.field_QueryRoot_collections_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Collections(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["query"].(*string), args["reverse"].(*bool), args["sortKey"].(*model.CollectionSortKeys)), true

	case "QueryRoot.customer":
		if e.complexity.QueryRoot.Customer == nil {
			break
		}

		args, err := ec.field_QueryRoot_customer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Customer(childComplexity, args["customerAccessToken"].(string)), true

	case "QueryRoot.localization":
		if e.complexity.QueryRoot.Localization == nil {
			break
		}

		return e.complexity.QueryRoot.Localization(childComplexity), true

	case "QueryRoot.locations":
		if e.complexity.QueryRoot.Locations == nil {
			break
		}

		args, err := ec.field_QueryRoot_locations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Locations(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["near"].(*model.GeoCoordinateInput), args["reverse"].(*bool), args["sortKey"].(*model.LocationSortKeys)), true

	case "QueryRoot.menu":
		if e.complexity.QueryRoot.Menu == nil {
			break
		}

		args, err := ec.field_QueryRoot_menu_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Menu(childComplexity, args["handle"].(string)), true

	case "QueryRoot.metaobject":
		if e.complexity.QueryRoot.Metaobject == nil {
			break
		}

		args, err := ec.field_QueryRoot_metaobject_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Metaobject(childComplexity, args["handle"].(*model.MetaobjectHandleInput), args["id"].(*string)), true

	case "QueryRoot.metaobjects":
		if e.complexity.QueryRoot.Metaobjects == nil {
			break
		}

		args, err := ec.field_QueryRoot_metaobjects_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Metaobjects(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool), args["sortKey"].(*string), args["type"].(string)), true

	case "QueryRoot.node":
		if e.complexity.QueryRoot.Node == nil {
			break
		}

		args, err := ec.field_QueryRoot_node_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Node(childComplexity, args["id"].(string)), true

	case "QueryRoot.nodes":
		if e.complexity.QueryRoot.Nodes == nil {
			break
		}

		args, err := ec.field_QueryRoot_nodes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Nodes(childComplexity, args["ids"].([]string)), true

	case "QueryRoot.page":
		if e.complexity.QueryRoot.Page == nil {
			break
		}

		args, err := ec.field_QueryRoot_page_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Page(childComplexity, args["handle"].(*string), args["id"].(*string)), true

	case "QueryRoot.pageByHandle":
		if e.complexity.QueryRoot.PageByHandle == nil {
			break
		}

		args, err := ec.field_QueryRoot_pageByHandle_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.PageByHandle(childComplexity, args["handle"].(string)), true

	case "QueryRoot.pages":
		if e.complexity.QueryRoot.Pages == nil {
			break
		}

		args, err := ec.field_QueryRoot_pages_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Pages(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["query"].(*string), args["reverse"].(*bool), args["sortKey"].(*model.PageSortKeys)), true

	case "QueryRoot.paymentSettings":
		if e.complexity.QueryRoot.PaymentSettings == nil {
			break
		}

		return e.complexity.QueryRoot.PaymentSettings(childComplexity), true

	case "QueryRoot.predictiveSearch":
		if e.complexity.QueryRoot.PredictiveSearch == nil {
			break
		}

		args, err := ec.field_QueryRoot_predictiveSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.PredictiveSearch(childComplexity, args["limit"].(*int32), args["limitScope"].(*model.PredictiveSearchLimitScope), args["query"].(string), args["searchableFields"].([]model.SearchableField), args["types"].([]model.PredictiveSearchType), args["unavailableProducts"].(*model.SearchUnavailableProductsType)), true

	case "QueryRoot.product":
		if e.complexity.QueryRoot.Product == nil {
			break
		}

		args, err := ec.field_QueryRoot_product_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Product(childComplexity, args["handle"].(*string), args["id"].(*string)), true

	case "QueryRoot.productByHandle":
		if e.complexity.QueryRoot.ProductByHandle == nil {
			break
		}

		args, err := ec.field_QueryRoot_productByHandle_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.ProductByHandle(childComplexity, args["handle"].(string)), true

	case "QueryRoot.productRecommendations":
		if e.complexity.QueryRoot.ProductRecommendations == nil {
			break
		}

		args, err := ec.field_QueryRoot_productRecommendations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.ProductRecommendations(childComplexity, args["intent"].(*model.ProductRecommendationIntent), args["productHandle"].(*string), args["productId"].(*string)), true

	case "QueryRoot.productTags":
		if e.complexity.QueryRoot.ProductTags == nil {
			break
		}

		args, err := ec.field_QueryRoot_productTags_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.ProductTags(childComplexity, args["first"].(int32)), true

	case "QueryRoot.productTypes":
		if e.complexity.QueryRoot.ProductTypes == nil {
			break
		}

		args, err := ec.field_QueryRoot_productTypes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.ProductTypes(childComplexity, args["first"].(int32)), true

	case "QueryRoot.products":
		if e.complexity.QueryRoot.Products == nil {
			break
		}

		args, err := ec.field_QueryRoot_products_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Products(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["query"].(*string), args["reverse"].(*bool), args["sortKey"].(*model.ProductSortKeys)), true

	case "QueryRoot.publicApiVersions":
		if e.complexity.QueryRoot.PublicAPIVersions == nil {
			break
		}

		return e.complexity.QueryRoot.PublicAPIVersions(childComplexity), true

	case "QueryRoot.search":
		if e.complexity.QueryRoot.Search == nil {
			break
		}

		args, err := ec.field_QueryRoot_search_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Search(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["prefix"].(*model.SearchPrefixQueryType), args["productFilters"].([]*model.ProductFilter), args["query"].(string), args["reverse"].(*bool), args["sortKey"].(*model.SearchSortKeys), args["types"].([]model.SearchType), args["unavailableProducts"].(*model.SearchUnavailableProductsType)), true

	case "QueryRoot.shop":
		if e.complexity.QueryRoot.Shop == nil {
			break
		}

		return e.complexity.QueryRoot.Shop(childComplexity), true

	case "QueryRoot.shopPayInstallmentsPricing":
		if e.complexity.QueryRoot.ShopPayInstallmentsPricing == nil {
			break
		}

		return e.complexity.QueryRoot.ShopPayInstallmentsPricing(childComplexity), true

	case "QueryRoot.sitemap":
		if e.complexity.QueryRoot.Sitemap == nil {
			break
		}

		args, err := ec.field_QueryRoot_sitemap_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Sitemap(childComplexity, args["type"].(model.SitemapType)), true

	case "QueryRoot.urlRedirects":
		if e.complexity.QueryRoot.URLRedirects == nil {
			break
		}

		args, err := ec.field_QueryRoot_urlRedirects_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.URLRedirects(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["query"].(*string), args["reverse"].(*bool)), true

	case "SEO.description":
		if e.complexity.SEO.Description == nil {
			break
		}

		return e.complexity.SEO.Description(childComplexity), true

	case "SEO.title":
		if e.complexity.SEO.Title == nil {
			break
		}

		return e.complexity.SEO.Title(childComplexity), true

	case "ScriptDiscountApplication.allocationMethod":
		if e.complexity.ScriptDiscountApplication.AllocationMethod == nil {
			break
		}

		return e.complexity.ScriptDiscountApplication.AllocationMethod(childComplexity), true

	case "ScriptDiscountApplication.targetSelection":
		if e.complexity.ScriptDiscountApplication.TargetSelection == nil {
			break
		}

		return e.complexity.ScriptDiscountApplication.TargetSelection(childComplexity), true

	case "ScriptDiscountApplication.targetType":
		if e.complexity.ScriptDiscountApplication.TargetType == nil {
			break
		}

		return e.complexity.ScriptDiscountApplication.TargetType(childComplexity), true

	case "ScriptDiscountApplication.title":
		if e.complexity.ScriptDiscountApplication.Title == nil {
			break
		}

		return e.complexity.ScriptDiscountApplication.Title(childComplexity), true

	case "ScriptDiscountApplication.value":
		if e.complexity.ScriptDiscountApplication.Value == nil {
			break
		}

		return e.complexity.ScriptDiscountApplication.Value(childComplexity), true

	case "SearchQuerySuggestion.styledText":
		if e.complexity.SearchQuerySuggestion.StyledText == nil {
			break
		}

		return e.complexity.SearchQuerySuggestion.StyledText(childComplexity), true

	case "SearchQuerySuggestion.text":
		if e.complexity.SearchQuerySuggestion.Text == nil {
			break
		}

		return e.complexity.SearchQuerySuggestion.Text(childComplexity), true

	case "SearchQuerySuggestion.trackingParameters":
		if e.complexity.SearchQuerySuggestion.TrackingParameters == nil {
			break
		}

		return e.complexity.SearchQuerySuggestion.TrackingParameters(childComplexity), true

	case "SearchResultItemConnection.edges":
		if e.complexity.SearchResultItemConnection.Edges == nil {
			break
		}

		return e.complexity.SearchResultItemConnection.Edges(childComplexity), true

	case "SearchResultItemConnection.nodes":
		if e.complexity.SearchResultItemConnection.Nodes == nil {
			break
		}

		return e.complexity.SearchResultItemConnection.Nodes(childComplexity), true

	case "SearchResultItemConnection.pageInfo":
		if e.complexity.SearchResultItemConnection.PageInfo == nil {
			break
		}

		return e.complexity.SearchResultItemConnection.PageInfo(childComplexity), true

	case "SearchResultItemConnection.productFilters":
		if e.complexity.SearchResultItemConnection.ProductFilters == nil {
			break
		}

		return e.complexity.SearchResultItemConnection.ProductFilters(childComplexity), true

	case "SearchResultItemConnection.totalCount":
		if e.complexity.SearchResultItemConnection.TotalCount == nil {
			break
		}

		return e.complexity.SearchResultItemConnection.TotalCount(childComplexity), true

	case "SearchResultItemEdge.cursor":
		if e.complexity.SearchResultItemEdge.Cursor == nil {
			break
		}

		return e.complexity.SearchResultItemEdge.Cursor(childComplexity), true

	case "SearchResultItemEdge.node":
		if e.complexity.SearchResultItemEdge.Node == nil {
			break
		}

		return e.complexity.SearchResultItemEdge.Node(childComplexity), true

	case "SelectedOption.name":
		if e.complexity.SelectedOption.Name == nil {
			break
		}

		return e.complexity.SelectedOption.Name(childComplexity), true

	case "SelectedOption.value":
		if e.complexity.SelectedOption.Value == nil {
			break
		}

		return e.complexity.SelectedOption.Value(childComplexity), true

	case "SellingPlan.billingPolicy":
		if e.complexity.SellingPlan.BillingPolicy == nil {
			break
		}

		return e.complexity.SellingPlan.BillingPolicy(childComplexity), true

	case "SellingPlan.checkoutCharge":
		if e.complexity.SellingPlan.CheckoutCharge == nil {
			break
		}

		return e.complexity.SellingPlan.CheckoutCharge(childComplexity), true

	case "SellingPlan.deliveryPolicy":
		if e.complexity.SellingPlan.DeliveryPolicy == nil {
			break
		}

		return e.complexity.SellingPlan.DeliveryPolicy(childComplexity), true

	case "SellingPlan.description":
		if e.complexity.SellingPlan.Description == nil {
			break
		}

		return e.complexity.SellingPlan.Description(childComplexity), true

	case "SellingPlan.id":
		if e.complexity.SellingPlan.ID == nil {
			break
		}

		return e.complexity.SellingPlan.ID(childComplexity), true

	case "SellingPlan.metafield":
		if e.complexity.SellingPlan.Metafield == nil {
			break
		}

		args, err := ec.field_SellingPlan_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SellingPlan.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "SellingPlan.metafields":
		if e.complexity.SellingPlan.Metafields == nil {
			break
		}

		args, err := ec.field_SellingPlan_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SellingPlan.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "SellingPlan.name":
		if e.complexity.SellingPlan.Name == nil {
			break
		}

		return e.complexity.SellingPlan.Name(childComplexity), true

	case "SellingPlan.options":
		if e.complexity.SellingPlan.Options == nil {
			break
		}

		return e.complexity.SellingPlan.Options(childComplexity), true

	case "SellingPlan.priceAdjustments":
		if e.complexity.SellingPlan.PriceAdjustments == nil {
			break
		}

		return e.complexity.SellingPlan.PriceAdjustments(childComplexity), true

	case "SellingPlan.recurringDeliveries":
		if e.complexity.SellingPlan.RecurringDeliveries == nil {
			break
		}

		return e.complexity.SellingPlan.RecurringDeliveries(childComplexity), true

	case "SellingPlanAllocation.checkoutChargeAmount":
		if e.complexity.SellingPlanAllocation.CheckoutChargeAmount == nil {
			break
		}

		return e.complexity.SellingPlanAllocation.CheckoutChargeAmount(childComplexity), true

	case "SellingPlanAllocation.priceAdjustments":
		if e.complexity.SellingPlanAllocation.PriceAdjustments == nil {
			break
		}

		return e.complexity.SellingPlanAllocation.PriceAdjustments(childComplexity), true

	case "SellingPlanAllocation.remainingBalanceChargeAmount":
		if e.complexity.SellingPlanAllocation.RemainingBalanceChargeAmount == nil {
			break
		}

		return e.complexity.SellingPlanAllocation.RemainingBalanceChargeAmount(childComplexity), true

	case "SellingPlanAllocation.sellingPlan":
		if e.complexity.SellingPlanAllocation.SellingPlan == nil {
			break
		}

		return e.complexity.SellingPlanAllocation.SellingPlan(childComplexity), true

	case "SellingPlanAllocationConnection.edges":
		if e.complexity.SellingPlanAllocationConnection.Edges == nil {
			break
		}

		return e.complexity.SellingPlanAllocationConnection.Edges(childComplexity), true

	case "SellingPlanAllocationConnection.nodes":
		if e.complexity.SellingPlanAllocationConnection.Nodes == nil {
			break
		}

		return e.complexity.SellingPlanAllocationConnection.Nodes(childComplexity), true

	case "SellingPlanAllocationConnection.pageInfo":
		if e.complexity.SellingPlanAllocationConnection.PageInfo == nil {
			break
		}

		return e.complexity.SellingPlanAllocationConnection.PageInfo(childComplexity), true

	case "SellingPlanAllocationEdge.cursor":
		if e.complexity.SellingPlanAllocationEdge.Cursor == nil {
			break
		}

		return e.complexity.SellingPlanAllocationEdge.Cursor(childComplexity), true

	case "SellingPlanAllocationEdge.node":
		if e.complexity.SellingPlanAllocationEdge.Node == nil {
			break
		}

		return e.complexity.SellingPlanAllocationEdge.Node(childComplexity), true

	case "SellingPlanAllocationPriceAdjustment.compareAtPrice":
		if e.complexity.SellingPlanAllocationPriceAdjustment.CompareAtPrice == nil {
			break
		}

		return e.complexity.SellingPlanAllocationPriceAdjustment.CompareAtPrice(childComplexity), true

	case "SellingPlanAllocationPriceAdjustment.perDeliveryPrice":
		if e.complexity.SellingPlanAllocationPriceAdjustment.PerDeliveryPrice == nil {
			break
		}

		return e.complexity.SellingPlanAllocationPriceAdjustment.PerDeliveryPrice(childComplexity), true

	case "SellingPlanAllocationPriceAdjustment.price":
		if e.complexity.SellingPlanAllocationPriceAdjustment.Price == nil {
			break
		}

		return e.complexity.SellingPlanAllocationPriceAdjustment.Price(childComplexity), true

	case "SellingPlanAllocationPriceAdjustment.unitPrice":
		if e.complexity.SellingPlanAllocationPriceAdjustment.UnitPrice == nil {
			break
		}

		return e.complexity.SellingPlanAllocationPriceAdjustment.UnitPrice(childComplexity), true

	case "SellingPlanCheckoutCharge.type":
		if e.complexity.SellingPlanCheckoutCharge.Type == nil {
			break
		}

		return e.complexity.SellingPlanCheckoutCharge.Type(childComplexity), true

	case "SellingPlanCheckoutCharge.value":
		if e.complexity.SellingPlanCheckoutCharge.Value == nil {
			break
		}

		return e.complexity.SellingPlanCheckoutCharge.Value(childComplexity), true

	case "SellingPlanCheckoutChargePercentageValue.percentage":
		if e.complexity.SellingPlanCheckoutChargePercentageValue.Percentage == nil {
			break
		}

		return e.complexity.SellingPlanCheckoutChargePercentageValue.Percentage(childComplexity), true

	case "SellingPlanConnection.edges":
		if e.complexity.SellingPlanConnection.Edges == nil {
			break
		}

		return e.complexity.SellingPlanConnection.Edges(childComplexity), true

	case "SellingPlanConnection.nodes":
		if e.complexity.SellingPlanConnection.Nodes == nil {
			break
		}

		return e.complexity.SellingPlanConnection.Nodes(childComplexity), true

	case "SellingPlanConnection.pageInfo":
		if e.complexity.SellingPlanConnection.PageInfo == nil {
			break
		}

		return e.complexity.SellingPlanConnection.PageInfo(childComplexity), true

	case "SellingPlanEdge.cursor":
		if e.complexity.SellingPlanEdge.Cursor == nil {
			break
		}

		return e.complexity.SellingPlanEdge.Cursor(childComplexity), true

	case "SellingPlanEdge.node":
		if e.complexity.SellingPlanEdge.Node == nil {
			break
		}

		return e.complexity.SellingPlanEdge.Node(childComplexity), true

	case "SellingPlanFixedAmountPriceAdjustment.adjustmentAmount":
		if e.complexity.SellingPlanFixedAmountPriceAdjustment.AdjustmentAmount == nil {
			break
		}

		return e.complexity.SellingPlanFixedAmountPriceAdjustment.AdjustmentAmount(childComplexity), true

	case "SellingPlanFixedPriceAdjustment.price":
		if e.complexity.SellingPlanFixedPriceAdjustment.Price == nil {
			break
		}

		return e.complexity.SellingPlanFixedPriceAdjustment.Price(childComplexity), true

	case "SellingPlanGroup.appName":
		if e.complexity.SellingPlanGroup.AppName == nil {
			break
		}

		return e.complexity.SellingPlanGroup.AppName(childComplexity), true

	case "SellingPlanGroup.name":
		if e.complexity.SellingPlanGroup.Name == nil {
			break
		}

		return e.complexity.SellingPlanGroup.Name(childComplexity), true

	case "SellingPlanGroup.options":
		if e.complexity.SellingPlanGroup.Options == nil {
			break
		}

		return e.complexity.SellingPlanGroup.Options(childComplexity), true

	case "SellingPlanGroup.sellingPlans":
		if e.complexity.SellingPlanGroup.SellingPlans == nil {
			break
		}

		args, err := ec.field_SellingPlanGroup_sellingPlans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SellingPlanGroup.SellingPlans(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int32), args["last"].(*int32), args["reverse"].(*bool)), true

	case "SellingPlanGroupConnection.edges":
		if e.complexity.SellingPlanGroupConnection.Edges == nil {
			break
		}

		return e.complexity.SellingPlanGroupConnection.Edges(childComplexity), true

	case "SellingPlanGroupConnection.nodes":
		if e.complexity.SellingPlanGroupConnection.Nodes == nil {
			break
		}

		return e.complexity.SellingPlanGroupConnection.Nodes(childComplexity), true

	case "SellingPlanGroupConnection.pageInfo":
		if e.complexity.SellingPlanGroupConnection.PageInfo == nil {
			break
		}

		return e.complexity.SellingPlanGroupConnection.PageInfo(childComplexity), true

	case "SellingPlanGroupEdge.cursor":
		if e.complexity.SellingPlanGroupEdge.Cursor == nil {
			break
		}

		return e.complexity.SellingPlanGroupEdge.Cursor(childComplexity), true

	case "SellingPlanGroupEdge.node":
		if e.complexity.SellingPlanGroupEdge.Node == nil {
			break
		}

		return e.complexity.SellingPlanGroupEdge.Node(childComplexity), true

	case "SellingPlanGroupOption.name":
		if e.complexity.SellingPlanGroupOption.Name == nil {
			break
		}

		return e.complexity.SellingPlanGroupOption.Name(childComplexity), true

	case "SellingPlanGroupOption.values":
		if e.complexity.SellingPlanGroupOption.Values == nil {
			break
		}

		return e.complexity.SellingPlanGroupOption.Values(childComplexity), true

	case "SellingPlanOption.name":
		if e.complexity.SellingPlanOption.Name == nil {
			break
		}

		return e.complexity.SellingPlanOption.Name(childComplexity), true

	case "SellingPlanOption.value":
		if e.complexity.SellingPlanOption.Value == nil {
			break
		}

		return e.complexity.SellingPlanOption.Value(childComplexity), true

	case "SellingPlanPercentagePriceAdjustment.adjustmentPercentage":
		if e.complexity.SellingPlanPercentagePriceAdjustment.AdjustmentPercentage == nil {
			break
		}

		return e.complexity.SellingPlanPercentagePriceAdjustment.AdjustmentPercentage(childComplexity), true

	case "SellingPlanPriceAdjustment.adjustmentValue":
		if e.complexity.SellingPlanPriceAdjustment.AdjustmentValue == nil {
			break
		}

		return e.complexity.SellingPlanPriceAdjustment.AdjustmentValue(childComplexity), true

	case "SellingPlanPriceAdjustment.orderCount":
		if e.complexity.SellingPlanPriceAdjustment.OrderCount == nil {
			break
		}

		return e.complexity.SellingPlanPriceAdjustment.OrderCount(childComplexity), true

	case "SellingPlanRecurringBillingPolicy.interval":
		if e.complexity.SellingPlanRecurringBillingPolicy.Interval == nil {
			break
		}

		return e.complexity.SellingPlanRecurringBillingPolicy.Interval(childComplexity), true

	case "SellingPlanRecurringBillingPolicy.intervalCount":
		if e.complexity.SellingPlanRecurringBillingPolicy.IntervalCount == nil {
			break
		}

		return e.complexity.SellingPlanRecurringBillingPolicy.IntervalCount(childComplexity), true

	case "SellingPlanRecurringDeliveryPolicy.interval":
		if e.complexity.SellingPlanRecurringDeliveryPolicy.Interval == nil {
			break
		}

		return e.complexity.SellingPlanRecurringDeliveryPolicy.Interval(childComplexity), true

	case "SellingPlanRecurringDeliveryPolicy.intervalCount":
		if e.complexity.SellingPlanRecurringDeliveryPolicy.IntervalCount == nil {
			break
		}

		return e.complexity.SellingPlanRecurringDeliveryPolicy.IntervalCount(childComplexity), true

	case "ShippingRate.handle":
		if e.complexity.ShippingRate.Handle == nil {
			break
		}

		return e.complexity.ShippingRate.Handle(childComplexity), true

	case "ShippingRate.price":
		if e.complexity.ShippingRate.Price == nil {
			break
		}

		return e.complexity.ShippingRate.Price(childComplexity), true

	case "ShippingRate.priceV2":
		if e.complexity.ShippingRate.PriceV2 == nil {
			break
		}

		return e.complexity.ShippingRate.PriceV2(childComplexity), true

	case "ShippingRate.title":
		if e.complexity.ShippingRate.Title == nil {
			break
		}

		return e.complexity.ShippingRate.Title(childComplexity), true

	case "Shop.brand":
		if e.complexity.Shop.Brand == nil {
			break
		}

		return e.complexity.Shop.Brand(childComplexity), true

	case "Shop.customerAccountUrl":
		if e.complexity.Shop.CustomerAccountURL == nil {
			break
		}

		return e.complexity.Shop.CustomerAccountURL(childComplexity), true

	case "Shop.description":
		if e.complexity.Shop.Description == nil {
			break
		}

		return e.complexity.Shop.Description(childComplexity), true

	case "Shop.id":
		if e.complexity.Shop.ID == nil {
			break
		}

		return e.complexity.Shop.ID(childComplexity), true

	case "Shop.metafield":
		if e.complexity.Shop.Metafield == nil {
			break
		}

		args, err := ec.field_Shop_metafield_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Shop.Metafield(childComplexity, args["key"].(string), args["namespace"].(*string)), true

	case "Shop.metafields":
		if e.complexity.Shop.Metafields == nil {
			break
		}

		args, err := ec.field_Shop_metafields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Shop.Metafields(childComplexity, args["identifiers"].([]*model.HasMetafieldsIdentifier)), true

	case "Shop.moneyFormat":
		if e.complexity.Shop.MoneyFormat == nil {
			break
		}

		return e.complexity.Shop.MoneyFormat(childComplexity), true

	case "Shop.name":
		if e.complexity.Shop.Name == nil {
			break
		}

		return e.complexity.Shop.Name(childComplexity), true

	case "Shop.paymentSettings":
		if e.complexity.Shop.PaymentSettings == nil {
			break
		}

		return e.complexity.Shop.PaymentSettings(childComplexity), true

	case "Shop.primaryDomain":
		if e.complexity.Shop.PrimaryDomain == nil {
			break
		}

		return e.complexity.Shop.PrimaryDomain(childComplexity), true

	case "Shop.privacyPolicy":
		if e.complexity.Shop.PrivacyPolicy == nil {
			break
		}

		return e.complexity.Shop.PrivacyPolicy(childComplexity), true

	case "Shop.refundPolicy":
		if e.complexity.Shop.RefundPolicy == nil {
			break
		}

		return e.complexity.Shop.RefundPolicy(childComplexity), true

	case "Shop.shippingPolicy":
		if e.complexity.Shop.ShippingPolicy == nil {
			break
		}

		return e.complexity.Shop.ShippingPolicy(childComplexity), true

	case "Shop.shipsToCountries":
		if e.complexity.Shop.ShipsToCountries == nil {
			break
		}

		return e.complexity.Shop.ShipsToCountries(childComplexity), true

	case "Shop.shopPayInstallmentsPricing":
		if e.complexity.Shop.ShopPayInstallmentsPricing == nil {
			break
		}

		return e.complexity.Shop.ShopPayInstallmentsPricing(childComplexity), true

	case "Shop.subscriptionPolicy":
		if e.complexity.Shop.SubscriptionPolicy == nil {
			break
		}

		return e.complexity.Shop.SubscriptionPolicy(childComplexity), true

	case "Shop.termsOfService":
		if e.complexity.Shop.TermsOfService == nil {
			break
		}

		return e.complexity.Shop.TermsOfService(childComplexity), true

	case "ShopPayInstallmentsFinancingPlan.id":
		if e.complexity.ShopPayInstallmentsFinancingPlan.ID == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsFinancingPlan.ID(childComplexity), true

	case "ShopPayInstallmentsFinancingPlan.maxPrice":
		if e.complexity.ShopPayInstallmentsFinancingPlan.MaxPrice == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsFinancingPlan.MaxPrice(childComplexity), true

	case "ShopPayInstallmentsFinancingPlan.minPrice":
		if e.complexity.ShopPayInstallmentsFinancingPlan.MinPrice == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsFinancingPlan.MinPrice(childComplexity), true

	case "ShopPayInstallmentsFinancingPlan.terms":
		if e.complexity.ShopPayInstallmentsFinancingPlan.Terms == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsFinancingPlan.Terms(childComplexity), true

	case "ShopPayInstallmentsFinancingPlanTerm.apr":
		if e.complexity.ShopPayInstallmentsFinancingPlanTerm.Apr == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsFinancingPlanTerm.Apr(childComplexity), true

	case "ShopPayInstallmentsFinancingPlanTerm.frequency":
		if e.complexity.ShopPayInstallmentsFinancingPlanTerm.Frequency == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsFinancingPlanTerm.Frequency(childComplexity), true

	case "ShopPayInstallmentsFinancingPlanTerm.id":
		if e.complexity.ShopPayInstallmentsFinancingPlanTerm.ID == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsFinancingPlanTerm.ID(childComplexity), true

	case "ShopPayInstallmentsFinancingPlanTerm.installmentsCount":
		if e.complexity.ShopPayInstallmentsFinancingPlanTerm.InstallmentsCount == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsFinancingPlanTerm.InstallmentsCount(childComplexity), true

	case "ShopPayInstallmentsFinancingPlanTerm.loanType":
		if e.complexity.ShopPayInstallmentsFinancingPlanTerm.LoanType == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsFinancingPlanTerm.LoanType(childComplexity), true

	case "ShopPayInstallmentsPricing.financingPlans":
		if e.complexity.ShopPayInstallmentsPricing.FinancingPlans == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsPricing.FinancingPlans(childComplexity), true

	case "ShopPayInstallmentsPricing.maxPrice":
		if e.complexity.ShopPayInstallmentsPricing.MaxPrice == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsPricing.MaxPrice(childComplexity), true

	case "ShopPayInstallmentsPricing.minPrice":
		if e.complexity.ShopPayInstallmentsPricing.MinPrice == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsPricing.MinPrice(childComplexity), true

	case "ShopPayInstallmentsPricing.productVariantPricing":
		if e.complexity.ShopPayInstallmentsPricing.ProductVariantPricing == nil {
			break
		}

		args, err := ec.field_ShopPayInstallmentsPricing_productVariantPricing_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ShopPayInstallmentsPricing.ProductVariantPricing(childComplexity, args["variantId"].(string)), true

	case "ShopPayInstallmentsProductVariantPricing.available":
		if e.complexity.ShopPayInstallmentsProductVariantPricing.Available == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsProductVariantPricing.Available(childComplexity), true

	case "ShopPayInstallmentsProductVariantPricing.eligible":
		if e.complexity.ShopPayInstallmentsProductVariantPricing.Eligible == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsProductVariantPricing.Eligible(childComplexity), true

	case "ShopPayInstallmentsProductVariantPricing.fullPrice":
		if e.complexity.ShopPayInstallmentsProductVariantPricing.FullPrice == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsProductVariantPricing.FullPrice(childComplexity), true

	case "ShopPayInstallmentsProductVariantPricing.id":
		if e.complexity.ShopPayInstallmentsProductVariantPricing.ID == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsProductVariantPricing.ID(childComplexity), true

	case "ShopPayInstallmentsProductVariantPricing.installmentsCount":
		if e.complexity.ShopPayInstallmentsProductVariantPricing.InstallmentsCount == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsProductVariantPricing.InstallmentsCount(childComplexity), true

	case "ShopPayInstallmentsProductVariantPricing.pricePerTerm":
		if e.complexity.ShopPayInstallmentsProductVariantPricing.PricePerTerm == nil {
			break
		}

		return e.complexity.ShopPayInstallmentsProductVariantPricing.PricePerTerm(childComplexity), true

	case "ShopPayPaymentRequest.deliveryMethods":
		if e.complexity.ShopPayPaymentRequest.DeliveryMethods == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.DeliveryMethods(childComplexity), true

	case "ShopPayPaymentRequest.discountCodes":
		if e.complexity.ShopPayPaymentRequest.DiscountCodes == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.DiscountCodes(childComplexity), true

	case "ShopPayPaymentRequest.discounts":
		if e.complexity.ShopPayPaymentRequest.Discounts == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.Discounts(childComplexity), true

	case "ShopPayPaymentRequest.lineItems":
		if e.complexity.ShopPayPaymentRequest.LineItems == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.LineItems(childComplexity), true

	case "ShopPayPaymentRequest.locale":
		if e.complexity.ShopPayPaymentRequest.Locale == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.Locale(childComplexity), true

	case "ShopPayPaymentRequest.presentmentCurrency":
		if e.complexity.ShopPayPaymentRequest.PresentmentCurrency == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.PresentmentCurrency(childComplexity), true

	case "ShopPayPaymentRequest.selectedDeliveryMethodType":
		if e.complexity.ShopPayPaymentRequest.SelectedDeliveryMethodType == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.SelectedDeliveryMethodType(childComplexity), true

	case "ShopPayPaymentRequest.shippingAddress":
		if e.complexity.ShopPayPaymentRequest.ShippingAddress == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.ShippingAddress(childComplexity), true

	case "ShopPayPaymentRequest.shippingLines":
		if e.complexity.ShopPayPaymentRequest.ShippingLines == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.ShippingLines(childComplexity), true

	case "ShopPayPaymentRequest.subtotal":
		if e.complexity.ShopPayPaymentRequest.Subtotal == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.Subtotal(childComplexity), true

	case "ShopPayPaymentRequest.total":
		if e.complexity.ShopPayPaymentRequest.Total == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.Total(childComplexity), true

	case "ShopPayPaymentRequest.totalShippingPrice":
		if e.complexity.ShopPayPaymentRequest.TotalShippingPrice == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.TotalShippingPrice(childComplexity), true

	case "ShopPayPaymentRequest.totalTax":
		if e.complexity.ShopPayPaymentRequest.TotalTax == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequest.TotalTax(childComplexity), true

	case "ShopPayPaymentRequestContactField.address1":
		if e.complexity.ShopPayPaymentRequestContactField.Address1 == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.Address1(childComplexity), true

	case "ShopPayPaymentRequestContactField.address2":
		if e.complexity.ShopPayPaymentRequestContactField.Address2 == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.Address2(childComplexity), true

	case "ShopPayPaymentRequestContactField.city":
		if e.complexity.ShopPayPaymentRequestContactField.City == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.City(childComplexity), true

	case "ShopPayPaymentRequestContactField.companyName":
		if e.complexity.ShopPayPaymentRequestContactField.CompanyName == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.CompanyName(childComplexity), true

	case "ShopPayPaymentRequestContactField.countryCode":
		if e.complexity.ShopPayPaymentRequestContactField.CountryCode == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.CountryCode(childComplexity), true

	case "ShopPayPaymentRequestContactField.email":
		if e.complexity.ShopPayPaymentRequestContactField.Email == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.Email(childComplexity), true

	case "ShopPayPaymentRequestContactField.firstName":
		if e.complexity.ShopPayPaymentRequestContactField.FirstName == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.FirstName(childComplexity), true

	case "ShopPayPaymentRequestContactField.lastName":
		if e.complexity.ShopPayPaymentRequestContactField.LastName == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.LastName(childComplexity), true

	case "ShopPayPaymentRequestContactField.phone":
		if e.complexity.ShopPayPaymentRequestContactField.Phone == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.Phone(childComplexity), true

	case "ShopPayPaymentRequestContactField.postalCode":
		if e.complexity.ShopPayPaymentRequestContactField.PostalCode == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.PostalCode(childComplexity), true

	case "ShopPayPaymentRequestContactField.provinceCode":
		if e.complexity.ShopPayPaymentRequestContactField.ProvinceCode == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestContactField.ProvinceCode(childComplexity), true

	case "ShopPayPaymentRequestDeliveryMethod.amount":
		if e.complexity.ShopPayPaymentRequestDeliveryMethod.Amount == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestDeliveryMethod.Amount(childComplexity), true

	case "ShopPayPaymentRequestDeliveryMethod.code":
		if e.complexity.ShopPayPaymentRequestDeliveryMethod.Code == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestDeliveryMethod.Code(childComplexity), true

	case "ShopPayPaymentRequestDeliveryMethod.deliveryExpectationLabel":
		if e.complexity.ShopPayPaymentRequestDeliveryMethod.DeliveryExpectationLabel == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestDeliveryMethod.DeliveryExpectationLabel(childComplexity), true

	case "ShopPayPaymentRequestDeliveryMethod.detail":
		if e.complexity.ShopPayPaymentRequestDeliveryMethod.Detail == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestDeliveryMethod.Detail(childComplexity), true

	case "ShopPayPaymentRequestDeliveryMethod.label":
		if e.complexity.ShopPayPaymentRequestDeliveryMethod.Label == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestDeliveryMethod.Label(childComplexity), true

	case "ShopPayPaymentRequestDeliveryMethod.maxDeliveryDate":
		if e.complexity.ShopPayPaymentRequestDeliveryMethod.MaxDeliveryDate == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestDeliveryMethod.MaxDeliveryDate(childComplexity), true

	case "ShopPayPaymentRequestDeliveryMethod.minDeliveryDate":
		if e.complexity.ShopPayPaymentRequestDeliveryMethod.MinDeliveryDate == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestDeliveryMethod.MinDeliveryDate(childComplexity), true

	case "ShopPayPaymentRequestDiscount.amount":
		if e.complexity.ShopPayPaymentRequestDiscount.Amount == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestDiscount.Amount(childComplexity), true

	case "ShopPayPaymentRequestDiscount.label":
		if e.complexity.ShopPayPaymentRequestDiscount.Label == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestDiscount.Label(childComplexity), true

	case "ShopPayPaymentRequestImage.alt":
		if e.complexity.ShopPayPaymentRequestImage.Alt == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestImage.Alt(childComplexity), true

	case "ShopPayPaymentRequestImage.url":
		if e.complexity.ShopPayPaymentRequestImage.URL == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestImage.URL(childComplexity), true

	case "ShopPayPaymentRequestLineItem.finalItemPrice":
		if e.complexity.ShopPayPaymentRequestLineItem.FinalItemPrice == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.FinalItemPrice(childComplexity), true

	case "ShopPayPaymentRequestLineItem.finalLinePrice":
		if e.complexity.ShopPayPaymentRequestLineItem.FinalLinePrice == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.FinalLinePrice(childComplexity), true

	case "ShopPayPaymentRequestLineItem.image":
		if e.complexity.ShopPayPaymentRequestLineItem.Image == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.Image(childComplexity), true

	case "ShopPayPaymentRequestLineItem.itemDiscounts":
		if e.complexity.ShopPayPaymentRequestLineItem.ItemDiscounts == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.ItemDiscounts(childComplexity), true

	case "ShopPayPaymentRequestLineItem.label":
		if e.complexity.ShopPayPaymentRequestLineItem.Label == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.Label(childComplexity), true

	case "ShopPayPaymentRequestLineItem.lineDiscounts":
		if e.complexity.ShopPayPaymentRequestLineItem.LineDiscounts == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.LineDiscounts(childComplexity), true

	case "ShopPayPaymentRequestLineItem.originalItemPrice":
		if e.complexity.ShopPayPaymentRequestLineItem.OriginalItemPrice == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.OriginalItemPrice(childComplexity), true

	case "ShopPayPaymentRequestLineItem.originalLinePrice":
		if e.complexity.ShopPayPaymentRequestLineItem.OriginalLinePrice == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.OriginalLinePrice(childComplexity), true

	case "ShopPayPaymentRequestLineItem.quantity":
		if e.complexity.ShopPayPaymentRequestLineItem.Quantity == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.Quantity(childComplexity), true

	case "ShopPayPaymentRequestLineItem.requiresShipping":
		if e.complexity.ShopPayPaymentRequestLineItem.RequiresShipping == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.RequiresShipping(childComplexity), true

	case "ShopPayPaymentRequestLineItem.sku":
		if e.complexity.ShopPayPaymentRequestLineItem.Sku == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestLineItem.Sku(childComplexity), true

	case "ShopPayPaymentRequestReceipt.paymentRequest":
		if e.complexity.ShopPayPaymentRequestReceipt.PaymentRequest == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestReceipt.PaymentRequest(childComplexity), true

	case "ShopPayPaymentRequestReceipt.processingStatusType":
		if e.complexity.ShopPayPaymentRequestReceipt.ProcessingStatusType == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestReceipt.ProcessingStatusType(childComplexity), true

	case "ShopPayPaymentRequestReceipt.token":
		if e.complexity.ShopPayPaymentRequestReceipt.Token == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestReceipt.Token(childComplexity), true

	case "ShopPayPaymentRequestSession.checkoutUrl":
		if e.complexity.ShopPayPaymentRequestSession.CheckoutURL == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestSession.CheckoutURL(childComplexity), true

	case "ShopPayPaymentRequestSession.paymentRequest":
		if e.complexity.ShopPayPaymentRequestSession.PaymentRequest == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestSession.PaymentRequest(childComplexity), true

	case "ShopPayPaymentRequestSession.sourceIdentifier":
		if e.complexity.ShopPayPaymentRequestSession.SourceIdentifier == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestSession.SourceIdentifier(childComplexity), true

	case "ShopPayPaymentRequestSession.token":
		if e.complexity.ShopPayPaymentRequestSession.Token == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestSession.Token(childComplexity), true

	case "ShopPayPaymentRequestSessionCreatePayload.shopPayPaymentRequestSession":
		if e.complexity.ShopPayPaymentRequestSessionCreatePayload.ShopPayPaymentRequestSession == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestSessionCreatePayload.ShopPayPaymentRequestSession(childComplexity), true

	case "ShopPayPaymentRequestSessionCreatePayload.userErrors":
		if e.complexity.ShopPayPaymentRequestSessionCreatePayload.UserErrors == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestSessionCreatePayload.UserErrors(childComplexity), true

	case "ShopPayPaymentRequestSessionSubmitPayload.paymentRequestReceipt":
		if e.complexity.ShopPayPaymentRequestSessionSubmitPayload.PaymentRequestReceipt == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestSessionSubmitPayload.PaymentRequestReceipt(childComplexity), true

	case "ShopPayPaymentRequestSessionSubmitPayload.userErrors":
		if e.complexity.ShopPayPaymentRequestSessionSubmitPayload.UserErrors == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestSessionSubmitPayload.UserErrors(childComplexity), true

	case "ShopPayPaymentRequestShippingLine.amount":
		if e.complexity.ShopPayPaymentRequestShippingLine.Amount == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestShippingLine.Amount(childComplexity), true

	case "ShopPayPaymentRequestShippingLine.code":
		if e.complexity.ShopPayPaymentRequestShippingLine.Code == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestShippingLine.Code(childComplexity), true

	case "ShopPayPaymentRequestShippingLine.label":
		if e.complexity.ShopPayPaymentRequestShippingLine.Label == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestShippingLine.Label(childComplexity), true

	case "ShopPayPaymentRequestTotalShippingPrice.discounts":
		if e.complexity.ShopPayPaymentRequestTotalShippingPrice.Discounts == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestTotalShippingPrice.Discounts(childComplexity), true

	case "ShopPayPaymentRequestTotalShippingPrice.finalTotal":
		if e.complexity.ShopPayPaymentRequestTotalShippingPrice.FinalTotal == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestTotalShippingPrice.FinalTotal(childComplexity), true

	case "ShopPayPaymentRequestTotalShippingPrice.originalTotal":
		if e.complexity.ShopPayPaymentRequestTotalShippingPrice.OriginalTotal == nil {
			break
		}

		return e.complexity.ShopPayPaymentRequestTotalShippingPrice.OriginalTotal(childComplexity), true

	case "ShopPolicy.body":
		if e.complexity.ShopPolicy.Body == nil {
			break
		}

		return e.complexity.ShopPolicy.Body(childComplexity), true

	case "ShopPolicy.handle":
		if e.complexity.ShopPolicy.Handle == nil {
			break
		}

		return e.complexity.ShopPolicy.Handle(childComplexity), true

	case "ShopPolicy.id":
		if e.complexity.ShopPolicy.ID == nil {
			break
		}

		return e.complexity.ShopPolicy.ID(childComplexity), true

	case "ShopPolicy.title":
		if e.complexity.ShopPolicy.Title == nil {
			break
		}

		return e.complexity.ShopPolicy.Title(childComplexity), true

	case "ShopPolicy.url":
		if e.complexity.ShopPolicy.URL == nil {
			break
		}

		return e.complexity.ShopPolicy.URL(childComplexity), true

	case "ShopPolicyWithDefault.body":
		if e.complexity.ShopPolicyWithDefault.Body == nil {
			break
		}

		return e.complexity.ShopPolicyWithDefault.Body(childComplexity), true

	case "ShopPolicyWithDefault.handle":
		if e.complexity.ShopPolicyWithDefault.Handle == nil {
			break
		}

		return e.complexity.ShopPolicyWithDefault.Handle(childComplexity), true

	case "ShopPolicyWithDefault.id":
		if e.complexity.ShopPolicyWithDefault.ID == nil {
			break
		}

		return e.complexity.ShopPolicyWithDefault.ID(childComplexity), true

	case "ShopPolicyWithDefault.title":
		if e.complexity.ShopPolicyWithDefault.Title == nil {
			break
		}

		return e.complexity.ShopPolicyWithDefault.Title(childComplexity), true

	case "ShopPolicyWithDefault.url":
		if e.complexity.ShopPolicyWithDefault.URL == nil {
			break
		}

		return e.complexity.ShopPolicyWithDefault.URL(childComplexity), true

	case "Sitemap.pagesCount":
		if e.complexity.Sitemap.PagesCount == nil {
			break
		}

		return e.complexity.Sitemap.PagesCount(childComplexity), true

	case "Sitemap.resources":
		if e.complexity.Sitemap.Resources == nil {
			break
		}

		args, err := ec.field_Sitemap_resources_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Sitemap.Resources(childComplexity, args["page"].(int32)), true

	case "SitemapImage.alt":
		if e.complexity.SitemapImage.Alt == nil {
			break
		}

		return e.complexity.SitemapImage.Alt(childComplexity), true

	case "SitemapImage.filepath":
		if e.complexity.SitemapImage.Filepath == nil {
			break
		}

		return e.complexity.SitemapImage.Filepath(childComplexity), true

	case "SitemapImage.updatedAt":
		if e.complexity.SitemapImage.UpdatedAt == nil {
			break
		}

		return e.complexity.SitemapImage.UpdatedAt(childComplexity), true

	case "SitemapResource.handle":
		if e.complexity.SitemapResource.Handle == nil {
			break
		}

		return e.complexity.SitemapResource.Handle(childComplexity), true

	case "SitemapResource.image":
		if e.complexity.SitemapResource.Image == nil {
			break
		}

		return e.complexity.SitemapResource.Image(childComplexity), true

	case "SitemapResource.title":
		if e.complexity.SitemapResource.Title == nil {
			break
		}

		return e.complexity.SitemapResource.Title(childComplexity), true

	case "SitemapResource.updatedAt":
		if e.complexity.SitemapResource.UpdatedAt == nil {
			break
		}

		return e.complexity.SitemapResource.UpdatedAt(childComplexity), true

	case "SitemapResourceMetaobject.handle":
		if e.complexity.SitemapResourceMetaobject.Handle == nil {
			break
		}

		return e.complexity.SitemapResourceMetaobject.Handle(childComplexity), true

	case "SitemapResourceMetaobject.onlineStoreUrlHandle":
		if e.complexity.SitemapResourceMetaobject.OnlineStoreURLHandle == nil {
			break
		}

		return e.complexity.SitemapResourceMetaobject.OnlineStoreURLHandle(childComplexity), true

	case "SitemapResourceMetaobject.type":
		if e.complexity.SitemapResourceMetaobject.Type == nil {
			break
		}

		return e.complexity.SitemapResourceMetaobject.Type(childComplexity), true

	case "SitemapResourceMetaobject.updatedAt":
		if e.complexity.SitemapResourceMetaobject.UpdatedAt == nil {
			break
		}

		return e.complexity.SitemapResourceMetaobject.UpdatedAt(childComplexity), true

	case "StoreAvailability.available":
		if e.complexity.StoreAvailability.Available == nil {
			break
		}

		return e.complexity.StoreAvailability.Available(childComplexity), true

	case "StoreAvailability.location":
		if e.complexity.StoreAvailability.Location == nil {
			break
		}

		return e.complexity.StoreAvailability.Location(childComplexity), true

	case "StoreAvailability.pickUpTime":
		if e.complexity.StoreAvailability.PickUpTime == nil {
			break
		}

		return e.complexity.StoreAvailability.PickUpTime(childComplexity), true

	case "StoreAvailability.quantityAvailable":
		if e.complexity.StoreAvailability.QuantityAvailable == nil {
			break
		}

		return e.complexity.StoreAvailability.QuantityAvailable(childComplexity), true

	case "StoreAvailabilityConnection.edges":
		if e.complexity.StoreAvailabilityConnection.Edges == nil {
			break
		}

		return e.complexity.StoreAvailabilityConnection.Edges(childComplexity), true

	case "StoreAvailabilityConnection.nodes":
		if e.complexity.StoreAvailabilityConnection.Nodes == nil {
			break
		}

		return e.complexity.StoreAvailabilityConnection.Nodes(childComplexity), true

	case "StoreAvailabilityConnection.pageInfo":
		if e.complexity.StoreAvailabilityConnection.PageInfo == nil {
			break
		}

		return e.complexity.StoreAvailabilityConnection.PageInfo(childComplexity), true

	case "StoreAvailabilityEdge.cursor":
		if e.complexity.StoreAvailabilityEdge.Cursor == nil {
			break
		}

		return e.complexity.StoreAvailabilityEdge.Cursor(childComplexity), true

	case "StoreAvailabilityEdge.node":
		if e.complexity.StoreAvailabilityEdge.Node == nil {
			break
		}

		return e.complexity.StoreAvailabilityEdge.Node(childComplexity), true

	case "StringConnection.edges":
		if e.complexity.StringConnection.Edges == nil {
			break
		}

		return e.complexity.StringConnection.Edges(childComplexity), true

	case "StringConnection.nodes":
		if e.complexity.StringConnection.Nodes == nil {
			break
		}

		return e.complexity.StringConnection.Nodes(childComplexity), true

	case "StringConnection.pageInfo":
		if e.complexity.StringConnection.PageInfo == nil {
			break
		}

		return e.complexity.StringConnection.PageInfo(childComplexity), true

	case "StringEdge.cursor":
		if e.complexity.StringEdge.Cursor == nil {
			break
		}

		return e.complexity.StringEdge.Cursor(childComplexity), true

	case "StringEdge.node":
		if e.complexity.StringEdge.Node == nil {
			break
		}

		return e.complexity.StringEdge.Node(childComplexity), true

	case "SubmissionError.code":
		if e.complexity.SubmissionError.Code == nil {
			break
		}

		return e.complexity.SubmissionError.Code(childComplexity), true

	case "SubmissionError.message":
		if e.complexity.SubmissionError.Message == nil {
			break
		}

		return e.complexity.SubmissionError.Message(childComplexity), true

	case "SubmitAlreadyAccepted.attemptId":
		if e.complexity.SubmitAlreadyAccepted.AttemptID == nil {
			break
		}

		return e.complexity.SubmitAlreadyAccepted.AttemptID(childComplexity), true

	case "SubmitFailed.checkoutUrl":
		if e.complexity.SubmitFailed.CheckoutURL == nil {
			break
		}

		return e.complexity.SubmitFailed.CheckoutURL(childComplexity), true

	case "SubmitFailed.errors":
		if e.complexity.SubmitFailed.Errors == nil {
			break
		}

		return e.complexity.SubmitFailed.Errors(childComplexity), true

	case "SubmitSuccess.attemptId":
		if e.complexity.SubmitSuccess.AttemptID == nil {
			break
		}

		return e.complexity.SubmitSuccess.AttemptID(childComplexity), true

	case "SubmitSuccess.redirectUrl":
		if e.complexity.SubmitSuccess.RedirectURL == nil {
			break
		}

		return e.complexity.SubmitSuccess.RedirectURL(childComplexity), true

	case "SubmitThrottled.pollAfter":
		if e.complexity.SubmitThrottled.PollAfter == nil {
			break
		}

		return e.complexity.SubmitThrottled.PollAfter(childComplexity), true

	case "Swatch.color":
		if e.complexity.Swatch.Color == nil {
			break
		}

		return e.complexity.Swatch.Color(childComplexity), true

	case "Swatch.image":
		if e.complexity.Swatch.Image == nil {
			break
		}

		return e.complexity.Swatch.Image(childComplexity), true

	case "TaxonomyCategory.ancestors":
		if e.complexity.TaxonomyCategory.Ancestors == nil {
			break
		}

		return e.complexity.TaxonomyCategory.Ancestors(childComplexity), true

	case "TaxonomyCategory.id":
		if e.complexity.TaxonomyCategory.ID == nil {
			break
		}

		return e.complexity.TaxonomyCategory.ID(childComplexity), true

	case "TaxonomyCategory.name":
		if e.complexity.TaxonomyCategory.Name == nil {
			break
		}

		return e.complexity.TaxonomyCategory.Name(childComplexity), true

	case "Transaction.amount":
		if e.complexity.Transaction.Amount == nil {
			break
		}

		return e.complexity.Transaction.Amount(childComplexity), true

	case "Transaction.amountV2":
		if e.complexity.Transaction.AmountV2 == nil {
			break
		}

		return e.complexity.Transaction.AmountV2(childComplexity), true

	case "Transaction.kind":
		if e.complexity.Transaction.Kind == nil {
			break
		}

		return e.complexity.Transaction.Kind(childComplexity), true

	case "Transaction.status":
		if e.complexity.Transaction.Status == nil {
			break
		}

		return e.complexity.Transaction.Status(childComplexity), true

	case "Transaction.statusV2":
		if e.complexity.Transaction.StatusV2 == nil {
			break
		}

		return e.complexity.Transaction.StatusV2(childComplexity), true

	case "Transaction.test":
		if e.complexity.Transaction.Test == nil {
			break
		}

		return e.complexity.Transaction.Test(childComplexity), true

	case "UnitPriceMeasurement.measuredType":
		if e.complexity.UnitPriceMeasurement.MeasuredType == nil {
			break
		}

		return e.complexity.UnitPriceMeasurement.MeasuredType(childComplexity), true

	case "UnitPriceMeasurement.quantityUnit":
		if e.complexity.UnitPriceMeasurement.QuantityUnit == nil {
			break
		}

		return e.complexity.UnitPriceMeasurement.QuantityUnit(childComplexity), true

	case "UnitPriceMeasurement.quantityValue":
		if e.complexity.UnitPriceMeasurement.QuantityValue == nil {
			break
		}

		return e.complexity.UnitPriceMeasurement.QuantityValue(childComplexity), true

	case "UnitPriceMeasurement.referenceUnit":
		if e.complexity.UnitPriceMeasurement.ReferenceUnit == nil {
			break
		}

		return e.complexity.UnitPriceMeasurement.ReferenceUnit(childComplexity), true

	case "UnitPriceMeasurement.referenceValue":
		if e.complexity.UnitPriceMeasurement.ReferenceValue == nil {
			break
		}

		return e.complexity.UnitPriceMeasurement.ReferenceValue(childComplexity), true

	case "UrlRedirect.id":
		if e.complexity.UrlRedirect.ID == nil {
			break
		}

		return e.complexity.UrlRedirect.ID(childComplexity), true

	case "UrlRedirect.path":
		if e.complexity.UrlRedirect.Path == nil {
			break
		}

		return e.complexity.UrlRedirect.Path(childComplexity), true

	case "UrlRedirect.target":
		if e.complexity.UrlRedirect.Target == nil {
			break
		}

		return e.complexity.UrlRedirect.Target(childComplexity), true

	case "UrlRedirectConnection.edges":
		if e.complexity.UrlRedirectConnection.Edges == nil {
			break
		}

		return e.complexity.UrlRedirectConnection.Edges(childComplexity), true

	case "UrlRedirectConnection.nodes":
		if e.complexity.UrlRedirectConnection.Nodes == nil {
			break
		}

		return e.complexity.UrlRedirectConnection.Nodes(childComplexity), true

	case "UrlRedirectConnection.pageInfo":
		if e.complexity.UrlRedirectConnection.PageInfo == nil {
			break
		}

		return e.complexity.UrlRedirectConnection.PageInfo(childComplexity), true

	case "UrlRedirectEdge.cursor":
		if e.complexity.UrlRedirectEdge.Cursor == nil {
			break
		}

		return e.complexity.UrlRedirectEdge.Cursor(childComplexity), true

	case "UrlRedirectEdge.node":
		if e.complexity.UrlRedirectEdge.Node == nil {
			break
		}

		return e.complexity.UrlRedirectEdge.Node(childComplexity), true

	case "UserError.field":
		if e.complexity.UserError.Field == nil {
			break
		}

		return e.complexity.UserError.Field(childComplexity), true

	case "UserError.message":
		if e.complexity.UserError.Message == nil {
			break
		}

		return e.complexity.UserError.Message(childComplexity), true

	case "UserErrorsShopPayPaymentRequestSessionUserErrors.code":
		if e.complexity.UserErrorsShopPayPaymentRequestSessionUserErrors.Code == nil {
			break
		}

		return e.complexity.UserErrorsShopPayPaymentRequestSessionUserErrors.Code(childComplexity), true

	case "UserErrorsShopPayPaymentRequestSessionUserErrors.field":
		if e.complexity.UserErrorsShopPayPaymentRequestSessionUserErrors.Field == nil {
			break
		}

		return e.complexity.UserErrorsShopPayPaymentRequestSessionUserErrors.Field(childComplexity), true

	case "UserErrorsShopPayPaymentRequestSessionUserErrors.message":
		if e.complexity.UserErrorsShopPayPaymentRequestSessionUserErrors.Message == nil {
			break
		}

		return e.complexity.UserErrorsShopPayPaymentRequestSessionUserErrors.Message(childComplexity), true

	case "Video.alt":
		if e.complexity.Video.Alt == nil {
			break
		}

		return e.complexity.Video.Alt(childComplexity), true

	case "Video.id":
		if e.complexity.Video.ID == nil {
			break
		}

		return e.complexity.Video.ID(childComplexity), true

	case "Video.mediaContentType":
		if e.complexity.Video.MediaContentType == nil {
			break
		}

		return e.complexity.Video.MediaContentType(childComplexity), true

	case "Video.presentation":
		if e.complexity.Video.Presentation == nil {
			break
		}

		return e.complexity.Video.Presentation(childComplexity), true

	case "Video.previewImage":
		if e.complexity.Video.PreviewImage == nil {
			break
		}

		return e.complexity.Video.PreviewImage(childComplexity), true

	case "Video.sources":
		if e.complexity.Video.Sources == nil {
			break
		}

		return e.complexity.Video.Sources(childComplexity), true

	case "VideoSource.format":
		if e.complexity.VideoSource.Format == nil {
			break
		}

		return e.complexity.VideoSource.Format(childComplexity), true

	case "VideoSource.height":
		if e.complexity.VideoSource.Height == nil {
			break
		}

		return e.complexity.VideoSource.Height(childComplexity), true

	case "VideoSource.mimeType":
		if e.complexity.VideoSource.MimeType == nil {
			break
		}

		return e.complexity.VideoSource.MimeType(childComplexity), true

	case "VideoSource.url":
		if e.complexity.VideoSource.URL == nil {
			break
		}

		return e.complexity.VideoSource.URL(childComplexity), true

	case "VideoSource.width":
		if e.complexity.VideoSource.Width == nil {
			break
		}

		return e.complexity.VideoSource.Width(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputApplePayWalletContentInput,
		ec.unmarshalInputApplePayWalletHeaderInput,
		ec.unmarshalInputAttributeInput,
		ec.unmarshalInputBuyerInput,
		ec.unmarshalInputCartAddressInput,
		ec.unmarshalInputCartBuyerIdentityInput,
		ec.unmarshalInputCartDeliveryAddressInput,
		ec.unmarshalInputCartDeliveryCoordinatesPreferenceInput,
		ec.unmarshalInputCartDeliveryInput,
		ec.unmarshalInputCartDeliveryPreferenceInput,
		ec.unmarshalInputCartDirectPaymentMethodInput,
		ec.unmarshalInputCartFreePaymentMethodInput,
		ec.unmarshalInputCartInput,
		ec.unmarshalInputCartInputMetafieldInput,
		ec.unmarshalInputCartLineInput,
		ec.unmarshalInputCartLineUpdateInput,
		ec.unmarshalInputCartMetafieldDeleteInput,
		ec.unmarshalInputCartMetafieldsSetInput,
		ec.unmarshalInputCartPaymentInput,
		ec.unmarshalInputCartPreferencesInput,
		ec.unmarshalInputCartSelectableAddressInput,
		ec.unmarshalInputCartSelectableAddressUpdateInput,
		ec.unmarshalInputCartSelectedDeliveryOptionInput,
		ec.unmarshalInputCartWalletPaymentMethodInput,
		ec.unmarshalInputCategoryFilter,
		ec.unmarshalInputCheckoutAttributesUpdateV2Input,
		ec.unmarshalInputCheckoutBuyerIdentityInput,
		ec.unmarshalInputCheckoutCreateInput,
		ec.unmarshalInputCheckoutLineItemInput,
		ec.unmarshalInputCheckoutLineItemUpdateInput,
		ec.unmarshalInputCreditCardPaymentInputV2,
		ec.unmarshalInputCustomerAccessTokenCreateInput,
		ec.unmarshalInputCustomerActivateInput,
		ec.unmarshalInputCustomerCreateInput,
		ec.unmarshalInputCustomerResetInput,
		ec.unmarshalInputCustomerUpdateInput,
		ec.unmarshalInputDeliveryAddressInput,
		ec.unmarshalInputGeoCoordinateInput,
		ec.unmarshalInputHasMetafieldsIdentifier,
		ec.unmarshalInputImageTransformInput,
		ec.unmarshalInputMailingAddressInput,
		ec.unmarshalInputMetafieldFilter,
		ec.unmarshalInputMetaobjectHandleInput,
		ec.unmarshalInputMoneyInput,
		ec.unmarshalInputPriceRangeFilter,
		ec.unmarshalInputProductFilter,
		ec.unmarshalInputSelectedOptionInput,
		ec.unmarshalInputShopPayPaymentRequestDeliveryMethodInput,
		ec.unmarshalInputShopPayPaymentRequestDiscountInput,
		ec.unmarshalInputShopPayPaymentRequestImageInput,
		ec.unmarshalInputShopPayPaymentRequestInput,
		ec.unmarshalInputShopPayPaymentRequestLineItemInput,
		ec.unmarshalInputShopPayPaymentRequestShippingLineInput,
		ec.unmarshalInputShopPayPaymentRequestTotalShippingPriceInput,
		ec.unmarshalInputShopPayWalletContentInput,
		ec.unmarshalInputTaxonomyMetafieldFilter,
		ec.unmarshalInputTokenizedPaymentInputV3,
		ec.unmarshalInputVariantOptionFilter,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._queryMiddleware(ctx, opCtx.Operation, func(ctx context.Context) (any, error) {
					return ec._Query(ctx, opCtx.Operation.SelectionSet), nil
				})
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._mutationMiddleware(ctx, opCtx.Operation, func(ctx context.Context) (any, error) {
				return ec._Mutation(ctx, opCtx.Operation.SelectionSet), nil
			})
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "schema.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema.graphqls", Input: sourceData("schema.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_accessRestricted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_accessRestricted_argsReason(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reason"] = arg0
	return args, nil
}
func (ec *executionContext) dir_accessRestricted_argsReason(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["reason"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
	if tmp, ok := rawArgs["reason"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) dir_defer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_defer_argsIf(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["if"] = arg0
	arg1, err := ec.dir_defer_argsLabel(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["label"] = arg1
	return args, nil
}
func (ec *executionContext) dir_defer_argsIf(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["if"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("if"))
	if tmp, ok := rawArgs["if"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) dir_defer_argsLabel(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["label"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
	if tmp, ok := rawArgs["label"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) dir_inContext_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_inContext_argsBuyer(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["buyer"] = arg0
	arg1, err := ec.dir_inContext_argsCountry(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["country"] = arg1
	arg2, err := ec.dir_inContext_argsLanguage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["language"] = arg2
	arg3, err := ec.dir_inContext_argsPreferredLocationID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["preferredLocationId"] = arg3
	return args, nil
}
func (ec *executionContext) dir_inContext_argsBuyer(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.BuyerInput, error) {
	if _, ok := rawArgs["buyer"]; !ok {
		var zeroVal *model.BuyerInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("buyer"))
	if tmp, ok := rawArgs["buyer"]; ok {
		return ec.unmarshalOBuyerInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBuyerInput(ctx, tmp)
	}

	var zeroVal *model.BuyerInput
	return zeroVal, nil
}

func (ec *executionContext) dir_inContext_argsCountry(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.CountryCode, error) {
	if _, ok := rawArgs["country"]; !ok {
		var zeroVal *model.CountryCode
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
	if tmp, ok := rawArgs["country"]; ok {
		return ec.unmarshalOCountryCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, tmp)
	}

	var zeroVal *model.CountryCode
	return zeroVal, nil
}

func (ec *executionContext) dir_inContext_argsLanguage(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.LanguageCode, error) {
	if _, ok := rawArgs["language"]; !ok {
		var zeroVal *model.LanguageCode
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
	if tmp, ok := rawArgs["language"]; ok {
		return ec.unmarshalOLanguageCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguageCode(ctx, tmp)
	}

	var zeroVal *model.LanguageCode
	return zeroVal, nil
}

func (ec *executionContext) dir_inContext_argsPreferredLocationID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["preferredLocationId"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("preferredLocationId"))
	if tmp, ok := rawArgs["preferredLocationId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Article_comments_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Article_comments_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Article_comments_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Article_comments_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Article_comments_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Article_comments_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_Article_comments_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Article_comments_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Article_comments_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Article_comments_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Article_comments_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Article_content_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Article_content_argsTruncateAt(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["truncateAt"] = arg0
	return args, nil
}
func (ec *executionContext) field_Article_content_argsTruncateAt(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("truncateAt"))
	if tmp, ok := rawArgs["truncateAt"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Article_excerpt_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Article_excerpt_argsTruncateAt(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["truncateAt"] = arg0
	return args, nil
}
func (ec *executionContext) field_Article_excerpt_argsTruncateAt(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("truncateAt"))
	if tmp, ok := rawArgs["truncateAt"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Article_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Article_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Article_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Article_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Article_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Article_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Article_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Article_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_articleByHandle_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Blog_articleByHandle_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	return args, nil
}
func (ec *executionContext) field_Blog_articleByHandle_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_articles_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Blog_articles_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Blog_articles_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Blog_articles_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Blog_articles_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Blog_articles_argsQuery(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["query"] = arg4
	arg5, err := ec.field_Blog_articles_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	arg6, err := ec.field_Blog_articles_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg6
	return args, nil
}
func (ec *executionContext) field_Blog_articles_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_articles_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_articles_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_articles_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_articles_argsQuery(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
	if tmp, ok := rawArgs["query"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_articles_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_articles_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ArticleSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOArticleSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleSortKeys(ctx, tmp)
	}

	var zeroVal *model.ArticleSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Blog_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Blog_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Blog_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Blog_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Blog_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Blog_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_CartDeliveryAddress_formatted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_CartDeliveryAddress_formatted_argsWithCompany(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["withCompany"] = arg0
	arg1, err := ec.field_CartDeliveryAddress_formatted_argsWithName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["withName"] = arg1
	return args, nil
}
func (ec *executionContext) field_CartDeliveryAddress_formatted_argsWithCompany(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("withCompany"))
	if tmp, ok := rawArgs["withCompany"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_CartDeliveryAddress_formatted_argsWithName(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("withName"))
	if tmp, ok := rawArgs["withName"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_CartDeliveryGroup_cartLines_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_CartDeliveryGroup_cartLines_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_CartDeliveryGroup_cartLines_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_CartDeliveryGroup_cartLines_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_CartDeliveryGroup_cartLines_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_CartDeliveryGroup_cartLines_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_CartDeliveryGroup_cartLines_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_CartDeliveryGroup_cartLines_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_CartDeliveryGroup_cartLines_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_CartDeliveryGroup_cartLines_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_CartDeliveryGroup_cartLines_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_CartDelivery_addresses_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_CartDelivery_addresses_argsSelected(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["selected"] = arg0
	return args, nil
}
func (ec *executionContext) field_CartDelivery_addresses_argsSelected(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("selected"))
	if tmp, ok := rawArgs["selected"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_CartLine_attribute_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_CartLine_attribute_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	return args, nil
}
func (ec *executionContext) field_CartLine_attribute_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_attribute_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Cart_attribute_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	return args, nil
}
func (ec *executionContext) field_Cart_attribute_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_deliveryGroups_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Cart_deliveryGroups_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Cart_deliveryGroups_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Cart_deliveryGroups_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Cart_deliveryGroups_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Cart_deliveryGroups_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	arg5, err := ec.field_Cart_deliveryGroups_argsWithCarrierRates(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["withCarrierRates"] = arg5
	return args, nil
}
func (ec *executionContext) field_Cart_deliveryGroups_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_deliveryGroups_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_deliveryGroups_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_deliveryGroups_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_deliveryGroups_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_deliveryGroups_argsWithCarrierRates(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("withCarrierRates"))
	if tmp, ok := rawArgs["withCarrierRates"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_lines_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Cart_lines_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Cart_lines_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Cart_lines_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Cart_lines_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Cart_lines_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_Cart_lines_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_lines_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_lines_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_lines_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_lines_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Cart_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Cart_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Cart_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Cart_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Cart_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Cart_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_Checkout_discountApplications_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Checkout_discountApplications_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Checkout_discountApplications_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Checkout_discountApplications_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Checkout_discountApplications_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Checkout_discountApplications_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_Checkout_discountApplications_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Checkout_discountApplications_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Checkout_discountApplications_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Checkout_discountApplications_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Checkout_discountApplications_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Checkout_lineItems_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Checkout_lineItems_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Checkout_lineItems_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Checkout_lineItems_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Checkout_lineItems_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Checkout_lineItems_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_Checkout_lineItems_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Checkout_lineItems_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Checkout_lineItems_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Checkout_lineItems_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Checkout_lineItems_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_description_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Collection_description_argsTruncateAt(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["truncateAt"] = arg0
	return args, nil
}
func (ec *executionContext) field_Collection_description_argsTruncateAt(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("truncateAt"))
	if tmp, ok := rawArgs["truncateAt"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Collection_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Collection_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Collection_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Collection_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Collection_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_products_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Collection_products_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Collection_products_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Collection_products_argsFilters(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filters"] = arg2
	arg3, err := ec.field_Collection_products_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg3
	arg4, err := ec.field_Collection_products_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg4
	arg5, err := ec.field_Collection_products_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	arg6, err := ec.field_Collection_products_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg6
	return args, nil
}
func (ec *executionContext) field_Collection_products_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_products_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_products_argsFilters(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.ProductFilter, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
	if tmp, ok := rawArgs["filters"]; ok {
		return ec.unmarshalOProductFilter2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductFilterᚄ(ctx, tmp)
	}

	var zeroVal []*model.ProductFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_products_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_products_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_products_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Collection_products_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ProductCollectionSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOProductCollectionSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductCollectionSortKeys(ctx, tmp)
	}

	var zeroVal *model.ProductCollectionSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_Comment_content_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Comment_content_argsTruncateAt(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["truncateAt"] = arg0
	return args, nil
}
func (ec *executionContext) field_Comment_content_argsTruncateAt(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("truncateAt"))
	if tmp, ok := rawArgs["truncateAt"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_CompanyLocation_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_CompanyLocation_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_CompanyLocation_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_CompanyLocation_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_CompanyLocation_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_CompanyLocation_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_CompanyLocation_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_CompanyLocation_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_Company_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Company_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Company_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Company_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Company_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Company_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Company_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Company_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_ComponentizableCartLine_attribute_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_ComponentizableCartLine_attribute_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	return args, nil
}
func (ec *executionContext) field_ComponentizableCartLine_attribute_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_addresses_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Customer_addresses_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Customer_addresses_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Customer_addresses_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Customer_addresses_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Customer_addresses_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_Customer_addresses_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_addresses_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_addresses_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_addresses_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_addresses_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Customer_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Customer_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Customer_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Customer_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Customer_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_orders_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Customer_orders_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Customer_orders_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Customer_orders_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Customer_orders_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Customer_orders_argsQuery(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["query"] = arg4
	arg5, err := ec.field_Customer_orders_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	arg6, err := ec.field_Customer_orders_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg6
	return args, nil
}
func (ec *executionContext) field_Customer_orders_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_orders_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_orders_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_orders_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_orders_argsQuery(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
	if tmp, ok := rawArgs["query"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_orders_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_orders_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.OrderSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOOrderSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderSortKeys(ctx, tmp)
	}

	var zeroVal *model.OrderSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_Fulfillment_fulfillmentLineItems_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Fulfillment_fulfillmentLineItems_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Fulfillment_fulfillmentLineItems_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Fulfillment_fulfillmentLineItems_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Fulfillment_fulfillmentLineItems_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Fulfillment_fulfillmentLineItems_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_Fulfillment_fulfillmentLineItems_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Fulfillment_fulfillmentLineItems_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Fulfillment_fulfillmentLineItems_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Fulfillment_fulfillmentLineItems_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Fulfillment_fulfillmentLineItems_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Fulfillment_trackingInfo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Fulfillment_trackingInfo_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg0
	return args, nil
}
func (ec *executionContext) field_Fulfillment_trackingInfo_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Image_transformedSrc_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Image_transformedSrc_argsCrop(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["crop"] = arg0
	arg1, err := ec.field_Image_transformedSrc_argsMaxHeight(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["maxHeight"] = arg1
	arg2, err := ec.field_Image_transformedSrc_argsMaxWidth(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["maxWidth"] = arg2
	arg3, err := ec.field_Image_transformedSrc_argsPreferredContentType(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["preferredContentType"] = arg3
	arg4, err := ec.field_Image_transformedSrc_argsScale(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["scale"] = arg4
	return args, nil
}
func (ec *executionContext) field_Image_transformedSrc_argsCrop(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.CropRegion, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("crop"))
	if tmp, ok := rawArgs["crop"]; ok {
		return ec.unmarshalOCropRegion2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCropRegion(ctx, tmp)
	}

	var zeroVal *model.CropRegion
	return zeroVal, nil
}

func (ec *executionContext) field_Image_transformedSrc_argsMaxHeight(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("maxHeight"))
	if tmp, ok := rawArgs["maxHeight"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Image_transformedSrc_argsMaxWidth(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("maxWidth"))
	if tmp, ok := rawArgs["maxWidth"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Image_transformedSrc_argsPreferredContentType(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ImageContentType, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("preferredContentType"))
	if tmp, ok := rawArgs["preferredContentType"]; ok {
		return ec.unmarshalOImageContentType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageContentType(ctx, tmp)
	}

	var zeroVal *model.ImageContentType
	return zeroVal, nil
}

func (ec *executionContext) field_Image_transformedSrc_argsScale(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("scale"))
	if tmp, ok := rawArgs["scale"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Image_url_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Image_url_argsTransform(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["transform"] = arg0
	return args, nil
}
func (ec *executionContext) field_Image_url_argsTransform(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ImageTransformInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("transform"))
	if tmp, ok := rawArgs["transform"]; ok {
		return ec.unmarshalOImageTransformInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageTransformInput(ctx, tmp)
	}

	var zeroVal *model.ImageTransformInput
	return zeroVal, nil
}

func (ec *executionContext) field_Location_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Location_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Location_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Location_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Location_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Location_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Location_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Location_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_MailingAddress_formatted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_MailingAddress_formatted_argsWithCompany(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["withCompany"] = arg0
	arg1, err := ec.field_MailingAddress_formatted_argsWithName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["withName"] = arg1
	return args, nil
}
func (ec *executionContext) field_MailingAddress_formatted_argsWithCompany(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("withCompany"))
	if tmp, ok := rawArgs["withCompany"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_MailingAddress_formatted_argsWithName(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("withName"))
	if tmp, ok := rawArgs["withName"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Market_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Market_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Market_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Market_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Market_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Market_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Market_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Market_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_MediaPresentation_asJson_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_MediaPresentation_asJson_argsFormat(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["format"] = arg0
	return args, nil
}
func (ec *executionContext) field_MediaPresentation_asJson_argsFormat(
	ctx context.Context,
	rawArgs map[string]any,
) (model.MediaPresentationFormat, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("format"))
	if tmp, ok := rawArgs["format"]; ok {
		return ec.unmarshalNMediaPresentationFormat2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaPresentationFormat(ctx, tmp)
	}

	var zeroVal model.MediaPresentationFormat
	return zeroVal, nil
}

func (ec *executionContext) field_Metafield_references_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Metafield_references_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Metafield_references_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Metafield_references_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Metafield_references_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	return args, nil
}
func (ec *executionContext) field_Metafield_references_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Metafield_references_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Metafield_references_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Metafield_references_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_MetaobjectField_references_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_MetaobjectField_references_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_MetaobjectField_references_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_MetaobjectField_references_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_MetaobjectField_references_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	return args, nil
}
func (ec *executionContext) field_MetaobjectField_references_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_MetaobjectField_references_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_MetaobjectField_references_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_MetaobjectField_references_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Metaobject_field_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Metaobject_field_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	return args, nil
}
func (ec *executionContext) field_Metaobject_field_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartAttributesUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartAttributesUpdate_argsAttributes(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["attributes"] = arg0
	arg1, err := ec.field_Mutation_cartAttributesUpdate_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartAttributesUpdate_argsAttributes(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.AttributeInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("attributes"))
	if tmp, ok := rawArgs["attributes"]; ok {
		return ec.unmarshalNAttributeInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.AttributeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartAttributesUpdate_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartBillingAddressUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartBillingAddressUpdate_argsBillingAddress(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["billingAddress"] = arg0
	arg1, err := ec.field_Mutation_cartBillingAddressUpdate_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartBillingAddressUpdate_argsBillingAddress(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.MailingAddressInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("billingAddress"))
	if tmp, ok := rawArgs["billingAddress"]; ok {
		return ec.unmarshalOMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, tmp)
	}

	var zeroVal *model.MailingAddressInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartBillingAddressUpdate_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartBuyerIdentityUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartBuyerIdentityUpdate_argsBuyerIdentity(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["buyerIdentity"] = arg0
	arg1, err := ec.field_Mutation_cartBuyerIdentityUpdate_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartBuyerIdentityUpdate_argsBuyerIdentity(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CartBuyerIdentityInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerIdentity"))
	if tmp, ok := rawArgs["buyerIdentity"]; ok {
		return ec.unmarshalNCartBuyerIdentityInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartBuyerIdentityInput(ctx, tmp)
	}

	var zeroVal model.CartBuyerIdentityInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartBuyerIdentityUpdate_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartCreate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartCreate_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_cartCreate_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.CartInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOCartInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartInput(ctx, tmp)
	}

	var zeroVal *model.CartInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartDeliveryAddressesAdd_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartDeliveryAddressesAdd_argsAddresses(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["addresses"] = arg0
	arg1, err := ec.field_Mutation_cartDeliveryAddressesAdd_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartDeliveryAddressesAdd_argsAddresses(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.CartSelectableAddressInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("addresses"))
	if tmp, ok := rawArgs["addresses"]; ok {
		return ec.unmarshalNCartSelectableAddressInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.CartSelectableAddressInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartDeliveryAddressesAdd_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartDeliveryAddressesRemove_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartDeliveryAddressesRemove_argsAddressIds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["addressIds"] = arg0
	arg1, err := ec.field_Mutation_cartDeliveryAddressesRemove_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartDeliveryAddressesRemove_argsAddressIds(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIds"))
	if tmp, ok := rawArgs["addressIds"]; ok {
		return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartDeliveryAddressesRemove_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartDeliveryAddressesReplace_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartDeliveryAddressesReplace_argsAddresses(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["addresses"] = arg0
	arg1, err := ec.field_Mutation_cartDeliveryAddressesReplace_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartDeliveryAddressesReplace_argsAddresses(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.CartSelectableAddressInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("addresses"))
	if tmp, ok := rawArgs["addresses"]; ok {
		return ec.unmarshalNCartSelectableAddressInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.CartSelectableAddressInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartDeliveryAddressesReplace_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartDeliveryAddressesUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartDeliveryAddressesUpdate_argsAddresses(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["addresses"] = arg0
	arg1, err := ec.field_Mutation_cartDeliveryAddressesUpdate_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartDeliveryAddressesUpdate_argsAddresses(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.CartSelectableAddressUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("addresses"))
	if tmp, ok := rawArgs["addresses"]; ok {
		return ec.unmarshalNCartSelectableAddressUpdateInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressUpdateInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.CartSelectableAddressUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartDeliveryAddressesUpdate_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartDiscountCodesUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartDiscountCodesUpdate_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg0
	arg1, err := ec.field_Mutation_cartDiscountCodesUpdate_argsDiscountCodes(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["discountCodes"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartDiscountCodesUpdate_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartDiscountCodesUpdate_argsDiscountCodes(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("discountCodes"))
	if tmp, ok := rawArgs["discountCodes"]; ok {
		return ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartGiftCardCodesRemove_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartGiftCardCodesRemove_argsAppliedGiftCardIds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appliedGiftCardIds"] = arg0
	arg1, err := ec.field_Mutation_cartGiftCardCodesRemove_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartGiftCardCodesRemove_argsAppliedGiftCardIds(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appliedGiftCardIds"))
	if tmp, ok := rawArgs["appliedGiftCardIds"]; ok {
		return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartGiftCardCodesRemove_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartGiftCardCodesUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartGiftCardCodesUpdate_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg0
	arg1, err := ec.field_Mutation_cartGiftCardCodesUpdate_argsGiftCardCodes(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["giftCardCodes"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartGiftCardCodesUpdate_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartGiftCardCodesUpdate_argsGiftCardCodes(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("giftCardCodes"))
	if tmp, ok := rawArgs["giftCardCodes"]; ok {
		return ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartLinesAdd_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartLinesAdd_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg0
	arg1, err := ec.field_Mutation_cartLinesAdd_argsLines(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["lines"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartLinesAdd_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartLinesAdd_argsLines(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.CartLineInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("lines"))
	if tmp, ok := rawArgs["lines"]; ok {
		return ec.unmarshalNCartLineInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.CartLineInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartLinesRemove_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartLinesRemove_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg0
	arg1, err := ec.field_Mutation_cartLinesRemove_argsLineIds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["lineIds"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartLinesRemove_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartLinesRemove_argsLineIds(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("lineIds"))
	if tmp, ok := rawArgs["lineIds"]; ok {
		return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartLinesUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartLinesUpdate_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg0
	arg1, err := ec.field_Mutation_cartLinesUpdate_argsLines(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["lines"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartLinesUpdate_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartLinesUpdate_argsLines(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.CartLineUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("lines"))
	if tmp, ok := rawArgs["lines"]; ok {
		return ec.unmarshalNCartLineUpdateInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineUpdateInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.CartLineUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartMetafieldDelete_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartMetafieldDelete_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_cartMetafieldDelete_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CartMetafieldDeleteInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCartMetafieldDeleteInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartMetafieldDeleteInput(ctx, tmp)
	}

	var zeroVal model.CartMetafieldDeleteInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartMetafieldsSet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartMetafieldsSet_argsMetafields(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metafields"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_cartMetafieldsSet_argsMetafields(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.CartMetafieldsSetInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metafields"))
	if tmp, ok := rawArgs["metafields"]; ok {
		return ec.unmarshalNCartMetafieldsSetInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartMetafieldsSetInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.CartMetafieldsSetInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartNoteUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartNoteUpdate_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg0
	arg1, err := ec.field_Mutation_cartNoteUpdate_argsNote(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["note"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartNoteUpdate_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartNoteUpdate_argsNote(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
	if tmp, ok := rawArgs["note"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartPaymentUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartPaymentUpdate_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg0
	arg1, err := ec.field_Mutation_cartPaymentUpdate_argsPayment(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["payment"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartPaymentUpdate_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartPaymentUpdate_argsPayment(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CartPaymentInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("payment"))
	if tmp, ok := rawArgs["payment"]; ok {
		return ec.unmarshalNCartPaymentInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPaymentInput(ctx, tmp)
	}

	var zeroVal model.CartPaymentInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartPrepareForCompletion_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartPrepareForCompletion_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_cartPrepareForCompletion_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartRemovePersonalData_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartRemovePersonalData_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_cartRemovePersonalData_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartSelectedDeliveryOptionsUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartSelectedDeliveryOptionsUpdate_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg0
	arg1, err := ec.field_Mutation_cartSelectedDeliveryOptionsUpdate_argsSelectedDeliveryOptions(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["selectedDeliveryOptions"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartSelectedDeliveryOptionsUpdate_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartSelectedDeliveryOptionsUpdate_argsSelectedDeliveryOptions(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.CartSelectedDeliveryOptionInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("selectedDeliveryOptions"))
	if tmp, ok := rawArgs["selectedDeliveryOptions"]; ok {
		return ec.unmarshalNCartSelectedDeliveryOptionInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectedDeliveryOptionInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.CartSelectedDeliveryOptionInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartSubmitForCompletion_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_cartSubmitForCompletion_argsAttemptToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["attemptToken"] = arg0
	arg1, err := ec.field_Mutation_cartSubmitForCompletion_argsCartID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cartId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_cartSubmitForCompletion_argsAttemptToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptToken"))
	if tmp, ok := rawArgs["attemptToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_cartSubmitForCompletion_argsCartID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
	if tmp, ok := rawArgs["cartId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutAttributesUpdateV2_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutAttributesUpdateV2_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutAttributesUpdateV2_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutAttributesUpdateV2_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutAttributesUpdateV2_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CheckoutAttributesUpdateV2Input, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCheckoutAttributesUpdateV2Input2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutAttributesUpdateV2Input(ctx, tmp)
	}

	var zeroVal model.CheckoutAttributesUpdateV2Input
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutCompleteFree_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutCompleteFree_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutCompleteFree_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutCompleteWithCreditCardV2_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutCompleteWithCreditCardV2_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutCompleteWithCreditCardV2_argsPayment(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["payment"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutCompleteWithCreditCardV2_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutCompleteWithCreditCardV2_argsPayment(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CreditCardPaymentInputV2, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("payment"))
	if tmp, ok := rawArgs["payment"]; ok {
		return ec.unmarshalNCreditCardPaymentInputV22githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCreditCardPaymentInputV2(ctx, tmp)
	}

	var zeroVal model.CreditCardPaymentInputV2
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutCompleteWithTokenizedPaymentV3_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutCompleteWithTokenizedPaymentV3_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutCompleteWithTokenizedPaymentV3_argsPayment(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["payment"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutCompleteWithTokenizedPaymentV3_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutCompleteWithTokenizedPaymentV3_argsPayment(
	ctx context.Context,
	rawArgs map[string]any,
) (model.TokenizedPaymentInputV3, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("payment"))
	if tmp, ok := rawArgs["payment"]; ok {
		return ec.unmarshalNTokenizedPaymentInputV32githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTokenizedPaymentInputV3(ctx, tmp)
	}

	var zeroVal model.TokenizedPaymentInputV3
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutCreate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutCreate_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	arg1, err := ec.field_Mutation_checkoutCreate_argsQueueToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["queueToken"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutCreate_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CheckoutCreateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCheckoutCreateInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCreateInput(ctx, tmp)
	}

	var zeroVal model.CheckoutCreateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutCreate_argsQueueToken(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("queueToken"))
	if tmp, ok := rawArgs["queueToken"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutCustomerAssociateV2_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutCustomerAssociateV2_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutCustomerAssociateV2_argsCustomerAccessToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["customerAccessToken"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutCustomerAssociateV2_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutCustomerAssociateV2_argsCustomerAccessToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
	if tmp, ok := rawArgs["customerAccessToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutCustomerDisassociateV2_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutCustomerDisassociateV2_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutCustomerDisassociateV2_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutDiscountCodeApplyV2_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutDiscountCodeApplyV2_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutDiscountCodeApplyV2_argsDiscountCode(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["discountCode"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutDiscountCodeApplyV2_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutDiscountCodeApplyV2_argsDiscountCode(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("discountCode"))
	if tmp, ok := rawArgs["discountCode"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutDiscountCodeRemove_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutDiscountCodeRemove_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutDiscountCodeRemove_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutEmailUpdateV2_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutEmailUpdateV2_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutEmailUpdateV2_argsEmail(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["email"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutEmailUpdateV2_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutEmailUpdateV2_argsEmail(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
	if tmp, ok := rawArgs["email"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutGiftCardRemoveV2_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutGiftCardRemoveV2_argsAppliedGiftCardID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appliedGiftCardId"] = arg0
	arg1, err := ec.field_Mutation_checkoutGiftCardRemoveV2_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutGiftCardRemoveV2_argsAppliedGiftCardID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appliedGiftCardId"))
	if tmp, ok := rawArgs["appliedGiftCardId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutGiftCardRemoveV2_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutGiftCardsAppend_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutGiftCardsAppend_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutGiftCardsAppend_argsGiftCardCodes(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["giftCardCodes"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutGiftCardsAppend_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutGiftCardsAppend_argsGiftCardCodes(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("giftCardCodes"))
	if tmp, ok := rawArgs["giftCardCodes"]; ok {
		return ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutLineItemsAdd_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutLineItemsAdd_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutLineItemsAdd_argsLineItems(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["lineItems"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutLineItemsAdd_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutLineItemsAdd_argsLineItems(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.CheckoutLineItemInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("lineItems"))
	if tmp, ok := rawArgs["lineItems"]; ok {
		return ec.unmarshalNCheckoutLineItemInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.CheckoutLineItemInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutLineItemsRemove_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutLineItemsRemove_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutLineItemsRemove_argsLineItemIds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["lineItemIds"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutLineItemsRemove_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutLineItemsRemove_argsLineItemIds(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("lineItemIds"))
	if tmp, ok := rawArgs["lineItemIds"]; ok {
		return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutLineItemsReplace_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutLineItemsReplace_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutLineItemsReplace_argsLineItems(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["lineItems"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutLineItemsReplace_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutLineItemsReplace_argsLineItems(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.CheckoutLineItemInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("lineItems"))
	if tmp, ok := rawArgs["lineItems"]; ok {
		return ec.unmarshalNCheckoutLineItemInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.CheckoutLineItemInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutLineItemsUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutLineItemsUpdate_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutLineItemsUpdate_argsLineItems(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["lineItems"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutLineItemsUpdate_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutLineItemsUpdate_argsLineItems(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.CheckoutLineItemUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("lineItems"))
	if tmp, ok := rawArgs["lineItems"]; ok {
		return ec.unmarshalNCheckoutLineItemUpdateInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemUpdateInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.CheckoutLineItemUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutShippingAddressUpdateV2_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutShippingAddressUpdateV2_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutShippingAddressUpdateV2_argsShippingAddress(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["shippingAddress"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutShippingAddressUpdateV2_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutShippingAddressUpdateV2_argsShippingAddress(
	ctx context.Context,
	rawArgs map[string]any,
) (model.MailingAddressInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("shippingAddress"))
	if tmp, ok := rawArgs["shippingAddress"]; ok {
		return ec.unmarshalNMailingAddressInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, tmp)
	}

	var zeroVal model.MailingAddressInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutShippingLineUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_checkoutShippingLineUpdate_argsCheckoutID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["checkoutId"] = arg0
	arg1, err := ec.field_Mutation_checkoutShippingLineUpdate_argsShippingRateHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["shippingRateHandle"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_checkoutShippingLineUpdate_argsCheckoutID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("checkoutId"))
	if tmp, ok := rawArgs["checkoutId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_checkoutShippingLineUpdate_argsShippingRateHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("shippingRateHandle"))
	if tmp, ok := rawArgs["shippingRateHandle"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAccessTokenCreateWithMultipass_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerAccessTokenCreateWithMultipass_argsMultipassToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["multipassToken"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_customerAccessTokenCreateWithMultipass_argsMultipassToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("multipassToken"))
	if tmp, ok := rawArgs["multipassToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAccessTokenCreate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerAccessTokenCreate_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_customerAccessTokenCreate_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CustomerAccessTokenCreateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCustomerAccessTokenCreateInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessTokenCreateInput(ctx, tmp)
	}

	var zeroVal model.CustomerAccessTokenCreateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAccessTokenDelete_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerAccessTokenDelete_argsCustomerAccessToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["customerAccessToken"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_customerAccessTokenDelete_argsCustomerAccessToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
	if tmp, ok := rawArgs["customerAccessToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAccessTokenRenew_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerAccessTokenRenew_argsCustomerAccessToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["customerAccessToken"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_customerAccessTokenRenew_argsCustomerAccessToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
	if tmp, ok := rawArgs["customerAccessToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerActivateByUrl_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerActivateByUrl_argsActivationURL(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["activationUrl"] = arg0
	arg1, err := ec.field_Mutation_customerActivateByUrl_argsPassword(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["password"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_customerActivateByUrl_argsActivationURL(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("activationUrl"))
	if tmp, ok := rawArgs["activationUrl"]; ok {
		return ec.unmarshalNURL2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerActivateByUrl_argsPassword(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
	if tmp, ok := rawArgs["password"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerActivate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerActivate_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_customerActivate_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_customerActivate_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerActivate_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CustomerActivateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCustomerActivateInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerActivateInput(ctx, tmp)
	}

	var zeroVal model.CustomerActivateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAddressCreate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerAddressCreate_argsAddress(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["address"] = arg0
	arg1, err := ec.field_Mutation_customerAddressCreate_argsCustomerAccessToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["customerAccessToken"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_customerAddressCreate_argsAddress(
	ctx context.Context,
	rawArgs map[string]any,
) (model.MailingAddressInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
	if tmp, ok := rawArgs["address"]; ok {
		return ec.unmarshalNMailingAddressInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, tmp)
	}

	var zeroVal model.MailingAddressInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAddressCreate_argsCustomerAccessToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
	if tmp, ok := rawArgs["customerAccessToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAddressDelete_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerAddressDelete_argsCustomerAccessToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["customerAccessToken"] = arg0
	arg1, err := ec.field_Mutation_customerAddressDelete_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_customerAddressDelete_argsCustomerAccessToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
	if tmp, ok := rawArgs["customerAccessToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAddressDelete_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAddressUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerAddressUpdate_argsAddress(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["address"] = arg0
	arg1, err := ec.field_Mutation_customerAddressUpdate_argsCustomerAccessToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["customerAccessToken"] = arg1
	arg2, err := ec.field_Mutation_customerAddressUpdate_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg2
	return args, nil
}
func (ec *executionContext) field_Mutation_customerAddressUpdate_argsAddress(
	ctx context.Context,
	rawArgs map[string]any,
) (model.MailingAddressInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
	if tmp, ok := rawArgs["address"]; ok {
		return ec.unmarshalNMailingAddressInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, tmp)
	}

	var zeroVal model.MailingAddressInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAddressUpdate_argsCustomerAccessToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
	if tmp, ok := rawArgs["customerAccessToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerAddressUpdate_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerCreate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerCreate_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_customerCreate_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CustomerCreateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCustomerCreateInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerCreateInput(ctx, tmp)
	}

	var zeroVal model.CustomerCreateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerDefaultAddressUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerDefaultAddressUpdate_argsAddressID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["addressId"] = arg0
	arg1, err := ec.field_Mutation_customerDefaultAddressUpdate_argsCustomerAccessToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["customerAccessToken"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_customerDefaultAddressUpdate_argsAddressID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("addressId"))
	if tmp, ok := rawArgs["addressId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerDefaultAddressUpdate_argsCustomerAccessToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
	if tmp, ok := rawArgs["customerAccessToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerRecover_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerRecover_argsEmail(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["email"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_customerRecover_argsEmail(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
	if tmp, ok := rawArgs["email"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerResetByUrl_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerResetByUrl_argsPassword(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["password"] = arg0
	arg1, err := ec.field_Mutation_customerResetByUrl_argsResetURL(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["resetUrl"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_customerResetByUrl_argsPassword(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
	if tmp, ok := rawArgs["password"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerResetByUrl_argsResetURL(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("resetUrl"))
	if tmp, ok := rawArgs["resetUrl"]; ok {
		return ec.unmarshalNURL2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerReset_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerReset_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_customerReset_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_customerReset_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerReset_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CustomerResetInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCustomerResetInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerResetInput(ctx, tmp)
	}

	var zeroVal model.CustomerResetInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerUpdate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_customerUpdate_argsCustomer(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["customer"] = arg0
	arg1, err := ec.field_Mutation_customerUpdate_argsCustomerAccessToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["customerAccessToken"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_customerUpdate_argsCustomer(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CustomerUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("customer"))
	if tmp, ok := rawArgs["customer"]; ok {
		return ec.unmarshalNCustomerUpdateInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUpdateInput(ctx, tmp)
	}

	var zeroVal model.CustomerUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_customerUpdate_argsCustomerAccessToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
	if tmp, ok := rawArgs["customerAccessToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_shopPayPaymentRequestSessionCreate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_shopPayPaymentRequestSessionCreate_argsPaymentRequest(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["paymentRequest"] = arg0
	arg1, err := ec.field_Mutation_shopPayPaymentRequestSessionCreate_argsSourceIdentifier(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sourceIdentifier"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_shopPayPaymentRequestSessionCreate_argsPaymentRequest(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ShopPayPaymentRequestInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRequest"))
	if tmp, ok := rawArgs["paymentRequest"]; ok {
		return ec.unmarshalNShopPayPaymentRequestInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestInput(ctx, tmp)
	}

	var zeroVal model.ShopPayPaymentRequestInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_shopPayPaymentRequestSessionCreate_argsSourceIdentifier(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceIdentifier"))
	if tmp, ok := rawArgs["sourceIdentifier"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_shopPayPaymentRequestSessionSubmit_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_shopPayPaymentRequestSessionSubmit_argsIdempotencyKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["idempotencyKey"] = arg0
	arg1, err := ec.field_Mutation_shopPayPaymentRequestSessionSubmit_argsOrderName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderName"] = arg1
	arg2, err := ec.field_Mutation_shopPayPaymentRequestSessionSubmit_argsPaymentRequest(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["paymentRequest"] = arg2
	arg3, err := ec.field_Mutation_shopPayPaymentRequestSessionSubmit_argsToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["token"] = arg3
	return args, nil
}
func (ec *executionContext) field_Mutation_shopPayPaymentRequestSessionSubmit_argsIdempotencyKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("idempotencyKey"))
	if tmp, ok := rawArgs["idempotencyKey"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_shopPayPaymentRequestSessionSubmit_argsOrderName(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderName"))
	if tmp, ok := rawArgs["orderName"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_shopPayPaymentRequestSessionSubmit_argsPaymentRequest(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ShopPayPaymentRequestInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRequest"))
	if tmp, ok := rawArgs["paymentRequest"]; ok {
		return ec.unmarshalNShopPayPaymentRequestInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestInput(ctx, tmp)
	}

	var zeroVal model.ShopPayPaymentRequestInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_shopPayPaymentRequestSessionSubmit_argsToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
	if tmp, ok := rawArgs["token"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Order_discountApplications_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Order_discountApplications_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Order_discountApplications_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Order_discountApplications_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Order_discountApplications_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Order_discountApplications_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_Order_discountApplications_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Order_discountApplications_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Order_discountApplications_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Order_discountApplications_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Order_discountApplications_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Order_lineItems_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Order_lineItems_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Order_lineItems_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Order_lineItems_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Order_lineItems_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Order_lineItems_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_Order_lineItems_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Order_lineItems_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Order_lineItems_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Order_lineItems_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Order_lineItems_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Order_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Order_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Order_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Order_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Order_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Order_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Order_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Order_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_Order_successfulFulfillments_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Order_successfulFulfillments_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg0
	return args, nil
}
func (ec *executionContext) field_Order_successfulFulfillments_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Page_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Page_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Page_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Page_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Page_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Page_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Page_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Page_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_components_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_ProductVariant_components_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_ProductVariant_components_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_ProductVariant_components_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_ProductVariant_components_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	return args, nil
}
func (ec *executionContext) field_ProductVariant_components_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_components_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_components_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_components_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_groupedBy_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_ProductVariant_groupedBy_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_ProductVariant_groupedBy_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_ProductVariant_groupedBy_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_ProductVariant_groupedBy_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	return args, nil
}
func (ec *executionContext) field_ProductVariant_groupedBy_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_groupedBy_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_groupedBy_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_groupedBy_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_ProductVariant_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_ProductVariant_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_ProductVariant_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_ProductVariant_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_ProductVariant_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_quantityPriceBreaks_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_ProductVariant_quantityPriceBreaks_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_ProductVariant_quantityPriceBreaks_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_ProductVariant_quantityPriceBreaks_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_ProductVariant_quantityPriceBreaks_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	return args, nil
}
func (ec *executionContext) field_ProductVariant_quantityPriceBreaks_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_quantityPriceBreaks_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_quantityPriceBreaks_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_quantityPriceBreaks_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_sellingPlanAllocations_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_ProductVariant_sellingPlanAllocations_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_ProductVariant_sellingPlanAllocations_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_ProductVariant_sellingPlanAllocations_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_ProductVariant_sellingPlanAllocations_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_ProductVariant_sellingPlanAllocations_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_ProductVariant_sellingPlanAllocations_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_sellingPlanAllocations_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_sellingPlanAllocations_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_sellingPlanAllocations_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_sellingPlanAllocations_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_storeAvailability_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_ProductVariant_storeAvailability_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_ProductVariant_storeAvailability_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_ProductVariant_storeAvailability_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_ProductVariant_storeAvailability_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_ProductVariant_storeAvailability_argsNear(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["near"] = arg4
	arg5, err := ec.field_ProductVariant_storeAvailability_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	return args, nil
}
func (ec *executionContext) field_ProductVariant_storeAvailability_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_storeAvailability_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_storeAvailability_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_storeAvailability_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_storeAvailability_argsNear(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.GeoCoordinateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("near"))
	if tmp, ok := rawArgs["near"]; ok {
		return ec.unmarshalOGeoCoordinateInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐGeoCoordinateInput(ctx, tmp)
	}

	var zeroVal *model.GeoCoordinateInput
	return zeroVal, nil
}

func (ec *executionContext) field_ProductVariant_storeAvailability_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_adjacentVariants_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_adjacentVariants_argsCaseInsensitiveMatch(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["caseInsensitiveMatch"] = arg0
	arg1, err := ec.field_Product_adjacentVariants_argsIgnoreUnknownOptions(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ignoreUnknownOptions"] = arg1
	arg2, err := ec.field_Product_adjacentVariants_argsSelectedOptions(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["selectedOptions"] = arg2
	return args, nil
}
func (ec *executionContext) field_Product_adjacentVariants_argsCaseInsensitiveMatch(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("caseInsensitiveMatch"))
	if tmp, ok := rawArgs["caseInsensitiveMatch"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_adjacentVariants_argsIgnoreUnknownOptions(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ignoreUnknownOptions"))
	if tmp, ok := rawArgs["ignoreUnknownOptions"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_adjacentVariants_argsSelectedOptions(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.SelectedOptionInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("selectedOptions"))
	if tmp, ok := rawArgs["selectedOptions"]; ok {
		return ec.unmarshalOSelectedOptionInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOptionInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.SelectedOptionInput
	return zeroVal, nil
}

func (ec *executionContext) field_Product_collections_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_collections_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Product_collections_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Product_collections_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Product_collections_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Product_collections_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_Product_collections_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_collections_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_collections_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_collections_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_collections_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_description_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_description_argsTruncateAt(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["truncateAt"] = arg0
	return args, nil
}
func (ec *executionContext) field_Product_description_argsTruncateAt(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("truncateAt"))
	if tmp, ok := rawArgs["truncateAt"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_images_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_images_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Product_images_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Product_images_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Product_images_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Product_images_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	arg5, err := ec.field_Product_images_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg5
	return args, nil
}
func (ec *executionContext) field_Product_images_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_images_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_images_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_images_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_images_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_images_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ProductImageSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOProductImageSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductImageSortKeys(ctx, tmp)
	}

	var zeroVal *model.ProductImageSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_Product_media_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_media_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Product_media_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Product_media_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Product_media_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Product_media_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	arg5, err := ec.field_Product_media_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg5
	return args, nil
}
func (ec *executionContext) field_Product_media_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_media_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_media_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_media_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_media_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_media_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ProductMediaSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOProductMediaSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductMediaSortKeys(ctx, tmp)
	}

	var zeroVal *model.ProductMediaSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_Product_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Product_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Product_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Product_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_Product_options_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_options_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg0
	return args, nil
}
func (ec *executionContext) field_Product_options_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_selectedOrFirstAvailableVariant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_selectedOrFirstAvailableVariant_argsCaseInsensitiveMatch(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["caseInsensitiveMatch"] = arg0
	arg1, err := ec.field_Product_selectedOrFirstAvailableVariant_argsIgnoreUnknownOptions(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ignoreUnknownOptions"] = arg1
	arg2, err := ec.field_Product_selectedOrFirstAvailableVariant_argsSelectedOptions(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["selectedOptions"] = arg2
	return args, nil
}
func (ec *executionContext) field_Product_selectedOrFirstAvailableVariant_argsCaseInsensitiveMatch(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("caseInsensitiveMatch"))
	if tmp, ok := rawArgs["caseInsensitiveMatch"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_selectedOrFirstAvailableVariant_argsIgnoreUnknownOptions(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ignoreUnknownOptions"))
	if tmp, ok := rawArgs["ignoreUnknownOptions"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_selectedOrFirstAvailableVariant_argsSelectedOptions(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.SelectedOptionInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("selectedOptions"))
	if tmp, ok := rawArgs["selectedOptions"]; ok {
		return ec.unmarshalOSelectedOptionInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOptionInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.SelectedOptionInput
	return zeroVal, nil
}

func (ec *executionContext) field_Product_sellingPlanGroups_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_sellingPlanGroups_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Product_sellingPlanGroups_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Product_sellingPlanGroups_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Product_sellingPlanGroups_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Product_sellingPlanGroups_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_Product_sellingPlanGroups_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_sellingPlanGroups_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_sellingPlanGroups_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_sellingPlanGroups_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_sellingPlanGroups_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_variantBySelectedOptions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_variantBySelectedOptions_argsCaseInsensitiveMatch(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["caseInsensitiveMatch"] = arg0
	arg1, err := ec.field_Product_variantBySelectedOptions_argsIgnoreUnknownOptions(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ignoreUnknownOptions"] = arg1
	arg2, err := ec.field_Product_variantBySelectedOptions_argsSelectedOptions(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["selectedOptions"] = arg2
	return args, nil
}
func (ec *executionContext) field_Product_variantBySelectedOptions_argsCaseInsensitiveMatch(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("caseInsensitiveMatch"))
	if tmp, ok := rawArgs["caseInsensitiveMatch"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_variantBySelectedOptions_argsIgnoreUnknownOptions(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ignoreUnknownOptions"))
	if tmp, ok := rawArgs["ignoreUnknownOptions"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_variantBySelectedOptions_argsSelectedOptions(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.SelectedOptionInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("selectedOptions"))
	if tmp, ok := rawArgs["selectedOptions"]; ok {
		return ec.unmarshalNSelectedOptionInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOptionInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.SelectedOptionInput
	return zeroVal, nil
}

func (ec *executionContext) field_Product_variants_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Product_variants_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Product_variants_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_Product_variants_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Product_variants_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Product_variants_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	arg5, err := ec.field_Product_variants_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg5
	return args, nil
}
func (ec *executionContext) field_Product_variants_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_variants_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Product_variants_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_variants_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Product_variants_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Product_variants_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ProductVariantSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOProductVariantSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantSortKeys(ctx, tmp)
	}

	var zeroVal *model.ProductVariantSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_article_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_article_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_article_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_articles_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_articles_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_QueryRoot_articles_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_QueryRoot_articles_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_QueryRoot_articles_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_QueryRoot_articles_argsQuery(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["query"] = arg4
	arg5, err := ec.field_QueryRoot_articles_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	arg6, err := ec.field_QueryRoot_articles_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg6
	return args, nil
}
func (ec *executionContext) field_QueryRoot_articles_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_articles_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_articles_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_articles_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_articles_argsQuery(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
	if tmp, ok := rawArgs["query"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_articles_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_articles_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ArticleSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOArticleSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleSortKeys(ctx, tmp)
	}

	var zeroVal *model.ArticleSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_blogByHandle_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_blogByHandle_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_blogByHandle_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_blog_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_blog_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	arg1, err := ec.field_QueryRoot_blog_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg1
	return args, nil
}
func (ec *executionContext) field_QueryRoot_blog_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_blog_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_blogs_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_blogs_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_QueryRoot_blogs_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_QueryRoot_blogs_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_QueryRoot_blogs_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_QueryRoot_blogs_argsQuery(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["query"] = arg4
	arg5, err := ec.field_QueryRoot_blogs_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	arg6, err := ec.field_QueryRoot_blogs_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg6
	return args, nil
}
func (ec *executionContext) field_QueryRoot_blogs_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_blogs_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_blogs_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_blogs_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_blogs_argsQuery(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
	if tmp, ok := rawArgs["query"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_blogs_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_blogs_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.BlogSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOBlogSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogSortKeys(ctx, tmp)
	}

	var zeroVal *model.BlogSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_cartCompletionAttempt_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_cartCompletionAttempt_argsAttemptID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["attemptId"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_cartCompletionAttempt_argsAttemptID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptId"))
	if tmp, ok := rawArgs["attemptId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_cart_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_cart_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_cart_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_collectionByHandle_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_collectionByHandle_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_collectionByHandle_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_collection_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_collection_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	arg1, err := ec.field_QueryRoot_collection_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg1
	return args, nil
}
func (ec *executionContext) field_QueryRoot_collection_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_collection_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_collections_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_collections_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_QueryRoot_collections_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_QueryRoot_collections_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_QueryRoot_collections_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_QueryRoot_collections_argsQuery(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["query"] = arg4
	arg5, err := ec.field_QueryRoot_collections_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	arg6, err := ec.field_QueryRoot_collections_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg6
	return args, nil
}
func (ec *executionContext) field_QueryRoot_collections_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_collections_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_collections_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_collections_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_collections_argsQuery(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
	if tmp, ok := rawArgs["query"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_collections_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_collections_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.CollectionSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOCollectionSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionSortKeys(ctx, tmp)
	}

	var zeroVal *model.CollectionSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_customer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_customer_argsCustomerAccessToken(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["customerAccessToken"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_customer_argsCustomerAccessToken(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
	if tmp, ok := rawArgs["customerAccessToken"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_locations_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_locations_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_QueryRoot_locations_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_QueryRoot_locations_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_QueryRoot_locations_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_QueryRoot_locations_argsNear(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["near"] = arg4
	arg5, err := ec.field_QueryRoot_locations_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	arg6, err := ec.field_QueryRoot_locations_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg6
	return args, nil
}
func (ec *executionContext) field_QueryRoot_locations_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_locations_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_locations_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_locations_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_locations_argsNear(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.GeoCoordinateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("near"))
	if tmp, ok := rawArgs["near"]; ok {
		return ec.unmarshalOGeoCoordinateInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐGeoCoordinateInput(ctx, tmp)
	}

	var zeroVal *model.GeoCoordinateInput
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_locations_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_locations_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.LocationSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOLocationSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationSortKeys(ctx, tmp)
	}

	var zeroVal *model.LocationSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_menu_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_menu_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_menu_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_metaobject_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_metaobject_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	arg1, err := ec.field_QueryRoot_metaobject_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg1
	return args, nil
}
func (ec *executionContext) field_QueryRoot_metaobject_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.MetaobjectHandleInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalOMetaobjectHandleInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectHandleInput(ctx, tmp)
	}

	var zeroVal *model.MetaobjectHandleInput
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_metaobject_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_metaobjects_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_metaobjects_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_QueryRoot_metaobjects_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_QueryRoot_metaobjects_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_QueryRoot_metaobjects_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_QueryRoot_metaobjects_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	arg5, err := ec.field_QueryRoot_metaobjects_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg5
	arg6, err := ec.field_QueryRoot_metaobjects_argsType(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["type"] = arg6
	return args, nil
}
func (ec *executionContext) field_QueryRoot_metaobjects_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_metaobjects_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_metaobjects_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_metaobjects_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_metaobjects_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_metaobjects_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_metaobjects_argsType(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
	if tmp, ok := rawArgs["type"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_node_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_node_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_node_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_nodes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_nodes_argsIds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ids"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_nodes_argsIds(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
	if tmp, ok := rawArgs["ids"]; ok {
		return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_pageByHandle_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_pageByHandle_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_pageByHandle_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_page_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_page_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	arg1, err := ec.field_QueryRoot_page_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg1
	return args, nil
}
func (ec *executionContext) field_QueryRoot_page_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_page_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_pages_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_pages_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_QueryRoot_pages_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_QueryRoot_pages_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_QueryRoot_pages_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_QueryRoot_pages_argsQuery(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["query"] = arg4
	arg5, err := ec.field_QueryRoot_pages_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	arg6, err := ec.field_QueryRoot_pages_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg6
	return args, nil
}
func (ec *executionContext) field_QueryRoot_pages_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_pages_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_pages_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_pages_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_pages_argsQuery(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
	if tmp, ok := rawArgs["query"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_pages_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_pages_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PageSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOPageSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageSortKeys(ctx, tmp)
	}

	var zeroVal *model.PageSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_predictiveSearch_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_predictiveSearch_argsLimit(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg0
	arg1, err := ec.field_QueryRoot_predictiveSearch_argsLimitScope(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["limitScope"] = arg1
	arg2, err := ec.field_QueryRoot_predictiveSearch_argsQuery(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["query"] = arg2
	arg3, err := ec.field_QueryRoot_predictiveSearch_argsSearchableFields(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["searchableFields"] = arg3
	arg4, err := ec.field_QueryRoot_predictiveSearch_argsTypes(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["types"] = arg4
	arg5, err := ec.field_QueryRoot_predictiveSearch_argsUnavailableProducts(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["unavailableProducts"] = arg5
	return args, nil
}
func (ec *executionContext) field_QueryRoot_predictiveSearch_argsLimit(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
	if tmp, ok := rawArgs["limit"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_predictiveSearch_argsLimitScope(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PredictiveSearchLimitScope, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("limitScope"))
	if tmp, ok := rawArgs["limitScope"]; ok {
		return ec.unmarshalOPredictiveSearchLimitScope2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchLimitScope(ctx, tmp)
	}

	var zeroVal *model.PredictiveSearchLimitScope
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_predictiveSearch_argsQuery(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
	if tmp, ok := rawArgs["query"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_predictiveSearch_argsSearchableFields(
	ctx context.Context,
	rawArgs map[string]any,
) ([]model.SearchableField, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("searchableFields"))
	if tmp, ok := rawArgs["searchableFields"]; ok {
		return ec.unmarshalOSearchableField2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchableFieldᚄ(ctx, tmp)
	}

	var zeroVal []model.SearchableField
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_predictiveSearch_argsTypes(
	ctx context.Context,
	rawArgs map[string]any,
) ([]model.PredictiveSearchType, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("types"))
	if tmp, ok := rawArgs["types"]; ok {
		return ec.unmarshalOPredictiveSearchType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchTypeᚄ(ctx, tmp)
	}

	var zeroVal []model.PredictiveSearchType
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_predictiveSearch_argsUnavailableProducts(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.SearchUnavailableProductsType, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("unavailableProducts"))
	if tmp, ok := rawArgs["unavailableProducts"]; ok {
		return ec.unmarshalOSearchUnavailableProductsType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchUnavailableProductsType(ctx, tmp)
	}

	var zeroVal *model.SearchUnavailableProductsType
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_productByHandle_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_productByHandle_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_productByHandle_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_productRecommendations_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_productRecommendations_argsIntent(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["intent"] = arg0
	arg1, err := ec.field_QueryRoot_productRecommendations_argsProductHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["productHandle"] = arg1
	arg2, err := ec.field_QueryRoot_productRecommendations_argsProductID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["productId"] = arg2
	return args, nil
}
func (ec *executionContext) field_QueryRoot_productRecommendations_argsIntent(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ProductRecommendationIntent, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("intent"))
	if tmp, ok := rawArgs["intent"]; ok {
		return ec.unmarshalOProductRecommendationIntent2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductRecommendationIntent(ctx, tmp)
	}

	var zeroVal *model.ProductRecommendationIntent
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_productRecommendations_argsProductHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("productHandle"))
	if tmp, ok := rawArgs["productHandle"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_productRecommendations_argsProductID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
	if tmp, ok := rawArgs["productId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_productTags_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_productTags_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_productTags_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalNInt2int32(ctx, tmp)
	}

	var zeroVal int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_productTypes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_productTypes_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_productTypes_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalNInt2int32(ctx, tmp)
	}

	var zeroVal int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_product_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_product_argsHandle(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["handle"] = arg0
	arg1, err := ec.field_QueryRoot_product_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg1
	return args, nil
}
func (ec *executionContext) field_QueryRoot_product_argsHandle(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
	if tmp, ok := rawArgs["handle"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_product_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_products_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_products_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_QueryRoot_products_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_QueryRoot_products_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_QueryRoot_products_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_QueryRoot_products_argsQuery(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["query"] = arg4
	arg5, err := ec.field_QueryRoot_products_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	arg6, err := ec.field_QueryRoot_products_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg6
	return args, nil
}
func (ec *executionContext) field_QueryRoot_products_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_products_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_products_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_products_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_products_argsQuery(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
	if tmp, ok := rawArgs["query"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_products_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_products_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ProductSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOProductSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductSortKeys(ctx, tmp)
	}

	var zeroVal *model.ProductSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_search_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_QueryRoot_search_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_QueryRoot_search_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_QueryRoot_search_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_QueryRoot_search_argsPrefix(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["prefix"] = arg4
	arg5, err := ec.field_QueryRoot_search_argsProductFilters(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["productFilters"] = arg5
	arg6, err := ec.field_QueryRoot_search_argsQuery(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["query"] = arg6
	arg7, err := ec.field_QueryRoot_search_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg7
	arg8, err := ec.field_QueryRoot_search_argsSortKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortKey"] = arg8
	arg9, err := ec.field_QueryRoot_search_argsTypes(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["types"] = arg9
	arg10, err := ec.field_QueryRoot_search_argsUnavailableProducts(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["unavailableProducts"] = arg10
	return args, nil
}
func (ec *executionContext) field_QueryRoot_search_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_argsPrefix(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.SearchPrefixQueryType, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("prefix"))
	if tmp, ok := rawArgs["prefix"]; ok {
		return ec.unmarshalOSearchPrefixQueryType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchPrefixQueryType(ctx, tmp)
	}

	var zeroVal *model.SearchPrefixQueryType
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_argsProductFilters(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.ProductFilter, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("productFilters"))
	if tmp, ok := rawArgs["productFilters"]; ok {
		return ec.unmarshalOProductFilter2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductFilterᚄ(ctx, tmp)
	}

	var zeroVal []*model.ProductFilter
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_argsQuery(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
	if tmp, ok := rawArgs["query"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_argsSortKey(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.SearchSortKeys, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortKey"))
	if tmp, ok := rawArgs["sortKey"]; ok {
		return ec.unmarshalOSearchSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchSortKeys(ctx, tmp)
	}

	var zeroVal *model.SearchSortKeys
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_argsTypes(
	ctx context.Context,
	rawArgs map[string]any,
) ([]model.SearchType, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("types"))
	if tmp, ok := rawArgs["types"]; ok {
		return ec.unmarshalOSearchType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchTypeᚄ(ctx, tmp)
	}

	var zeroVal []model.SearchType
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_search_argsUnavailableProducts(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.SearchUnavailableProductsType, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("unavailableProducts"))
	if tmp, ok := rawArgs["unavailableProducts"]; ok {
		return ec.unmarshalOSearchUnavailableProductsType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchUnavailableProductsType(ctx, tmp)
	}

	var zeroVal *model.SearchUnavailableProductsType
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_sitemap_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_sitemap_argsType(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["type"] = arg0
	return args, nil
}
func (ec *executionContext) field_QueryRoot_sitemap_argsType(
	ctx context.Context,
	rawArgs map[string]any,
) (model.SitemapType, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
	if tmp, ok := rawArgs["type"]; ok {
		return ec.unmarshalNSitemapType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemapType(ctx, tmp)
	}

	var zeroVal model.SitemapType
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_urlRedirects_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_QueryRoot_urlRedirects_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_QueryRoot_urlRedirects_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_QueryRoot_urlRedirects_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_QueryRoot_urlRedirects_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_QueryRoot_urlRedirects_argsQuery(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["query"] = arg4
	arg5, err := ec.field_QueryRoot_urlRedirects_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg5
	return args, nil
}
func (ec *executionContext) field_QueryRoot_urlRedirects_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_urlRedirects_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_urlRedirects_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_urlRedirects_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_urlRedirects_argsQuery(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
	if tmp, ok := rawArgs["query"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_QueryRoot_urlRedirects_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_SellingPlanGroup_sellingPlans_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SellingPlanGroup_sellingPlans_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_SellingPlanGroup_sellingPlans_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg1
	arg2, err := ec.field_SellingPlanGroup_sellingPlans_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_SellingPlanGroup_sellingPlans_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_SellingPlanGroup_sellingPlans_argsReverse(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["reverse"] = arg4
	return args, nil
}
func (ec *executionContext) field_SellingPlanGroup_sellingPlans_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_SellingPlanGroup_sellingPlans_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_SellingPlanGroup_sellingPlans_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_SellingPlanGroup_sellingPlans_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_SellingPlanGroup_sellingPlans_argsReverse(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("reverse"))
	if tmp, ok := rawArgs["reverse"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_SellingPlan_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SellingPlan_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_SellingPlan_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_SellingPlan_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_SellingPlan_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_SellingPlan_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SellingPlan_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_SellingPlan_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_ShopPayInstallmentsPricing_productVariantPricing_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_ShopPayInstallmentsPricing_productVariantPricing_argsVariantID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["variantId"] = arg0
	return args, nil
}
func (ec *executionContext) field_ShopPayInstallmentsPricing_productVariantPricing_argsVariantID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("variantId"))
	if tmp, ok := rawArgs["variantId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Shop_metafield_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Shop_metafield_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg0
	arg1, err := ec.field_Shop_metafield_argsNamespace(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["namespace"] = arg1
	return args, nil
}
func (ec *executionContext) field_Shop_metafield_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Shop_metafield_argsNamespace(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
	if tmp, ok := rawArgs["namespace"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Shop_metafields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Shop_metafields_argsIdentifiers(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["identifiers"] = arg0
	return args, nil
}
func (ec *executionContext) field_Shop_metafields_argsIdentifiers(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.HasMetafieldsIdentifier, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
	if tmp, ok := rawArgs["identifiers"]; ok {
		return ec.unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx, tmp)
	}

	var zeroVal []*model.HasMetafieldsIdentifier
	return zeroVal, nil
}

func (ec *executionContext) field_Sitemap_resources_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Sitemap_resources_argsPage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["page"] = arg0
	return args, nil
}
func (ec *executionContext) field_Sitemap_resources_argsPage(
	ctx context.Context,
	rawArgs map[string]any,
) (int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
	if tmp, ok := rawArgs["page"]; ok {
		return ec.unmarshalNInt2int32(ctx, tmp)
	}

	var zeroVal int32
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

func (ec *executionContext) _queryMiddleware(ctx context.Context, obj *ast.OperationDefinition, next func(ctx context.Context) (any, error)) graphql.Marshaler {

	for _, d := range obj.Directives {
		switch d.Name {
		case "inContext":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_inContext_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			n := next
			next = func(ctx context.Context) (any, error) {
				if ec.directives.InContext == nil {
					return nil, errors.New("directive inContext is not implemented")
				}
				return ec.directives.InContext(ctx, obj, n, args["buyer"].(*model.BuyerInput), args["country"].(*model.CountryCode), args["language"].(*model.LanguageCode), args["preferredLocationId"].(*string))
			}
		}
	}
	tmp, err := next(ctx)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if data, ok := tmp.(graphql.Marshaler); ok {
		return data
	}
	ec.Errorf(ctx, `unexpected type %T from directive, should be graphql.Marshaler`, tmp)
	return graphql.Null

}

func (ec *executionContext) _mutationMiddleware(ctx context.Context, obj *ast.OperationDefinition, next func(ctx context.Context) (any, error)) graphql.Marshaler {

	for _, d := range obj.Directives {
		switch d.Name {
		case "inContext":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_inContext_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			n := next
			next = func(ctx context.Context) (any, error) {
				if ec.directives.InContext == nil {
					return nil, errors.New("directive inContext is not implemented")
				}
				return ec.directives.InContext(ctx, obj, n, args["buyer"].(*model.BuyerInput), args["country"].(*model.CountryCode), args["language"].(*model.LanguageCode), args["preferredLocationId"].(*string))
			}
		}
	}
	tmp, err := next(ctx)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if data, ok := tmp.(graphql.Marshaler); ok {
		return data
	}
	ec.Errorf(ctx, `unexpected type %T from directive, should be graphql.Marshaler`, tmp)
	return graphql.Null

}

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ApiVersion_displayName(ctx context.Context, field graphql.CollectedField, obj *model.APIVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApiVersion_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApiVersion_displayName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiVersion_handle(ctx context.Context, field graphql.CollectedField, obj *model.APIVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApiVersion_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApiVersion_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiVersion_supported(ctx context.Context, field graphql.CollectedField, obj *model.APIVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApiVersion_supported(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supported, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApiVersion_supported(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AppliedGiftCard_amountUsed(ctx context.Context, field graphql.CollectedField, obj *model.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AppliedGiftCard_amountUsed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountUsed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AppliedGiftCard_amountUsed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AppliedGiftCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AppliedGiftCard_amountUsedV2(ctx context.Context, field graphql.CollectedField, obj *model.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AppliedGiftCard_amountUsedV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountUsedV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AppliedGiftCard_amountUsedV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AppliedGiftCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AppliedGiftCard_balance(ctx context.Context, field graphql.CollectedField, obj *model.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AppliedGiftCard_balance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AppliedGiftCard_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AppliedGiftCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AppliedGiftCard_balanceV2(ctx context.Context, field graphql.CollectedField, obj *model.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AppliedGiftCard_balanceV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BalanceV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AppliedGiftCard_balanceV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AppliedGiftCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AppliedGiftCard_id(ctx context.Context, field graphql.CollectedField, obj *model.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AppliedGiftCard_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AppliedGiftCard_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AppliedGiftCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AppliedGiftCard_lastCharacters(ctx context.Context, field graphql.CollectedField, obj *model.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AppliedGiftCard_lastCharacters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastCharacters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AppliedGiftCard_lastCharacters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AppliedGiftCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AppliedGiftCard_presentmentAmountUsed(ctx context.Context, field graphql.CollectedField, obj *model.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AppliedGiftCard_presentmentAmountUsed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PresentmentAmountUsed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AppliedGiftCard_presentmentAmountUsed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AppliedGiftCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_author(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArticleAuthor)
	fc.Result = res
	return ec.marshalNArticleAuthor2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleAuthor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bio":
				return ec.fieldContext_ArticleAuthor_bio(ctx, field)
			case "email":
				return ec.fieldContext_ArticleAuthor_email(ctx, field)
			case "firstName":
				return ec.fieldContext_ArticleAuthor_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_ArticleAuthor_lastName(ctx, field)
			case "name":
				return ec.fieldContext_ArticleAuthor_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleAuthor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_authorV2(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_authorV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ArticleAuthor)
	fc.Result = res
	return ec.marshalOArticleAuthor2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleAuthor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_authorV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bio":
				return ec.fieldContext_ArticleAuthor_bio(ctx, field)
			case "email":
				return ec.fieldContext_ArticleAuthor_email(ctx, field)
			case "firstName":
				return ec.fieldContext_ArticleAuthor_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_ArticleAuthor_lastName(ctx, field)
			case "name":
				return ec.fieldContext_ArticleAuthor_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleAuthor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_blog(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_blog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Blog)
	fc.Result = res
	return ec.marshalNBlog2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlog(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_blog(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "articleByHandle":
				return ec.fieldContext_Blog_articleByHandle(ctx, field)
			case "articles":
				return ec.fieldContext_Blog_articles(ctx, field)
			case "authors":
				return ec.fieldContext_Blog_authors(ctx, field)
			case "handle":
				return ec.fieldContext_Blog_handle(ctx, field)
			case "id":
				return ec.fieldContext_Blog_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Blog_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Blog_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Blog_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Blog_seo(ctx, field)
			case "title":
				return ec.fieldContext_Blog_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_comments(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CommentConnection)
	fc.Result = res
	return ec.marshalNCommentConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCommentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CommentConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_CommentConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CommentConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommentConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Article_comments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Article_content(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Article_content_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Article_contentHtml(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_contentHtml(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentHTML, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNHTML2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_contentHtml(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_excerpt(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_excerpt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Excerpt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_excerpt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Article_excerpt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Article_excerptHtml(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_excerptHtml(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcerptHTML, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOHTML2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_excerptHtml(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_handle(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_id(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_image(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Article_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Article_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Article_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Article_onlineStoreUrl(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_onlineStoreUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnlineStoreURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_onlineStoreUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_publishedAt(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_publishedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_publishedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_seo(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_seo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Seo)
	fc.Result = res
	return ec.marshalOSEO2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSeo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_seo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_SEO_description(ctx, field)
			case "title":
				return ec.fieldContext_SEO_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SEO", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_tags(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_tags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_title(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_trackingParameters(ctx context.Context, field graphql.CollectedField, obj *model.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_trackingParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrackingParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_trackingParameters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleAuthor_bio(ctx context.Context, field graphql.CollectedField, obj *model.ArticleAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleAuthor_bio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleAuthor_bio(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleAuthor_email(ctx context.Context, field graphql.CollectedField, obj *model.ArticleAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleAuthor_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleAuthor_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleAuthor_firstName(ctx context.Context, field graphql.CollectedField, obj *model.ArticleAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleAuthor_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleAuthor_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleAuthor_lastName(ctx context.Context, field graphql.CollectedField, obj *model.ArticleAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleAuthor_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleAuthor_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleAuthor_name(ctx context.Context, field graphql.CollectedField, obj *model.ArticleAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleAuthor_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleAuthor_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ArticleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ArticleEdge)
	fc.Result = res
	return ec.marshalNArticleEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ArticleEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ArticleEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.ArticleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Article)
	fc.Result = res
	return ec.marshalNArticle2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Article_author(ctx, field)
			case "authorV2":
				return ec.fieldContext_Article_authorV2(ctx, field)
			case "blog":
				return ec.fieldContext_Article_blog(ctx, field)
			case "comments":
				return ec.fieldContext_Article_comments(ctx, field)
			case "content":
				return ec.fieldContext_Article_content(ctx, field)
			case "contentHtml":
				return ec.fieldContext_Article_contentHtml(ctx, field)
			case "excerpt":
				return ec.fieldContext_Article_excerpt(ctx, field)
			case "excerptHtml":
				return ec.fieldContext_Article_excerptHtml(ctx, field)
			case "handle":
				return ec.fieldContext_Article_handle(ctx, field)
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "image":
				return ec.fieldContext_Article_image(ctx, field)
			case "metafield":
				return ec.fieldContext_Article_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Article_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Article_onlineStoreUrl(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Article_publishedAt(ctx, field)
			case "seo":
				return ec.fieldContext_Article_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Article_tags(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Article_trackingParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ArticleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ArticleEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ArticleEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Article)
	fc.Result = res
	return ec.marshalNArticle2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Article_author(ctx, field)
			case "authorV2":
				return ec.fieldContext_Article_authorV2(ctx, field)
			case "blog":
				return ec.fieldContext_Article_blog(ctx, field)
			case "comments":
				return ec.fieldContext_Article_comments(ctx, field)
			case "content":
				return ec.fieldContext_Article_content(ctx, field)
			case "contentHtml":
				return ec.fieldContext_Article_contentHtml(ctx, field)
			case "excerpt":
				return ec.fieldContext_Article_excerpt(ctx, field)
			case "excerptHtml":
				return ec.fieldContext_Article_excerptHtml(ctx, field)
			case "handle":
				return ec.fieldContext_Article_handle(ctx, field)
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "image":
				return ec.fieldContext_Article_image(ctx, field)
			case "metafield":
				return ec.fieldContext_Article_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Article_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Article_onlineStoreUrl(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Article_publishedAt(ctx, field)
			case "seo":
				return ec.fieldContext_Article_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Article_tags(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Article_trackingParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attribute_key(ctx context.Context, field graphql.CollectedField, obj *model.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attribute_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attribute_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attribute_value(ctx context.Context, field graphql.CollectedField, obj *model.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attribute_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attribute_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AutomaticDiscountApplication_allocationMethod(ctx context.Context, field graphql.CollectedField, obj *model.AutomaticDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AutomaticDiscountApplication_allocationMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllocationMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationAllocationMethod)
	fc.Result = res
	return ec.marshalNDiscountApplicationAllocationMethod2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationAllocationMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AutomaticDiscountApplication_allocationMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AutomaticDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationAllocationMethod does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AutomaticDiscountApplication_targetSelection(ctx context.Context, field graphql.CollectedField, obj *model.AutomaticDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AutomaticDiscountApplication_targetSelection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetSelection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetSelection)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetSelection2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AutomaticDiscountApplication_targetSelection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AutomaticDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetSelection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AutomaticDiscountApplication_targetType(ctx context.Context, field graphql.CollectedField, obj *model.AutomaticDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AutomaticDiscountApplication_targetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetType)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AutomaticDiscountApplication_targetType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AutomaticDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AutomaticDiscountApplication_title(ctx context.Context, field graphql.CollectedField, obj *model.AutomaticDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AutomaticDiscountApplication_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AutomaticDiscountApplication_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AutomaticDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AutomaticDiscountApplication_value(ctx context.Context, field graphql.CollectedField, obj *model.AutomaticDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AutomaticDiscountApplication_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PricingValue)
	fc.Result = res
	return ec.marshalNPricingValue2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPricingValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AutomaticDiscountApplication_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AutomaticDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PricingValue does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AvailableShippingRates_ready(ctx context.Context, field graphql.CollectedField, obj *model.AvailableShippingRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AvailableShippingRates_ready(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ready, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AvailableShippingRates_ready(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AvailableShippingRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AvailableShippingRates_shippingRates(ctx context.Context, field graphql.CollectedField, obj *model.AvailableShippingRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AvailableShippingRates_shippingRates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingRates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ShippingRate)
	fc.Result = res
	return ec.marshalOShippingRate2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShippingRateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AvailableShippingRates_shippingRates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AvailableShippingRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "handle":
				return ec.fieldContext_ShippingRate_handle(ctx, field)
			case "price":
				return ec.fieldContext_ShippingRate_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ShippingRate_priceV2(ctx, field)
			case "title":
				return ec.fieldContext_ShippingRate_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShippingRate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseCartLineConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.BaseCartLineConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseCartLineConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BaseCartLineEdge)
	fc.Result = res
	return ec.marshalNBaseCartLineEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLineEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseCartLineConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseCartLineConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_BaseCartLineEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_BaseCartLineEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BaseCartLineEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseCartLineConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.BaseCartLineConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseCartLineConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BaseCartLine)
	fc.Result = res
	return ec.marshalNBaseCartLine2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseCartLineConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseCartLineConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseCartLineConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.BaseCartLineConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseCartLineConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseCartLineConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseCartLineConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseCartLineEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.BaseCartLineEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseCartLineEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseCartLineEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseCartLineEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseCartLineEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.BaseCartLineEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseCartLineEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.BaseCartLine)
	fc.Result = res
	return ec.marshalNBaseCartLine2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLine(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseCartLineEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseCartLineEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blog_articleByHandle(ctx context.Context, field graphql.CollectedField, obj *model.Blog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blog_articleByHandle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArticleByHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Article)
	fc.Result = res
	return ec.marshalOArticle2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blog_articleByHandle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Article_author(ctx, field)
			case "authorV2":
				return ec.fieldContext_Article_authorV2(ctx, field)
			case "blog":
				return ec.fieldContext_Article_blog(ctx, field)
			case "comments":
				return ec.fieldContext_Article_comments(ctx, field)
			case "content":
				return ec.fieldContext_Article_content(ctx, field)
			case "contentHtml":
				return ec.fieldContext_Article_contentHtml(ctx, field)
			case "excerpt":
				return ec.fieldContext_Article_excerpt(ctx, field)
			case "excerptHtml":
				return ec.fieldContext_Article_excerptHtml(ctx, field)
			case "handle":
				return ec.fieldContext_Article_handle(ctx, field)
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "image":
				return ec.fieldContext_Article_image(ctx, field)
			case "metafield":
				return ec.fieldContext_Article_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Article_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Article_onlineStoreUrl(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Article_publishedAt(ctx, field)
			case "seo":
				return ec.fieldContext_Article_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Article_tags(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Article_trackingParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Blog_articleByHandle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Blog_articles(ctx context.Context, field graphql.CollectedField, obj *model.Blog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blog_articles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Articles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArticleConnection)
	fc.Result = res
	return ec.marshalNArticleConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blog_articles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ArticleConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ArticleConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ArticleConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Blog_articles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Blog_authors(ctx context.Context, field graphql.CollectedField, obj *model.Blog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blog_authors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ArticleAuthor)
	fc.Result = res
	return ec.marshalNArticleAuthor2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleAuthorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blog_authors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bio":
				return ec.fieldContext_ArticleAuthor_bio(ctx, field)
			case "email":
				return ec.fieldContext_ArticleAuthor_email(ctx, field)
			case "firstName":
				return ec.fieldContext_ArticleAuthor_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_ArticleAuthor_lastName(ctx, field)
			case "name":
				return ec.fieldContext_ArticleAuthor_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleAuthor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blog_handle(ctx context.Context, field graphql.CollectedField, obj *model.Blog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blog_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blog_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blog_id(ctx context.Context, field graphql.CollectedField, obj *model.Blog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blog_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blog_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Blog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blog_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blog_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Blog_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Blog_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Blog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blog_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blog_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Blog_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Blog_onlineStoreUrl(ctx context.Context, field graphql.CollectedField, obj *model.Blog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blog_onlineStoreUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnlineStoreURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blog_onlineStoreUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blog_seo(ctx context.Context, field graphql.CollectedField, obj *model.Blog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blog_seo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Seo)
	fc.Result = res
	return ec.marshalOSEO2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSeo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blog_seo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_SEO_description(ctx, field)
			case "title":
				return ec.fieldContext_SEO_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SEO", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blog_title(ctx context.Context, field graphql.CollectedField, obj *model.Blog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blog_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blog_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlogConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.BlogConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlogConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BlogEdge)
	fc.Result = res
	return ec.marshalNBlogEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlogConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlogConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_BlogEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_BlogEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlogEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlogConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.BlogConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlogConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Blog)
	fc.Result = res
	return ec.marshalNBlog2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlogConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlogConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "articleByHandle":
				return ec.fieldContext_Blog_articleByHandle(ctx, field)
			case "articles":
				return ec.fieldContext_Blog_articles(ctx, field)
			case "authors":
				return ec.fieldContext_Blog_authors(ctx, field)
			case "handle":
				return ec.fieldContext_Blog_handle(ctx, field)
			case "id":
				return ec.fieldContext_Blog_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Blog_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Blog_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Blog_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Blog_seo(ctx, field)
			case "title":
				return ec.fieldContext_Blog_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlogConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.BlogConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlogConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlogConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlogConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlogEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.BlogEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlogEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlogEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlogEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlogEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.BlogEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlogEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Blog)
	fc.Result = res
	return ec.marshalNBlog2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlog(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlogEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlogEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "articleByHandle":
				return ec.fieldContext_Blog_articleByHandle(ctx, field)
			case "articles":
				return ec.fieldContext_Blog_articles(ctx, field)
			case "authors":
				return ec.fieldContext_Blog_authors(ctx, field)
			case "handle":
				return ec.fieldContext_Blog_handle(ctx, field)
			case "id":
				return ec.fieldContext_Blog_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Blog_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Blog_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Blog_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Blog_seo(ctx, field)
			case "title":
				return ec.fieldContext_Blog_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Brand_colors(ctx context.Context, field graphql.CollectedField, obj *model.Brand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Brand_colors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BrandColors)
	fc.Result = res
	return ec.marshalNBrandColors2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBrandColors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Brand_colors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Brand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "primary":
				return ec.fieldContext_BrandColors_primary(ctx, field)
			case "secondary":
				return ec.fieldContext_BrandColors_secondary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BrandColors", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Brand_coverImage(ctx context.Context, field graphql.CollectedField, obj *model.Brand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Brand_coverImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoverImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MediaImage)
	fc.Result = res
	return ec.marshalOMediaImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Brand_coverImage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Brand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alt":
				return ec.fieldContext_MediaImage_alt(ctx, field)
			case "id":
				return ec.fieldContext_MediaImage_id(ctx, field)
			case "image":
				return ec.fieldContext_MediaImage_image(ctx, field)
			case "mediaContentType":
				return ec.fieldContext_MediaImage_mediaContentType(ctx, field)
			case "presentation":
				return ec.fieldContext_MediaImage_presentation(ctx, field)
			case "previewImage":
				return ec.fieldContext_MediaImage_previewImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Brand_logo(ctx context.Context, field graphql.CollectedField, obj *model.Brand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Brand_logo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MediaImage)
	fc.Result = res
	return ec.marshalOMediaImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Brand_logo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Brand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alt":
				return ec.fieldContext_MediaImage_alt(ctx, field)
			case "id":
				return ec.fieldContext_MediaImage_id(ctx, field)
			case "image":
				return ec.fieldContext_MediaImage_image(ctx, field)
			case "mediaContentType":
				return ec.fieldContext_MediaImage_mediaContentType(ctx, field)
			case "presentation":
				return ec.fieldContext_MediaImage_presentation(ctx, field)
			case "previewImage":
				return ec.fieldContext_MediaImage_previewImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Brand_shortDescription(ctx context.Context, field graphql.CollectedField, obj *model.Brand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Brand_shortDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Brand_shortDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Brand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Brand_slogan(ctx context.Context, field graphql.CollectedField, obj *model.Brand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Brand_slogan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slogan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Brand_slogan(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Brand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Brand_squareLogo(ctx context.Context, field graphql.CollectedField, obj *model.Brand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Brand_squareLogo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SquareLogo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MediaImage)
	fc.Result = res
	return ec.marshalOMediaImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Brand_squareLogo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Brand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alt":
				return ec.fieldContext_MediaImage_alt(ctx, field)
			case "id":
				return ec.fieldContext_MediaImage_id(ctx, field)
			case "image":
				return ec.fieldContext_MediaImage_image(ctx, field)
			case "mediaContentType":
				return ec.fieldContext_MediaImage_mediaContentType(ctx, field)
			case "presentation":
				return ec.fieldContext_MediaImage_presentation(ctx, field)
			case "previewImage":
				return ec.fieldContext_MediaImage_previewImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrandColorGroup_background(ctx context.Context, field graphql.CollectedField, obj *model.BrandColorGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrandColorGroup_background(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Background, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOColor2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrandColorGroup_background(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrandColorGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Color does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrandColorGroup_foreground(ctx context.Context, field graphql.CollectedField, obj *model.BrandColorGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrandColorGroup_foreground(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Foreground, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOColor2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrandColorGroup_foreground(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrandColorGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Color does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrandColors_primary(ctx context.Context, field graphql.CollectedField, obj *model.BrandColors) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrandColors_primary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BrandColorGroup)
	fc.Result = res
	return ec.marshalNBrandColorGroup2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBrandColorGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrandColors_primary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrandColors",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "background":
				return ec.fieldContext_BrandColorGroup_background(ctx, field)
			case "foreground":
				return ec.fieldContext_BrandColorGroup_foreground(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BrandColorGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BrandColors_secondary(ctx context.Context, field graphql.CollectedField, obj *model.BrandColors) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BrandColors_secondary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secondary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BrandColorGroup)
	fc.Result = res
	return ec.marshalNBrandColorGroup2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBrandColorGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BrandColors_secondary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BrandColors",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "background":
				return ec.fieldContext_BrandColorGroup_background(ctx, field)
			case "foreground":
				return ec.fieldContext_BrandColorGroup_foreground(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BrandColorGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_appliedGiftCards(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_appliedGiftCards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedGiftCards, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AppliedGiftCard)
	fc.Result = res
	return ec.marshalNAppliedGiftCard2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAppliedGiftCardᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_appliedGiftCards(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amountUsed":
				return ec.fieldContext_AppliedGiftCard_amountUsed(ctx, field)
			case "amountUsedV2":
				return ec.fieldContext_AppliedGiftCard_amountUsedV2(ctx, field)
			case "balance":
				return ec.fieldContext_AppliedGiftCard_balance(ctx, field)
			case "balanceV2":
				return ec.fieldContext_AppliedGiftCard_balanceV2(ctx, field)
			case "id":
				return ec.fieldContext_AppliedGiftCard_id(ctx, field)
			case "lastCharacters":
				return ec.fieldContext_AppliedGiftCard_lastCharacters(ctx, field)
			case "presentmentAmountUsed":
				return ec.fieldContext_AppliedGiftCard_presentmentAmountUsed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AppliedGiftCard", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_attribute(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_attribute(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attribute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Attribute)
	fc.Result = res
	return ec.marshalOAttribute2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_attribute(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Attribute_key(ctx, field)
			case "value":
				return ec.fieldContext_Attribute_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribute", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Cart_attribute_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Cart_attributes(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attribute)
	fc.Result = res
	return ec.marshalNAttribute2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Attribute_key(ctx, field)
			case "value":
				return ec.fieldContext_Attribute_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_buyerIdentity(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_buyerIdentity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyerIdentity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartBuyerIdentity)
	fc.Result = res
	return ec.marshalNCartBuyerIdentity2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartBuyerIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_buyerIdentity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "countryCode":
				return ec.fieldContext_CartBuyerIdentity_countryCode(ctx, field)
			case "customer":
				return ec.fieldContext_CartBuyerIdentity_customer(ctx, field)
			case "deliveryAddressPreferences":
				return ec.fieldContext_CartBuyerIdentity_deliveryAddressPreferences(ctx, field)
			case "email":
				return ec.fieldContext_CartBuyerIdentity_email(ctx, field)
			case "phone":
				return ec.fieldContext_CartBuyerIdentity_phone(ctx, field)
			case "preferences":
				return ec.fieldContext_CartBuyerIdentity_preferences(ctx, field)
			case "purchasingCompany":
				return ec.fieldContext_CartBuyerIdentity_purchasingCompany(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartBuyerIdentity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_checkoutUrl(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_checkoutUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_checkoutUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_cost(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_cost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartCost)
	fc.Result = res
	return ec.marshalNCartCost2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_cost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkoutChargeAmount":
				return ec.fieldContext_CartCost_checkoutChargeAmount(ctx, field)
			case "subtotalAmount":
				return ec.fieldContext_CartCost_subtotalAmount(ctx, field)
			case "subtotalAmountEstimated":
				return ec.fieldContext_CartCost_subtotalAmountEstimated(ctx, field)
			case "totalAmount":
				return ec.fieldContext_CartCost_totalAmount(ctx, field)
			case "totalAmountEstimated":
				return ec.fieldContext_CartCost_totalAmountEstimated(ctx, field)
			case "totalDutyAmount":
				return ec.fieldContext_CartCost_totalDutyAmount(ctx, field)
			case "totalDutyAmountEstimated":
				return ec.fieldContext_CartCost_totalDutyAmountEstimated(ctx, field)
			case "totalTaxAmount":
				return ec.fieldContext_CartCost_totalTaxAmount(ctx, field)
			case "totalTaxAmountEstimated":
				return ec.fieldContext_CartCost_totalTaxAmountEstimated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartCost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_delivery(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_delivery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delivery, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartDelivery)
	fc.Result = res
	return ec.marshalNCartDelivery2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_delivery(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "addresses":
				return ec.fieldContext_CartDelivery_addresses(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDelivery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_deliveryGroups(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_deliveryGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryGroups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartDeliveryGroupConnection)
	fc.Result = res
	return ec.marshalNCartDeliveryGroupConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_deliveryGroups(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CartDeliveryGroupConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_CartDeliveryGroupConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CartDeliveryGroupConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryGroupConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Cart_deliveryGroups_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Cart_discountAllocations(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_discountAllocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountAllocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CartDiscountAllocation)
	fc.Result = res
	return ec.marshalNCartDiscountAllocation2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountAllocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_discountAllocations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_discountCodes(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_discountCodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountCodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartDiscountCode)
	fc.Result = res
	return ec.marshalNCartDiscountCode2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountCodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_discountCodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicable":
				return ec.fieldContext_CartDiscountCode_applicable(ctx, field)
			case "code":
				return ec.fieldContext_CartDiscountCode_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDiscountCode", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_estimatedCost(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_estimatedCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartEstimatedCost)
	fc.Result = res
	return ec.marshalNCartEstimatedCost2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartEstimatedCost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_estimatedCost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkoutChargeAmount":
				return ec.fieldContext_CartEstimatedCost_checkoutChargeAmount(ctx, field)
			case "subtotalAmount":
				return ec.fieldContext_CartEstimatedCost_subtotalAmount(ctx, field)
			case "totalAmount":
				return ec.fieldContext_CartEstimatedCost_totalAmount(ctx, field)
			case "totalDutyAmount":
				return ec.fieldContext_CartEstimatedCost_totalDutyAmount(ctx, field)
			case "totalTaxAmount":
				return ec.fieldContext_CartEstimatedCost_totalTaxAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartEstimatedCost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_id(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_lines(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_lines(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lines, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BaseCartLineConnection)
	fc.Result = res
	return ec.marshalNBaseCartLineConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLineConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_lines(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_BaseCartLineConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_BaseCartLineConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_BaseCartLineConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BaseCartLineConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Cart_lines_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Cart_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Cart_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Cart_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Cart_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Cart_note(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_note(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_totalQuantity(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_totalQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_totalQuantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartAttributesUpdatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartAttributesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartAttributesUpdatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartAttributesUpdatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartAttributesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartAttributesUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartAttributesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartAttributesUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartAttributesUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartAttributesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartAttributesUpdatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartAttributesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartAttributesUpdatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartAttributesUpdatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartAttributesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartAutomaticDiscountAllocation_discountApplication(ctx context.Context, field graphql.CollectedField, obj *model.CartAutomaticDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartAutomaticDiscountAllocation_discountApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountApplication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartDiscountApplication)
	fc.Result = res
	return ec.marshalNCartDiscountApplication2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountApplication(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartAutomaticDiscountAllocation_discountApplication(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartAutomaticDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "allocationMethod":
				return ec.fieldContext_CartDiscountApplication_allocationMethod(ctx, field)
			case "targetSelection":
				return ec.fieldContext_CartDiscountApplication_targetSelection(ctx, field)
			case "targetType":
				return ec.fieldContext_CartDiscountApplication_targetType(ctx, field)
			case "value":
				return ec.fieldContext_CartDiscountApplication_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDiscountApplication", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartAutomaticDiscountAllocation_discountedAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartAutomaticDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartAutomaticDiscountAllocation_discountedAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountedAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartAutomaticDiscountAllocation_discountedAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartAutomaticDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartAutomaticDiscountAllocation_targetType(ctx context.Context, field graphql.CollectedField, obj *model.CartAutomaticDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartAutomaticDiscountAllocation_targetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetType)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartAutomaticDiscountAllocation_targetType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartAutomaticDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartAutomaticDiscountAllocation_title(ctx context.Context, field graphql.CollectedField, obj *model.CartAutomaticDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartAutomaticDiscountAllocation_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartAutomaticDiscountAllocation_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartAutomaticDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBillingAddressUpdatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartBillingAddressUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBillingAddressUpdatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBillingAddressUpdatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBillingAddressUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBillingAddressUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartBillingAddressUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBillingAddressUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBillingAddressUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBillingAddressUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBillingAddressUpdatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartBillingAddressUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBillingAddressUpdatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBillingAddressUpdatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBillingAddressUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBuyerIdentity_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.CartBuyerIdentity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBuyerIdentity_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountryCode)
	fc.Result = res
	return ec.marshalOCountryCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBuyerIdentity_countryCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBuyerIdentity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CountryCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBuyerIdentity_customer(ctx context.Context, field graphql.CollectedField, obj *model.CartBuyerIdentity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBuyerIdentity_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBuyerIdentity_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBuyerIdentity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptsMarketing":
				return ec.fieldContext_Customer_acceptsMarketing(ctx, field)
			case "addresses":
				return ec.fieldContext_Customer_addresses(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "defaultAddress":
				return ec.fieldContext_Customer_defaultAddress(ctx, field)
			case "displayName":
				return ec.fieldContext_Customer_displayName(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Customer_firstName(ctx, field)
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "lastIncompleteCheckout":
				return ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
			case "lastName":
				return ec.fieldContext_Customer_lastName(ctx, field)
			case "metafield":
				return ec.fieldContext_Customer_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Customer_metafields(ctx, field)
			case "numberOfOrders":
				return ec.fieldContext_Customer_numberOfOrders(ctx, field)
			case "orders":
				return ec.fieldContext_Customer_orders(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "tags":
				return ec.fieldContext_Customer_tags(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBuyerIdentity_deliveryAddressPreferences(ctx context.Context, field graphql.CollectedField, obj *model.CartBuyerIdentity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBuyerIdentity_deliveryAddressPreferences(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryAddressPreferences, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DeliveryAddress)
	fc.Result = res
	return ec.marshalNDeliveryAddress2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryAddressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBuyerIdentity_deliveryAddressPreferences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBuyerIdentity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeliveryAddress does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBuyerIdentity_email(ctx context.Context, field graphql.CollectedField, obj *model.CartBuyerIdentity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBuyerIdentity_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBuyerIdentity_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBuyerIdentity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBuyerIdentity_phone(ctx context.Context, field graphql.CollectedField, obj *model.CartBuyerIdentity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBuyerIdentity_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBuyerIdentity_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBuyerIdentity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBuyerIdentity_preferences(ctx context.Context, field graphql.CollectedField, obj *model.CartBuyerIdentity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBuyerIdentity_preferences(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preferences, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartPreferences)
	fc.Result = res
	return ec.marshalOCartPreferences2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPreferences(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBuyerIdentity_preferences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBuyerIdentity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "delivery":
				return ec.fieldContext_CartPreferences_delivery(ctx, field)
			case "wallet":
				return ec.fieldContext_CartPreferences_wallet(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartPreferences", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBuyerIdentity_purchasingCompany(ctx context.Context, field graphql.CollectedField, obj *model.CartBuyerIdentity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBuyerIdentity_purchasingCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchasingCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PurchasingCompany)
	fc.Result = res
	return ec.marshalOPurchasingCompany2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPurchasingCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBuyerIdentity_purchasingCompany(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBuyerIdentity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "company":
				return ec.fieldContext_PurchasingCompany_company(ctx, field)
			case "contact":
				return ec.fieldContext_PurchasingCompany_contact(ctx, field)
			case "location":
				return ec.fieldContext_PurchasingCompany_location(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PurchasingCompany", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBuyerIdentityUpdatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartBuyerIdentityUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBuyerIdentityUpdatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBuyerIdentityUpdatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBuyerIdentityUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBuyerIdentityUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartBuyerIdentityUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBuyerIdentityUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBuyerIdentityUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBuyerIdentityUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartBuyerIdentityUpdatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartBuyerIdentityUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartBuyerIdentityUpdatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartBuyerIdentityUpdatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartBuyerIdentityUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCodeDiscountAllocation_code(ctx context.Context, field graphql.CollectedField, obj *model.CartCodeDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCodeDiscountAllocation_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCodeDiscountAllocation_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCodeDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCodeDiscountAllocation_discountApplication(ctx context.Context, field graphql.CollectedField, obj *model.CartCodeDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCodeDiscountAllocation_discountApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountApplication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartDiscountApplication)
	fc.Result = res
	return ec.marshalNCartDiscountApplication2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountApplication(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCodeDiscountAllocation_discountApplication(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCodeDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "allocationMethod":
				return ec.fieldContext_CartDiscountApplication_allocationMethod(ctx, field)
			case "targetSelection":
				return ec.fieldContext_CartDiscountApplication_targetSelection(ctx, field)
			case "targetType":
				return ec.fieldContext_CartDiscountApplication_targetType(ctx, field)
			case "value":
				return ec.fieldContext_CartDiscountApplication_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDiscountApplication", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCodeDiscountAllocation_discountedAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartCodeDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCodeDiscountAllocation_discountedAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountedAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCodeDiscountAllocation_discountedAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCodeDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCodeDiscountAllocation_targetType(ctx context.Context, field graphql.CollectedField, obj *model.CartCodeDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCodeDiscountAllocation_targetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetType)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCodeDiscountAllocation_targetType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCodeDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCompletionActionRequired_action(ctx context.Context, field graphql.CollectedField, obj *model.CartCompletionActionRequired) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCompletionActionRequired_action(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.CartCompletionAction)
	fc.Result = res
	return ec.marshalOCartCompletionAction2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCompletionAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCompletionActionRequired_action(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCompletionActionRequired",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CartCompletionAction does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCompletionActionRequired_id(ctx context.Context, field graphql.CollectedField, obj *model.CartCompletionActionRequired) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCompletionActionRequired_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCompletionActionRequired_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCompletionActionRequired",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCompletionFailed_errors(ctx context.Context, field graphql.CollectedField, obj *model.CartCompletionFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCompletionFailed_errors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CompletionError)
	fc.Result = res
	return ec.marshalNCompletionError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompletionErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCompletionFailed_errors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCompletionFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CompletionError_code(ctx, field)
			case "message":
				return ec.fieldContext_CompletionError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompletionError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCompletionFailed_id(ctx context.Context, field graphql.CollectedField, obj *model.CartCompletionFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCompletionFailed_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCompletionFailed_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCompletionFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCompletionProcessing_id(ctx context.Context, field graphql.CollectedField, obj *model.CartCompletionProcessing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCompletionProcessing_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCompletionProcessing_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCompletionProcessing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCompletionProcessing_pollDelay(ctx context.Context, field graphql.CollectedField, obj *model.CartCompletionProcessing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCompletionProcessing_pollDelay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PollDelay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCompletionProcessing_pollDelay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCompletionProcessing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCompletionSuccess_completedAt(ctx context.Context, field graphql.CollectedField, obj *model.CartCompletionSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCompletionSuccess_completedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCompletionSuccess_completedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCompletionSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCompletionSuccess_id(ctx context.Context, field graphql.CollectedField, obj *model.CartCompletionSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCompletionSuccess_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCompletionSuccess_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCompletionSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCompletionSuccess_orderId(ctx context.Context, field graphql.CollectedField, obj *model.CartCompletionSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCompletionSuccess_orderId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCompletionSuccess_orderId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCompletionSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCompletionSuccess_orderUrl(ctx context.Context, field graphql.CollectedField, obj *model.CartCompletionSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCompletionSuccess_orderUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCompletionSuccess_orderUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCompletionSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCost_checkoutChargeAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCost_checkoutChargeAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutChargeAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCost_checkoutChargeAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCost_subtotalAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCost_subtotalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCost_subtotalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCost_subtotalAmountEstimated(ctx context.Context, field graphql.CollectedField, obj *model.CartCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCost_subtotalAmountEstimated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtotalAmountEstimated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCost_subtotalAmountEstimated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCost_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCost_totalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCost_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCost_totalAmountEstimated(ctx context.Context, field graphql.CollectedField, obj *model.CartCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCost_totalAmountEstimated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAmountEstimated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCost_totalAmountEstimated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCost_totalDutyAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCost_totalDutyAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalDutyAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCost_totalDutyAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCost_totalDutyAmountEstimated(ctx context.Context, field graphql.CollectedField, obj *model.CartCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCost_totalDutyAmountEstimated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalDutyAmountEstimated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCost_totalDutyAmountEstimated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCost_totalTaxAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCost_totalTaxAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTaxAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCost_totalTaxAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCost_totalTaxAmountEstimated(ctx context.Context, field graphql.CollectedField, obj *model.CartCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCost_totalTaxAmountEstimated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTaxAmountEstimated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCost_totalTaxAmountEstimated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCreatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCreatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCreatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCreatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCreatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCreatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCreatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCreatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCreatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCustomDiscountAllocation_discountApplication(ctx context.Context, field graphql.CollectedField, obj *model.CartCustomDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCustomDiscountAllocation_discountApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountApplication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartDiscountApplication)
	fc.Result = res
	return ec.marshalNCartDiscountApplication2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountApplication(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCustomDiscountAllocation_discountApplication(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCustomDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "allocationMethod":
				return ec.fieldContext_CartDiscountApplication_allocationMethod(ctx, field)
			case "targetSelection":
				return ec.fieldContext_CartDiscountApplication_targetSelection(ctx, field)
			case "targetType":
				return ec.fieldContext_CartDiscountApplication_targetType(ctx, field)
			case "value":
				return ec.fieldContext_CartDiscountApplication_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDiscountApplication", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCustomDiscountAllocation_discountedAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartCustomDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCustomDiscountAllocation_discountedAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountedAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCustomDiscountAllocation_discountedAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCustomDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCustomDiscountAllocation_targetType(ctx context.Context, field graphql.CollectedField, obj *model.CartCustomDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCustomDiscountAllocation_targetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetType)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCustomDiscountAllocation_targetType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCustomDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartCustomDiscountAllocation_title(ctx context.Context, field graphql.CollectedField, obj *model.CartCustomDiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartCustomDiscountAllocation_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartCustomDiscountAllocation_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartCustomDiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDelivery_addresses(ctx context.Context, field graphql.CollectedField, obj *model.CartDelivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDelivery_addresses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Addresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartSelectableAddress)
	fc.Result = res
	return ec.marshalNCartSelectableAddress2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDelivery_addresses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDelivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_CartSelectableAddress_address(ctx, field)
			case "id":
				return ec.fieldContext_CartSelectableAddress_id(ctx, field)
			case "oneTimeUse":
				return ec.fieldContext_CartSelectableAddress_oneTimeUse(ctx, field)
			case "selected":
				return ec.fieldContext_CartSelectableAddress_selected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartSelectableAddress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_CartDelivery_addresses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_address1(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_address1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_address1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_address2(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_address2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_address2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_city(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_company(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_countryCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_firstName(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_formatted(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_formatted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formatted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_formatted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_CartDeliveryAddress_formatted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_formattedArea(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_formattedArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormattedArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_formattedArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_lastName(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_latitude(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_latitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_latitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_longitude(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_longitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_longitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_name(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_phone(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_provinceCode(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_provinceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_provinceCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddress_zip(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddress_zip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddress_zip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesAddPayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesAddPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesAddPayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesAddPayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesAddPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesAddPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesAddPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesAddPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesAddPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesAddPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesAddPayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesAddPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesAddPayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesAddPayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesAddPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesRemovePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesRemovePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesRemovePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesRemovePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesRemovePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesRemovePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesRemovePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesRemovePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesRemovePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesReplacePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesReplacePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesReplacePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesReplacePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesReplacePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesReplacePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesReplacePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesReplacePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesReplacePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesReplacePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesReplacePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesReplacePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesReplacePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesReplacePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesReplacePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesUpdatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesUpdatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesUpdatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryAddressesUpdatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryAddressesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryAddressesUpdatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryAddressesUpdatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryAddressesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryCoordinatesPreference_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryCoordinatesPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryCoordinatesPreference_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CountryCode)
	fc.Result = res
	return ec.marshalNCountryCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryCoordinatesPreference_countryCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryCoordinatesPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CountryCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryCoordinatesPreference_latitude(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryCoordinatesPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryCoordinatesPreference_latitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryCoordinatesPreference_latitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryCoordinatesPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryCoordinatesPreference_longitude(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryCoordinatesPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryCoordinatesPreference_longitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryCoordinatesPreference_longitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryCoordinatesPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroup_cartLines(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroup_cartLines(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CartLines, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BaseCartLineConnection)
	fc.Result = res
	return ec.marshalNBaseCartLineConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLineConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroup_cartLines(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_BaseCartLineConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_BaseCartLineConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_BaseCartLineConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BaseCartLineConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_CartDeliveryGroup_cartLines_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroup_deliveryAddress(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroup_deliveryAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MailingAddress)
	fc.Result = res
	return ec.marshalNMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroup_deliveryAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_MailingAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_MailingAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_MailingAddress_city(ctx, field)
			case "company":
				return ec.fieldContext_MailingAddress_company(ctx, field)
			case "country":
				return ec.fieldContext_MailingAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_MailingAddress_countryCode(ctx, field)
			case "countryCodeV2":
				return ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
			case "firstName":
				return ec.fieldContext_MailingAddress_firstName(ctx, field)
			case "formatted":
				return ec.fieldContext_MailingAddress_formatted(ctx, field)
			case "formattedArea":
				return ec.fieldContext_MailingAddress_formattedArea(ctx, field)
			case "id":
				return ec.fieldContext_MailingAddress_id(ctx, field)
			case "lastName":
				return ec.fieldContext_MailingAddress_lastName(ctx, field)
			case "latitude":
				return ec.fieldContext_MailingAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_MailingAddress_longitude(ctx, field)
			case "name":
				return ec.fieldContext_MailingAddress_name(ctx, field)
			case "phone":
				return ec.fieldContext_MailingAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_MailingAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_MailingAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_MailingAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroup_deliveryOptions(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroup_deliveryOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartDeliveryOption)
	fc.Result = res
	return ec.marshalNCartDeliveryOption2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroup_deliveryOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartDeliveryOption_code(ctx, field)
			case "deliveryMethodType":
				return ec.fieldContext_CartDeliveryOption_deliveryMethodType(ctx, field)
			case "description":
				return ec.fieldContext_CartDeliveryOption_description(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_CartDeliveryOption_estimatedCost(ctx, field)
			case "handle":
				return ec.fieldContext_CartDeliveryOption_handle(ctx, field)
			case "title":
				return ec.fieldContext_CartDeliveryOption_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroup_groupType(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroup_groupType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CartDeliveryGroupType)
	fc.Result = res
	return ec.marshalNCartDeliveryGroupType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroup_groupType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CartDeliveryGroupType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroup_id(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroup_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroup_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroup_selectedDeliveryOption(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroup_selectedDeliveryOption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedDeliveryOption, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartDeliveryOption)
	fc.Result = res
	return ec.marshalOCartDeliveryOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryOption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroup_selectedDeliveryOption(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartDeliveryOption_code(ctx, field)
			case "deliveryMethodType":
				return ec.fieldContext_CartDeliveryOption_deliveryMethodType(ctx, field)
			case "description":
				return ec.fieldContext_CartDeliveryOption_description(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_CartDeliveryOption_estimatedCost(ctx, field)
			case "handle":
				return ec.fieldContext_CartDeliveryOption_handle(ctx, field)
			case "title":
				return ec.fieldContext_CartDeliveryOption_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroupConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroupConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroupConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartDeliveryGroupEdge)
	fc.Result = res
	return ec.marshalNCartDeliveryGroupEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroupConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroupConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CartDeliveryGroupEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CartDeliveryGroupEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryGroupEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroupConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroupConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroupConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartDeliveryGroup)
	fc.Result = res
	return ec.marshalNCartDeliveryGroup2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroupConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroupConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cartLines":
				return ec.fieldContext_CartDeliveryGroup_cartLines(ctx, field)
			case "deliveryAddress":
				return ec.fieldContext_CartDeliveryGroup_deliveryAddress(ctx, field)
			case "deliveryOptions":
				return ec.fieldContext_CartDeliveryGroup_deliveryOptions(ctx, field)
			case "groupType":
				return ec.fieldContext_CartDeliveryGroup_groupType(ctx, field)
			case "id":
				return ec.fieldContext_CartDeliveryGroup_id(ctx, field)
			case "selectedDeliveryOption":
				return ec.fieldContext_CartDeliveryGroup_selectedDeliveryOption(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroupConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroupConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroupConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroupConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroupConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroupEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroupEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroupEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroupEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroupEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryGroupEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryGroupEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryGroupEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartDeliveryGroup)
	fc.Result = res
	return ec.marshalNCartDeliveryGroup2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryGroupEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryGroupEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cartLines":
				return ec.fieldContext_CartDeliveryGroup_cartLines(ctx, field)
			case "deliveryAddress":
				return ec.fieldContext_CartDeliveryGroup_deliveryAddress(ctx, field)
			case "deliveryOptions":
				return ec.fieldContext_CartDeliveryGroup_deliveryOptions(ctx, field)
			case "groupType":
				return ec.fieldContext_CartDeliveryGroup_groupType(ctx, field)
			case "id":
				return ec.fieldContext_CartDeliveryGroup_id(ctx, field)
			case "selectedDeliveryOption":
				return ec.fieldContext_CartDeliveryGroup_selectedDeliveryOption(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryOption_code(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryOption_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryOption_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryOption_deliveryMethodType(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryOption_deliveryMethodType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryMethodType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeliveryMethodType)
	fc.Result = res
	return ec.marshalNDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryMethodType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryOption_deliveryMethodType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeliveryMethodType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryOption_description(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryOption_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryOption_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryOption_estimatedCost(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryOption_estimatedCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryOption_estimatedCost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryOption_handle(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryOption_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryOption_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryOption_title(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryOption_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryOption_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryPreference_coordinates(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryPreference_coordinates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartDeliveryCoordinatesPreference)
	fc.Result = res
	return ec.marshalOCartDeliveryCoordinatesPreference2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryCoordinatesPreference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryPreference_coordinates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "countryCode":
				return ec.fieldContext_CartDeliveryCoordinatesPreference_countryCode(ctx, field)
			case "latitude":
				return ec.fieldContext_CartDeliveryCoordinatesPreference_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_CartDeliveryCoordinatesPreference_longitude(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryCoordinatesPreference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryPreference_deliveryMethod(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryPreference_deliveryMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PreferenceDeliveryMethodType)
	fc.Result = res
	return ec.marshalNPreferenceDeliveryMethodType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryPreference_deliveryMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PreferenceDeliveryMethodType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDeliveryPreference_pickupHandle(ctx context.Context, field graphql.CollectedField, obj *model.CartDeliveryPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDeliveryPreference_pickupHandle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PickupHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDeliveryPreference_pickupHandle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDeliveryPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDiscountApplication_allocationMethod(ctx context.Context, field graphql.CollectedField, obj *model.CartDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDiscountApplication_allocationMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllocationMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationAllocationMethod)
	fc.Result = res
	return ec.marshalNDiscountApplicationAllocationMethod2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationAllocationMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDiscountApplication_allocationMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationAllocationMethod does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDiscountApplication_targetSelection(ctx context.Context, field graphql.CollectedField, obj *model.CartDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDiscountApplication_targetSelection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetSelection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetSelection)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetSelection2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDiscountApplication_targetSelection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetSelection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDiscountApplication_targetType(ctx context.Context, field graphql.CollectedField, obj *model.CartDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDiscountApplication_targetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetType)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDiscountApplication_targetType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDiscountApplication_value(ctx context.Context, field graphql.CollectedField, obj *model.CartDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDiscountApplication_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PricingValue)
	fc.Result = res
	return ec.marshalNPricingValue2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPricingValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDiscountApplication_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PricingValue does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDiscountCode_applicable(ctx context.Context, field graphql.CollectedField, obj *model.CartDiscountCode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDiscountCode_applicable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applicable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDiscountCode_applicable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDiscountCode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDiscountCode_code(ctx context.Context, field graphql.CollectedField, obj *model.CartDiscountCode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDiscountCode_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDiscountCode_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDiscountCode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDiscountCodesUpdatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartDiscountCodesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDiscountCodesUpdatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDiscountCodesUpdatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDiscountCodesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDiscountCodesUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartDiscountCodesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDiscountCodesUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDiscountCodesUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDiscountCodesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDiscountCodesUpdatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartDiscountCodesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDiscountCodesUpdatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDiscountCodesUpdatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDiscountCodesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartEstimatedCost_checkoutChargeAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartEstimatedCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartEstimatedCost_checkoutChargeAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutChargeAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartEstimatedCost_checkoutChargeAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartEstimatedCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartEstimatedCost_subtotalAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartEstimatedCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartEstimatedCost_subtotalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartEstimatedCost_subtotalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartEstimatedCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartEstimatedCost_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartEstimatedCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartEstimatedCost_totalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartEstimatedCost_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartEstimatedCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartEstimatedCost_totalDutyAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartEstimatedCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartEstimatedCost_totalDutyAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalDutyAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartEstimatedCost_totalDutyAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartEstimatedCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartEstimatedCost_totalTaxAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartEstimatedCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartEstimatedCost_totalTaxAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTaxAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartEstimatedCost_totalTaxAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartEstimatedCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartGiftCardCodesRemovePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartGiftCardCodesRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartGiftCardCodesRemovePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartGiftCardCodesRemovePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartGiftCardCodesRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartGiftCardCodesRemovePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartGiftCardCodesRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartGiftCardCodesRemovePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartGiftCardCodesRemovePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartGiftCardCodesRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartGiftCardCodesRemovePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartGiftCardCodesRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartGiftCardCodesRemovePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartGiftCardCodesRemovePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartGiftCardCodesRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartGiftCardCodesUpdatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartGiftCardCodesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartGiftCardCodesUpdatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartGiftCardCodesUpdatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartGiftCardCodesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartGiftCardCodesUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartGiftCardCodesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartGiftCardCodesUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartGiftCardCodesUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartGiftCardCodesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartGiftCardCodesUpdatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartGiftCardCodesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartGiftCardCodesUpdatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartGiftCardCodesUpdatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartGiftCardCodesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLine_attribute(ctx context.Context, field graphql.CollectedField, obj *model.CartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLine_attribute(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attribute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Attribute)
	fc.Result = res
	return ec.marshalOAttribute2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLine_attribute(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Attribute_key(ctx, field)
			case "value":
				return ec.fieldContext_Attribute_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribute", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_CartLine_attribute_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _CartLine_attributes(ctx context.Context, field graphql.CollectedField, obj *model.CartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLine_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attribute)
	fc.Result = res
	return ec.marshalNAttribute2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLine_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Attribute_key(ctx, field)
			case "value":
				return ec.fieldContext_Attribute_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLine_cost(ctx context.Context, field graphql.CollectedField, obj *model.CartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLine_cost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartLineCost)
	fc.Result = res
	return ec.marshalNCartLineCost2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineCost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLine_cost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amountPerQuantity":
				return ec.fieldContext_CartLineCost_amountPerQuantity(ctx, field)
			case "compareAtAmountPerQuantity":
				return ec.fieldContext_CartLineCost_compareAtAmountPerQuantity(ctx, field)
			case "subtotalAmount":
				return ec.fieldContext_CartLineCost_subtotalAmount(ctx, field)
			case "totalAmount":
				return ec.fieldContext_CartLineCost_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartLineCost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLine_discountAllocations(ctx context.Context, field graphql.CollectedField, obj *model.CartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLine_discountAllocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountAllocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CartDiscountAllocation)
	fc.Result = res
	return ec.marshalNCartDiscountAllocation2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountAllocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLine_discountAllocations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLine_estimatedCost(ctx context.Context, field graphql.CollectedField, obj *model.CartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLine_estimatedCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartLineEstimatedCost)
	fc.Result = res
	return ec.marshalNCartLineEstimatedCost2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineEstimatedCost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLine_estimatedCost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_CartLineEstimatedCost_amount(ctx, field)
			case "compareAtAmount":
				return ec.fieldContext_CartLineEstimatedCost_compareAtAmount(ctx, field)
			case "subtotalAmount":
				return ec.fieldContext_CartLineEstimatedCost_subtotalAmount(ctx, field)
			case "totalAmount":
				return ec.fieldContext_CartLineEstimatedCost_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartLineEstimatedCost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLine_id(ctx context.Context, field graphql.CollectedField, obj *model.CartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLine_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLine_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLine_merchandise(ctx context.Context, field graphql.CollectedField, obj *model.CartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLine_merchandise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Merchandise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Merchandise)
	fc.Result = res
	return ec.marshalNMerchandise2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMerchandise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLine_merchandise(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Merchandise does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLine_quantity(ctx context.Context, field graphql.CollectedField, obj *model.CartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLine_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLine_quantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLine_sellingPlanAllocation(ctx context.Context, field graphql.CollectedField, obj *model.CartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLine_sellingPlanAllocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellingPlanAllocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellingPlanAllocation)
	fc.Result = res
	return ec.marshalOSellingPlanAllocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLine_sellingPlanAllocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkoutChargeAmount":
				return ec.fieldContext_SellingPlanAllocation_checkoutChargeAmount(ctx, field)
			case "priceAdjustments":
				return ec.fieldContext_SellingPlanAllocation_priceAdjustments(ctx, field)
			case "remainingBalanceChargeAmount":
				return ec.fieldContext_SellingPlanAllocation_remainingBalanceChargeAmount(ctx, field)
			case "sellingPlan":
				return ec.fieldContext_SellingPlanAllocation_sellingPlan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanAllocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLineCost_amountPerQuantity(ctx context.Context, field graphql.CollectedField, obj *model.CartLineCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLineCost_amountPerQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountPerQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLineCost_amountPerQuantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLineCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLineCost_compareAtAmountPerQuantity(ctx context.Context, field graphql.CollectedField, obj *model.CartLineCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLineCost_compareAtAmountPerQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompareAtAmountPerQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLineCost_compareAtAmountPerQuantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLineCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLineCost_subtotalAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartLineCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLineCost_subtotalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLineCost_subtotalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLineCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLineCost_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartLineCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLineCost_totalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLineCost_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLineCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLineEstimatedCost_amount(ctx context.Context, field graphql.CollectedField, obj *model.CartLineEstimatedCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLineEstimatedCost_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLineEstimatedCost_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLineEstimatedCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLineEstimatedCost_compareAtAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartLineEstimatedCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLineEstimatedCost_compareAtAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompareAtAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLineEstimatedCost_compareAtAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLineEstimatedCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLineEstimatedCost_subtotalAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartLineEstimatedCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLineEstimatedCost_subtotalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLineEstimatedCost_subtotalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLineEstimatedCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLineEstimatedCost_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.CartLineEstimatedCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLineEstimatedCost_totalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLineEstimatedCost_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLineEstimatedCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLinesAddPayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartLinesAddPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLinesAddPayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLinesAddPayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLinesAddPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLinesAddPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartLinesAddPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLinesAddPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLinesAddPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLinesAddPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLinesAddPayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartLinesAddPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLinesAddPayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLinesAddPayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLinesAddPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLinesRemovePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartLinesRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLinesRemovePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLinesRemovePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLinesRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLinesRemovePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartLinesRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLinesRemovePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLinesRemovePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLinesRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLinesRemovePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartLinesRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLinesRemovePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLinesRemovePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLinesRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLinesUpdatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartLinesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLinesUpdatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLinesUpdatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLinesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLinesUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartLinesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLinesUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLinesUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLinesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartLinesUpdatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartLinesUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartLinesUpdatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartLinesUpdatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartLinesUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartMetafieldDeletePayload_deletedId(ctx context.Context, field graphql.CollectedField, obj *model.CartMetafieldDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartMetafieldDeletePayload_deletedId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartMetafieldDeletePayload_deletedId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartMetafieldDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartMetafieldDeletePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartMetafieldDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartMetafieldDeletePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MetafieldDeleteUserError)
	fc.Result = res
	return ec.marshalNMetafieldDeleteUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldDeleteUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartMetafieldDeletePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartMetafieldDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_MetafieldDeleteUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_MetafieldDeleteUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_MetafieldDeleteUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetafieldDeleteUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartMetafieldsSetPayload_metafields(ctx context.Context, field graphql.CollectedField, obj *model.CartMetafieldsSetPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartMetafieldsSetPayload_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartMetafieldsSetPayload_metafields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartMetafieldsSetPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartMetafieldsSetPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartMetafieldsSetPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartMetafieldsSetPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MetafieldsSetUserError)
	fc.Result = res
	return ec.marshalNMetafieldsSetUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldsSetUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartMetafieldsSetPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartMetafieldsSetPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_MetafieldsSetUserError_code(ctx, field)
			case "elementIndex":
				return ec.fieldContext_MetafieldsSetUserError_elementIndex(ctx, field)
			case "field":
				return ec.fieldContext_MetafieldsSetUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_MetafieldsSetUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetafieldsSetUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartNoteUpdatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartNoteUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartNoteUpdatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartNoteUpdatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartNoteUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartNoteUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartNoteUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartNoteUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartNoteUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartNoteUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartNoteUpdatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartNoteUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartNoteUpdatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartNoteUpdatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartNoteUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartOperationError_code(ctx context.Context, field graphql.CollectedField, obj *model.CartOperationError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartOperationError_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartOperationError_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartOperationError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartOperationError_message(ctx context.Context, field graphql.CollectedField, obj *model.CartOperationError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartOperationError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartOperationError_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartOperationError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartPaymentUpdatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartPaymentUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartPaymentUpdatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartPaymentUpdatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartPaymentUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartPaymentUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartPaymentUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartPaymentUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartPaymentUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartPaymentUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartPaymentUpdatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartPaymentUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartPaymentUpdatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartPaymentUpdatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartPaymentUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartPreferences_delivery(ctx context.Context, field graphql.CollectedField, obj *model.CartPreferences) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartPreferences_delivery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delivery, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartDeliveryPreference)
	fc.Result = res
	return ec.marshalOCartDeliveryPreference2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryPreference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartPreferences_delivery(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartPreferences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coordinates":
				return ec.fieldContext_CartDeliveryPreference_coordinates(ctx, field)
			case "deliveryMethod":
				return ec.fieldContext_CartDeliveryPreference_deliveryMethod(ctx, field)
			case "pickupHandle":
				return ec.fieldContext_CartDeliveryPreference_pickupHandle(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryPreference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartPreferences_wallet(ctx context.Context, field graphql.CollectedField, obj *model.CartPreferences) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartPreferences_wallet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wallet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartPreferences_wallet(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartPreferences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartPrepareForCompletionPayload_result(ctx context.Context, field graphql.CollectedField, obj *model.CartPrepareForCompletionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartPrepareForCompletionPayload_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.CartPrepareForCompletionResult)
	fc.Result = res
	return ec.marshalOCartPrepareForCompletionResult2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPrepareForCompletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartPrepareForCompletionPayload_result(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartPrepareForCompletionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CartPrepareForCompletionResult does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartPrepareForCompletionPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartPrepareForCompletionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartPrepareForCompletionPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartPrepareForCompletionPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartPrepareForCompletionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartRemovePersonalDataPayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartRemovePersonalDataPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartRemovePersonalDataPayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartRemovePersonalDataPayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartRemovePersonalDataPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartRemovePersonalDataPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartRemovePersonalDataPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartRemovePersonalDataPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartRemovePersonalDataPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartRemovePersonalDataPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartRemovePersonalDataPayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartRemovePersonalDataPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartRemovePersonalDataPayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartRemovePersonalDataPayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartRemovePersonalDataPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartSelectableAddress_address(ctx context.Context, field graphql.CollectedField, obj *model.CartSelectableAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartSelectableAddress_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CartAddress)
	fc.Result = res
	return ec.marshalNCartAddress2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartSelectableAddress_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartSelectableAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CartAddress does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartSelectableAddress_id(ctx context.Context, field graphql.CollectedField, obj *model.CartSelectableAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartSelectableAddress_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartSelectableAddress_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartSelectableAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartSelectableAddress_oneTimeUse(ctx context.Context, field graphql.CollectedField, obj *model.CartSelectableAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartSelectableAddress_oneTimeUse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneTimeUse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartSelectableAddress_oneTimeUse(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartSelectableAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartSelectableAddress_selected(ctx context.Context, field graphql.CollectedField, obj *model.CartSelectableAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartSelectableAddress_selected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartSelectableAddress_selected(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartSelectableAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartSelectedDeliveryOptionsUpdatePayload_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartSelectedDeliveryOptionsUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartSelectedDeliveryOptionsUpdatePayload_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartSelectedDeliveryOptionsUpdatePayload_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartSelectedDeliveryOptionsUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartSelectedDeliveryOptionsUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartSelectedDeliveryOptionsUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartSelectedDeliveryOptionsUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartSelectedDeliveryOptionsUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartSelectedDeliveryOptionsUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartSelectedDeliveryOptionsUpdatePayload_warnings(ctx context.Context, field graphql.CollectedField, obj *model.CartSelectedDeliveryOptionsUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartSelectedDeliveryOptionsUpdatePayload_warnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartWarning)
	fc.Result = res
	return ec.marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartSelectedDeliveryOptionsUpdatePayload_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartSelectedDeliveryOptionsUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartWarning_code(ctx, field)
			case "message":
				return ec.fieldContext_CartWarning_message(ctx, field)
			case "target":
				return ec.fieldContext_CartWarning_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartWarning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartStatusNotReady_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartStatusNotReady) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartStatusNotReady_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartStatusNotReady_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartStatusNotReady",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartStatusNotReady_errors(ctx context.Context, field graphql.CollectedField, obj *model.CartStatusNotReady) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartStatusNotReady_errors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartOperationError)
	fc.Result = res
	return ec.marshalNCartOperationError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartOperationErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartStatusNotReady_errors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartStatusNotReady",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartOperationError_code(ctx, field)
			case "message":
				return ec.fieldContext_CartOperationError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartOperationError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartStatusReady_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartStatusReady) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartStatusReady_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartStatusReady_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartStatusReady",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartSubmitForCompletionPayload_result(ctx context.Context, field graphql.CollectedField, obj *model.CartSubmitForCompletionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartSubmitForCompletionPayload_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.CartSubmitForCompletionResult)
	fc.Result = res
	return ec.marshalOCartSubmitForCompletionResult2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSubmitForCompletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartSubmitForCompletionPayload_result(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartSubmitForCompletionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CartSubmitForCompletionResult does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartSubmitForCompletionPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CartSubmitForCompletionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartSubmitForCompletionPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartUserError)
	fc.Result = res
	return ec.marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartSubmitForCompletionPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartSubmitForCompletionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CartUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CartUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CartUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartThrottled_cart(ctx context.Context, field graphql.CollectedField, obj *model.CartThrottled) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartThrottled_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartThrottled_cart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartThrottled",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartThrottled_pollAfter(ctx context.Context, field graphql.CollectedField, obj *model.CartThrottled) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartThrottled_pollAfter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PollAfter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartThrottled_pollAfter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartThrottled",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartUserError_code(ctx context.Context, field graphql.CollectedField, obj *model.CartUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartUserError_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartErrorCode)
	fc.Result = res
	return ec.marshalOCartErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartUserError_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CartErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartUserError_field(ctx context.Context, field graphql.CollectedField, obj *model.CartUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartUserError_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartUserError_field(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartUserError_message(ctx context.Context, field graphql.CollectedField, obj *model.CartUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartUserError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartUserError_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartWarning_code(ctx context.Context, field graphql.CollectedField, obj *model.CartWarning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartWarning_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CartWarningCode)
	fc.Result = res
	return ec.marshalNCartWarningCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartWarning_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartWarning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CartWarningCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartWarning_message(ctx context.Context, field graphql.CollectedField, obj *model.CartWarning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartWarning_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartWarning_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartWarning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartWarning_target(ctx context.Context, field graphql.CollectedField, obj *model.CartWarning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartWarning_target(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Target, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartWarning_target(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartWarning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_appliedGiftCards(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedGiftCards, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AppliedGiftCard)
	fc.Result = res
	return ec.marshalNAppliedGiftCard2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAppliedGiftCardᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_appliedGiftCards(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amountUsed":
				return ec.fieldContext_AppliedGiftCard_amountUsed(ctx, field)
			case "amountUsedV2":
				return ec.fieldContext_AppliedGiftCard_amountUsedV2(ctx, field)
			case "balance":
				return ec.fieldContext_AppliedGiftCard_balance(ctx, field)
			case "balanceV2":
				return ec.fieldContext_AppliedGiftCard_balanceV2(ctx, field)
			case "id":
				return ec.fieldContext_AppliedGiftCard_id(ctx, field)
			case "lastCharacters":
				return ec.fieldContext_AppliedGiftCard_lastCharacters(ctx, field)
			case "presentmentAmountUsed":
				return ec.fieldContext_AppliedGiftCard_presentmentAmountUsed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AppliedGiftCard", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_availableShippingRates(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_availableShippingRates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableShippingRates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AvailableShippingRates)
	fc.Result = res
	return ec.marshalOAvailableShippingRates2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAvailableShippingRates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_availableShippingRates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ready":
				return ec.fieldContext_AvailableShippingRates_ready(ctx, field)
			case "shippingRates":
				return ec.fieldContext_AvailableShippingRates_shippingRates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AvailableShippingRates", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_buyerIdentity(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_buyerIdentity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyerIdentity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutBuyerIdentity)
	fc.Result = res
	return ec.marshalNCheckoutBuyerIdentity2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutBuyerIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_buyerIdentity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "countryCode":
				return ec.fieldContext_CheckoutBuyerIdentity_countryCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutBuyerIdentity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_completedAt(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_completedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_completedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_currencyCode(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_currencyCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CurrencyCode)
	fc.Result = res
	return ec.marshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_currencyCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CurrencyCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_customAttributes(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_customAttributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attribute)
	fc.Result = res
	return ec.marshalNAttribute2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_customAttributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Attribute_key(ctx, field)
			case "value":
				return ec.fieldContext_Attribute_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_discountApplications(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_discountApplications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountApplications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DiscountApplicationConnection)
	fc.Result = res
	return ec.marshalNDiscountApplicationConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_discountApplications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_DiscountApplicationConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_DiscountApplicationConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DiscountApplicationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscountApplicationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Checkout_discountApplications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_email(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_id(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_lineItems(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_lineItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutLineItemConnection)
	fc.Result = res
	return ec.marshalNCheckoutLineItemConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_lineItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CheckoutLineItemConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_CheckoutLineItemConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CheckoutLineItemConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutLineItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Checkout_lineItems_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_lineItemsSubtotalPrice(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineItemsSubtotalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_lineItemsSubtotalPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_note(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_note(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_order(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Order)
	fc.Result = res
	return ec.marshalOOrder2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_order(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "billingAddress":
				return ec.fieldContext_Order_billingAddress(ctx, field)
			case "cancelReason":
				return ec.fieldContext_Order_cancelReason(ctx, field)
			case "canceledAt":
				return ec.fieldContext_Order_canceledAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Order_currencyCode(ctx, field)
			case "currentSubtotalPrice":
				return ec.fieldContext_Order_currentSubtotalPrice(ctx, field)
			case "currentTotalDuties":
				return ec.fieldContext_Order_currentTotalDuties(ctx, field)
			case "currentTotalPrice":
				return ec.fieldContext_Order_currentTotalPrice(ctx, field)
			case "currentTotalShippingPrice":
				return ec.fieldContext_Order_currentTotalShippingPrice(ctx, field)
			case "currentTotalTax":
				return ec.fieldContext_Order_currentTotalTax(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Order_customAttributes(ctx, field)
			case "customerLocale":
				return ec.fieldContext_Order_customerLocale(ctx, field)
			case "customerUrl":
				return ec.fieldContext_Order_customerUrl(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Order_discountApplications(ctx, field)
			case "edited":
				return ec.fieldContext_Order_edited(ctx, field)
			case "email":
				return ec.fieldContext_Order_email(ctx, field)
			case "financialStatus":
				return ec.fieldContext_Order_financialStatus(ctx, field)
			case "fulfillmentStatus":
				return ec.fieldContext_Order_fulfillmentStatus(ctx, field)
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Order_lineItems(ctx, field)
			case "metafield":
				return ec.fieldContext_Order_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Order_metafields(ctx, field)
			case "name":
				return ec.fieldContext_Order_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Order_orderNumber(ctx, field)
			case "originalTotalDuties":
				return ec.fieldContext_Order_originalTotalDuties(ctx, field)
			case "originalTotalPrice":
				return ec.fieldContext_Order_originalTotalPrice(ctx, field)
			case "phone":
				return ec.fieldContext_Order_phone(ctx, field)
			case "processedAt":
				return ec.fieldContext_Order_processedAt(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Order_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Order_shippingDiscountAllocations(ctx, field)
			case "statusUrl":
				return ec.fieldContext_Order_statusUrl(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Order_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Order_subtotalPriceV2(ctx, field)
			case "successfulFulfillments":
				return ec.fieldContext_Order_successfulFulfillments(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Order_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Order_totalPriceV2(ctx, field)
			case "totalRefunded":
				return ec.fieldContext_Order_totalRefunded(ctx, field)
			case "totalRefundedV2":
				return ec.fieldContext_Order_totalRefundedV2(ctx, field)
			case "totalShippingPrice":
				return ec.fieldContext_Order_totalShippingPrice(ctx, field)
			case "totalShippingPriceV2":
				return ec.fieldContext_Order_totalShippingPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Order_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Order_totalTaxV2(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_orderStatusUrl(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderStatusURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_orderStatusUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_paymentDue(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_paymentDue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_paymentDue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_paymentDueV2(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_paymentDueV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentDueV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_paymentDueV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_ready(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_ready(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ready, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_ready(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_requiresShipping(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_requiresShipping(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiresShipping, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_requiresShipping(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_shippingAddress(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_shippingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MailingAddress)
	fc.Result = res
	return ec.marshalOMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_shippingAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_MailingAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_MailingAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_MailingAddress_city(ctx, field)
			case "company":
				return ec.fieldContext_MailingAddress_company(ctx, field)
			case "country":
				return ec.fieldContext_MailingAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_MailingAddress_countryCode(ctx, field)
			case "countryCodeV2":
				return ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
			case "firstName":
				return ec.fieldContext_MailingAddress_firstName(ctx, field)
			case "formatted":
				return ec.fieldContext_MailingAddress_formatted(ctx, field)
			case "formattedArea":
				return ec.fieldContext_MailingAddress_formattedArea(ctx, field)
			case "id":
				return ec.fieldContext_MailingAddress_id(ctx, field)
			case "lastName":
				return ec.fieldContext_MailingAddress_lastName(ctx, field)
			case "latitude":
				return ec.fieldContext_MailingAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_MailingAddress_longitude(ctx, field)
			case "name":
				return ec.fieldContext_MailingAddress_name(ctx, field)
			case "phone":
				return ec.fieldContext_MailingAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_MailingAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_MailingAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_MailingAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_shippingDiscountAllocations(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingDiscountAllocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DiscountAllocation)
	fc.Result = res
	return ec.marshalNDiscountAllocation2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountAllocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_shippingDiscountAllocations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "allocatedAmount":
				return ec.fieldContext_DiscountAllocation_allocatedAmount(ctx, field)
			case "discountApplication":
				return ec.fieldContext_DiscountAllocation_discountApplication(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscountAllocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_shippingLine(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_shippingLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingLine, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShippingRate)
	fc.Result = res
	return ec.marshalOShippingRate2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShippingRate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_shippingLine(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "handle":
				return ec.fieldContext_ShippingRate_handle(ctx, field)
			case "price":
				return ec.fieldContext_ShippingRate_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ShippingRate_priceV2(ctx, field)
			case "title":
				return ec.fieldContext_ShippingRate_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShippingRate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_subtotalPrice(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_subtotalPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtotalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_subtotalPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_subtotalPriceV2(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtotalPriceV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_subtotalPriceV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_taxExempt(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_taxExempt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxExempt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_taxExempt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_taxesIncluded(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_taxesIncluded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxesIncluded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_taxesIncluded(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_totalDuties(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_totalDuties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalDuties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_totalDuties(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_totalPrice(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_totalPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_totalPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_totalPriceV2(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_totalPriceV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPriceV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_totalPriceV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_totalTax(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_totalTax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_totalTax(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_totalTaxV2(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_totalTaxV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTaxV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_totalTaxV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Checkout_webUrl(ctx context.Context, field graphql.CollectedField, obj *model.Checkout) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Checkout_webUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Checkout_webUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Checkout",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutAttributesUpdateV2Payload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutAttributesUpdateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutAttributesUpdateV2Payload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutAttributesUpdateV2Payload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutAttributesUpdateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutAttributesUpdateV2Payload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutAttributesUpdateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutAttributesUpdateV2Payload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutAttributesUpdateV2Payload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutAttributesUpdateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutAttributesUpdateV2Payload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutAttributesUpdateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutAttributesUpdateV2Payload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutAttributesUpdateV2Payload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutAttributesUpdateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutBuyerIdentity_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutBuyerIdentity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutBuyerIdentity_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountryCode)
	fc.Result = res
	return ec.marshalOCountryCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutBuyerIdentity_countryCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutBuyerIdentity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CountryCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteFreePayload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteFreePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteFreePayload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteFreePayload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteFreePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteFreePayload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteFreePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteFreePayload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteFreePayload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteFreePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteFreePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteFreePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteFreePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteFreePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteFreePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteWithCreditCardV2Payload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteWithCreditCardV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteWithCreditCardV2Payload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteWithCreditCardV2Payload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteWithCreditCardV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteWithCreditCardV2Payload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteWithCreditCardV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteWithCreditCardV2Payload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteWithCreditCardV2Payload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteWithCreditCardV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteWithCreditCardV2Payload_payment(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteWithCreditCardV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteWithCreditCardV2Payload_payment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Payment)
	fc.Result = res
	return ec.marshalOPayment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteWithCreditCardV2Payload_payment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteWithCreditCardV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Payment_amount(ctx, field)
			case "amountV2":
				return ec.fieldContext_Payment_amountV2(ctx, field)
			case "billingAddress":
				return ec.fieldContext_Payment_billingAddress(ctx, field)
			case "checkout":
				return ec.fieldContext_Payment_checkout(ctx, field)
			case "creditCard":
				return ec.fieldContext_Payment_creditCard(ctx, field)
			case "errorMessage":
				return ec.fieldContext_Payment_errorMessage(ctx, field)
			case "id":
				return ec.fieldContext_Payment_id(ctx, field)
			case "idempotencyKey":
				return ec.fieldContext_Payment_idempotencyKey(ctx, field)
			case "nextActionUrl":
				return ec.fieldContext_Payment_nextActionUrl(ctx, field)
			case "ready":
				return ec.fieldContext_Payment_ready(ctx, field)
			case "test":
				return ec.fieldContext_Payment_test(ctx, field)
			case "transaction":
				return ec.fieldContext_Payment_transaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Payment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteWithCreditCardV2Payload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteWithCreditCardV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteWithCreditCardV2Payload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteWithCreditCardV2Payload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteWithCreditCardV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteWithTokenizedPaymentV3Payload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteWithTokenizedPaymentV3Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteWithTokenizedPaymentV3Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteWithTokenizedPaymentV3Payload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteWithTokenizedPaymentV3Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteWithTokenizedPaymentV3Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteWithTokenizedPaymentV3Payload_payment(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteWithTokenizedPaymentV3Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_payment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Payment)
	fc.Result = res
	return ec.marshalOPayment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_payment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteWithTokenizedPaymentV3Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Payment_amount(ctx, field)
			case "amountV2":
				return ec.fieldContext_Payment_amountV2(ctx, field)
			case "billingAddress":
				return ec.fieldContext_Payment_billingAddress(ctx, field)
			case "checkout":
				return ec.fieldContext_Payment_checkout(ctx, field)
			case "creditCard":
				return ec.fieldContext_Payment_creditCard(ctx, field)
			case "errorMessage":
				return ec.fieldContext_Payment_errorMessage(ctx, field)
			case "id":
				return ec.fieldContext_Payment_id(ctx, field)
			case "idempotencyKey":
				return ec.fieldContext_Payment_idempotencyKey(ctx, field)
			case "nextActionUrl":
				return ec.fieldContext_Payment_nextActionUrl(ctx, field)
			case "ready":
				return ec.fieldContext_Payment_ready(ctx, field)
			case "test":
				return ec.fieldContext_Payment_test(ctx, field)
			case "transaction":
				return ec.fieldContext_Payment_transaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Payment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCompleteWithTokenizedPaymentV3Payload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCompleteWithTokenizedPaymentV3Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCompleteWithTokenizedPaymentV3Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCreatePayload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCreatePayload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCreatePayload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCreatePayload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCreatePayload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCreatePayload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCreatePayload_queueToken(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCreatePayload_queueToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueueToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCreatePayload_queueToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCreatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCreatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCreatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCustomerAssociateV2Payload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCustomerAssociateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCustomerAssociateV2Payload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCustomerAssociateV2Payload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCustomerAssociateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCustomerAssociateV2Payload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCustomerAssociateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCustomerAssociateV2Payload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCustomerAssociateV2Payload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCustomerAssociateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCustomerAssociateV2Payload_customer(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCustomerAssociateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCustomerAssociateV2Payload_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCustomerAssociateV2Payload_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCustomerAssociateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptsMarketing":
				return ec.fieldContext_Customer_acceptsMarketing(ctx, field)
			case "addresses":
				return ec.fieldContext_Customer_addresses(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "defaultAddress":
				return ec.fieldContext_Customer_defaultAddress(ctx, field)
			case "displayName":
				return ec.fieldContext_Customer_displayName(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Customer_firstName(ctx, field)
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "lastIncompleteCheckout":
				return ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
			case "lastName":
				return ec.fieldContext_Customer_lastName(ctx, field)
			case "metafield":
				return ec.fieldContext_Customer_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Customer_metafields(ctx, field)
			case "numberOfOrders":
				return ec.fieldContext_Customer_numberOfOrders(ctx, field)
			case "orders":
				return ec.fieldContext_Customer_orders(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "tags":
				return ec.fieldContext_Customer_tags(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCustomerAssociateV2Payload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCustomerAssociateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCustomerAssociateV2Payload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCustomerAssociateV2Payload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCustomerAssociateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCustomerDisassociateV2Payload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCustomerDisassociateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCustomerDisassociateV2Payload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCustomerDisassociateV2Payload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCustomerDisassociateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCustomerDisassociateV2Payload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCustomerDisassociateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCustomerDisassociateV2Payload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCustomerDisassociateV2Payload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCustomerDisassociateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutCustomerDisassociateV2Payload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutCustomerDisassociateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutCustomerDisassociateV2Payload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutCustomerDisassociateV2Payload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutCustomerDisassociateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutDiscountCodeApplyV2Payload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutDiscountCodeApplyV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutDiscountCodeApplyV2Payload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutDiscountCodeApplyV2Payload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutDiscountCodeApplyV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutDiscountCodeApplyV2Payload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutDiscountCodeApplyV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutDiscountCodeApplyV2Payload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutDiscountCodeApplyV2Payload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutDiscountCodeApplyV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutDiscountCodeApplyV2Payload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutDiscountCodeApplyV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutDiscountCodeApplyV2Payload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutDiscountCodeApplyV2Payload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutDiscountCodeApplyV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutDiscountCodeRemovePayload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutDiscountCodeRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutDiscountCodeRemovePayload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutDiscountCodeRemovePayload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutDiscountCodeRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutDiscountCodeRemovePayload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutDiscountCodeRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutDiscountCodeRemovePayload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutDiscountCodeRemovePayload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutDiscountCodeRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutDiscountCodeRemovePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutDiscountCodeRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutDiscountCodeRemovePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutDiscountCodeRemovePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutDiscountCodeRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutEmailUpdateV2Payload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutEmailUpdateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutEmailUpdateV2Payload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutEmailUpdateV2Payload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutEmailUpdateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutEmailUpdateV2Payload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutEmailUpdateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutEmailUpdateV2Payload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutEmailUpdateV2Payload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutEmailUpdateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutEmailUpdateV2Payload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutEmailUpdateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutEmailUpdateV2Payload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutEmailUpdateV2Payload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutEmailUpdateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutGiftCardRemoveV2Payload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutGiftCardRemoveV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutGiftCardRemoveV2Payload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutGiftCardRemoveV2Payload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutGiftCardRemoveV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutGiftCardRemoveV2Payload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutGiftCardRemoveV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutGiftCardRemoveV2Payload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutGiftCardRemoveV2Payload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutGiftCardRemoveV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutGiftCardRemoveV2Payload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutGiftCardRemoveV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutGiftCardRemoveV2Payload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutGiftCardRemoveV2Payload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutGiftCardRemoveV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutGiftCardsAppendPayload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutGiftCardsAppendPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutGiftCardsAppendPayload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutGiftCardsAppendPayload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutGiftCardsAppendPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutGiftCardsAppendPayload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutGiftCardsAppendPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutGiftCardsAppendPayload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutGiftCardsAppendPayload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutGiftCardsAppendPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutGiftCardsAppendPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutGiftCardsAppendPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutGiftCardsAppendPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutGiftCardsAppendPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutGiftCardsAppendPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItem_customAttributes(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItem_customAttributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attribute)
	fc.Result = res
	return ec.marshalNAttribute2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItem_customAttributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Attribute_key(ctx, field)
			case "value":
				return ec.fieldContext_Attribute_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItem_discountAllocations(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItem_discountAllocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountAllocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DiscountAllocation)
	fc.Result = res
	return ec.marshalNDiscountAllocation2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountAllocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItem_discountAllocations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "allocatedAmount":
				return ec.fieldContext_DiscountAllocation_allocatedAmount(ctx, field)
			case "discountApplication":
				return ec.fieldContext_DiscountAllocation_discountApplication(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscountAllocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItem_id(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItem_quantity(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItem_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItem_quantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItem_title(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItem_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItem_unitPrice(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItem_unitPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItem_unitPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItem_variant(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItem_variant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariant)
	fc.Result = res
	return ec.marshalOProductVariant2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItem_variant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableForSale":
				return ec.fieldContext_ProductVariant_availableForSale(ctx, field)
			case "barcode":
				return ec.fieldContext_ProductVariant_barcode(ctx, field)
			case "compareAtPrice":
				return ec.fieldContext_ProductVariant_compareAtPrice(ctx, field)
			case "compareAtPriceV2":
				return ec.fieldContext_ProductVariant_compareAtPriceV2(ctx, field)
			case "components":
				return ec.fieldContext_ProductVariant_components(ctx, field)
			case "currentlyNotInStock":
				return ec.fieldContext_ProductVariant_currentlyNotInStock(ctx, field)
			case "groupedBy":
				return ec.fieldContext_ProductVariant_groupedBy(ctx, field)
			case "id":
				return ec.fieldContext_ProductVariant_id(ctx, field)
			case "image":
				return ec.fieldContext_ProductVariant_image(ctx, field)
			case "metafield":
				return ec.fieldContext_ProductVariant_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_ProductVariant_metafields(ctx, field)
			case "price":
				return ec.fieldContext_ProductVariant_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ProductVariant_priceV2(ctx, field)
			case "product":
				return ec.fieldContext_ProductVariant_product(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_ProductVariant_quantityAvailable(ctx, field)
			case "quantityPriceBreaks":
				return ec.fieldContext_ProductVariant_quantityPriceBreaks(ctx, field)
			case "quantityRule":
				return ec.fieldContext_ProductVariant_quantityRule(ctx, field)
			case "requiresComponents":
				return ec.fieldContext_ProductVariant_requiresComponents(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_ProductVariant_requiresShipping(ctx, field)
			case "selectedOptions":
				return ec.fieldContext_ProductVariant_selectedOptions(ctx, field)
			case "sellingPlanAllocations":
				return ec.fieldContext_ProductVariant_sellingPlanAllocations(ctx, field)
			case "shopPayInstallmentsPricing":
				return ec.fieldContext_ProductVariant_shopPayInstallmentsPricing(ctx, field)
			case "sku":
				return ec.fieldContext_ProductVariant_sku(ctx, field)
			case "storeAvailability":
				return ec.fieldContext_ProductVariant_storeAvailability(ctx, field)
			case "taxable":
				return ec.fieldContext_ProductVariant_taxable(ctx, field)
			case "title":
				return ec.fieldContext_ProductVariant_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_ProductVariant_unitPrice(ctx, field)
			case "unitPriceMeasurement":
				return ec.fieldContext_ProductVariant_unitPriceMeasurement(ctx, field)
			case "weight":
				return ec.fieldContext_ProductVariant_weight(ctx, field)
			case "weightUnit":
				return ec.fieldContext_ProductVariant_weightUnit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutLineItemEdge)
	fc.Result = res
	return ec.marshalNCheckoutLineItemEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CheckoutLineItemEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CheckoutLineItemEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutLineItemEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutLineItem)
	fc.Result = res
	return ec.marshalNCheckoutLineItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customAttributes":
				return ec.fieldContext_CheckoutLineItem_customAttributes(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_CheckoutLineItem_discountAllocations(ctx, field)
			case "id":
				return ec.fieldContext_CheckoutLineItem_id(ctx, field)
			case "quantity":
				return ec.fieldContext_CheckoutLineItem_quantity(ctx, field)
			case "title":
				return ec.fieldContext_CheckoutLineItem_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_CheckoutLineItem_unitPrice(ctx, field)
			case "variant":
				return ec.fieldContext_CheckoutLineItem_variant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutLineItem)
	fc.Result = res
	return ec.marshalNCheckoutLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customAttributes":
				return ec.fieldContext_CheckoutLineItem_customAttributes(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_CheckoutLineItem_discountAllocations(ctx, field)
			case "id":
				return ec.fieldContext_CheckoutLineItem_id(ctx, field)
			case "quantity":
				return ec.fieldContext_CheckoutLineItem_quantity(ctx, field)
			case "title":
				return ec.fieldContext_CheckoutLineItem_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_CheckoutLineItem_unitPrice(ctx, field)
			case "variant":
				return ec.fieldContext_CheckoutLineItem_variant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsAddPayload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsAddPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsAddPayload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsAddPayload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsAddPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsAddPayload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsAddPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsAddPayload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsAddPayload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsAddPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsAddPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsAddPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsAddPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsAddPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsAddPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsRemovePayload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsRemovePayload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsRemovePayload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsRemovePayload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsRemovePayload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsRemovePayload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsRemovePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsRemovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsRemovePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsRemovePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsRemovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsReplacePayload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsReplacePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsReplacePayload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsReplacePayload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsReplacePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsReplacePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsReplacePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsReplacePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsReplacePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsReplacePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsUpdatePayload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsUpdatePayload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsUpdatePayload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsUpdatePayload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsUpdatePayload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsUpdatePayload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutLineItemsUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutLineItemsUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutLineItemsUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutLineItemsUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutLineItemsUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutShippingAddressUpdateV2Payload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutShippingAddressUpdateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutShippingAddressUpdateV2Payload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutShippingAddressUpdateV2Payload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutShippingAddressUpdateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutShippingAddressUpdateV2Payload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutShippingAddressUpdateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutShippingAddressUpdateV2Payload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutShippingAddressUpdateV2Payload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutShippingAddressUpdateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutShippingAddressUpdateV2Payload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutShippingAddressUpdateV2Payload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutShippingAddressUpdateV2Payload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutShippingAddressUpdateV2Payload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutShippingAddressUpdateV2Payload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutShippingLineUpdatePayload_checkout(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutShippingLineUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutShippingLineUpdatePayload_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutShippingLineUpdatePayload_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutShippingLineUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutShippingLineUpdatePayload_checkoutUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutShippingLineUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutShippingLineUpdatePayload_checkoutUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CheckoutUserError)
	fc.Result = res
	return ec.marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutShippingLineUpdatePayload_checkoutUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutShippingLineUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CheckoutUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CheckoutUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CheckoutUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutShippingLineUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutShippingLineUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutShippingLineUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutShippingLineUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutShippingLineUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutUserError_code(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutUserError_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutErrorCode)
	fc.Result = res
	return ec.marshalOCheckoutErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutUserError_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CheckoutErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutUserError_field(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutUserError_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutUserError_field(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckoutUserError_message(ctx context.Context, field graphql.CollectedField, obj *model.CheckoutUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckoutUserError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckoutUserError_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckoutUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Collection_description(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Collection_description_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Collection_descriptionHtml(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_descriptionHtml(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionHTML, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNHTML2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_descriptionHtml(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Collection_handle(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Collection_id(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Collection_image(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Collection_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Collection_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Collection_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Collection_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Collection_onlineStoreUrl(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_onlineStoreUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnlineStoreURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_onlineStoreUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Collection_products(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductConnection)
	fc.Result = res
	return ec.marshalNProductConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_products(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProductConnection_edges(ctx, field)
			case "filters":
				return ec.fieldContext_ProductConnection_filters(ctx, field)
			case "nodes":
				return ec.fieldContext_ProductConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProductConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Collection_products_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Collection_seo(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_seo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Seo)
	fc.Result = res
	return ec.marshalNSEO2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSeo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_seo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_SEO_description(ctx, field)
			case "title":
				return ec.fieldContext_SEO_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SEO", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Collection_title(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Collection_trackingParameters(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_trackingParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrackingParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_trackingParameters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Collection_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Collection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Collection_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Collection_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Collection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CollectionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.CollectionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CollectionConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CollectionEdge)
	fc.Result = res
	return ec.marshalNCollectionEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CollectionConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CollectionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CollectionEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CollectionEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CollectionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CollectionConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.CollectionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CollectionConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Collection)
	fc.Result = res
	return ec.marshalNCollection2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CollectionConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CollectionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_Collection_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Collection_descriptionHtml(ctx, field)
			case "handle":
				return ec.fieldContext_Collection_handle(ctx, field)
			case "id":
				return ec.fieldContext_Collection_id(ctx, field)
			case "image":
				return ec.fieldContext_Collection_image(ctx, field)
			case "metafield":
				return ec.fieldContext_Collection_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Collection_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Collection_onlineStoreUrl(ctx, field)
			case "products":
				return ec.fieldContext_Collection_products(ctx, field)
			case "seo":
				return ec.fieldContext_Collection_seo(ctx, field)
			case "title":
				return ec.fieldContext_Collection_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Collection_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Collection_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Collection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CollectionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.CollectionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CollectionConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CollectionConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CollectionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CollectionConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.CollectionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CollectionConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNUnsignedInt642string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CollectionConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CollectionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UnsignedInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CollectionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.CollectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CollectionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CollectionEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CollectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CollectionEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.CollectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CollectionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Collection)
	fc.Result = res
	return ec.marshalNCollection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CollectionEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CollectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_Collection_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Collection_descriptionHtml(ctx, field)
			case "handle":
				return ec.fieldContext_Collection_handle(ctx, field)
			case "id":
				return ec.fieldContext_Collection_id(ctx, field)
			case "image":
				return ec.fieldContext_Collection_image(ctx, field)
			case "metafield":
				return ec.fieldContext_Collection_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Collection_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Collection_onlineStoreUrl(ctx, field)
			case "products":
				return ec.fieldContext_Collection_products(ctx, field)
			case "seo":
				return ec.fieldContext_Collection_seo(ctx, field)
			case "title":
				return ec.fieldContext_Collection_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Collection_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Collection_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Collection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_author(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CommentAuthor)
	fc.Result = res
	return ec.marshalNCommentAuthor2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCommentAuthor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "email":
				return ec.fieldContext_CommentAuthor_email(ctx, field)
			case "name":
				return ec.fieldContext_CommentAuthor_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommentAuthor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_content(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Comment_content_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Comment_contentHtml(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_contentHtml(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentHTML, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNHTML2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_contentHtml(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_id(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentAuthor_email(ctx context.Context, field graphql.CollectedField, obj *model.CommentAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentAuthor_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentAuthor_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentAuthor_name(ctx context.Context, field graphql.CollectedField, obj *model.CommentAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentAuthor_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentAuthor_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.CommentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CommentEdge)
	fc.Result = res
	return ec.marshalNCommentEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCommentEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CommentEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CommentEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommentEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.CommentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Comment_author(ctx, field)
			case "content":
				return ec.fieldContext_Comment_content(ctx, field)
			case "contentHtml":
				return ec.fieldContext_Comment_contentHtml(ctx, field)
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.CommentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.CommentEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.CommentEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Comment_author(ctx, field)
			case "content":
				return ec.fieldContext_Comment_content(ctx, field)
			case "contentHtml":
				return ec.fieldContext_Comment_contentHtml(ctx, field)
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_externalId(ctx context.Context, field graphql.CollectedField, obj *model.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_externalId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_id(ctx context.Context, field graphql.CollectedField, obj *model.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Company_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Company_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Company_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Company_name(ctx context.Context, field graphql.CollectedField, obj *model.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Company) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Company_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Company_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyContact_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyContact_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyContact_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyContact_id(ctx context.Context, field graphql.CollectedField, obj *model.CompanyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyContact_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyContact_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyContact_locale(ctx context.Context, field graphql.CollectedField, obj *model.CompanyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyContact_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyContact_locale(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyContact_title(ctx context.Context, field graphql.CollectedField, obj *model.CompanyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyContact_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyContact_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyContact_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyContact_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyContact_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyLocation_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyLocation_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyLocation_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyLocation_externalId(ctx context.Context, field graphql.CollectedField, obj *model.CompanyLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyLocation_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyLocation_externalId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyLocation_id(ctx context.Context, field graphql.CollectedField, obj *model.CompanyLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyLocation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyLocation_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyLocation_locale(ctx context.Context, field graphql.CollectedField, obj *model.CompanyLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyLocation_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyLocation_locale(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyLocation_metafield(ctx context.Context, field graphql.CollectedField, obj *model.CompanyLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyLocation_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyLocation_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_CompanyLocation_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _CompanyLocation_metafields(ctx context.Context, field graphql.CollectedField, obj *model.CompanyLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyLocation_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyLocation_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_CompanyLocation_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _CompanyLocation_name(ctx context.Context, field graphql.CollectedField, obj *model.CompanyLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyLocation_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyLocation_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyLocation_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyLocation_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyLocation_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompletePaymentChallenge_redirectUrl(ctx context.Context, field graphql.CollectedField, obj *model.CompletePaymentChallenge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompletePaymentChallenge_redirectUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedirectURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompletePaymentChallenge_redirectUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompletePaymentChallenge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompletionError_code(ctx context.Context, field graphql.CollectedField, obj *model.CompletionError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompletionError_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CompletionErrorCode)
	fc.Result = res
	return ec.marshalNCompletionErrorCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompletionErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompletionError_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompletionError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CompletionErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompletionError_message(ctx context.Context, field graphql.CollectedField, obj *model.CompletionError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompletionError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompletionError_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompletionError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentizableCartLine_attribute(ctx context.Context, field graphql.CollectedField, obj *model.ComponentizableCartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentizableCartLine_attribute(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attribute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Attribute)
	fc.Result = res
	return ec.marshalOAttribute2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentizableCartLine_attribute(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentizableCartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Attribute_key(ctx, field)
			case "value":
				return ec.fieldContext_Attribute_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribute", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ComponentizableCartLine_attribute_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ComponentizableCartLine_attributes(ctx context.Context, field graphql.CollectedField, obj *model.ComponentizableCartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentizableCartLine_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attribute)
	fc.Result = res
	return ec.marshalNAttribute2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentizableCartLine_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentizableCartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Attribute_key(ctx, field)
			case "value":
				return ec.fieldContext_Attribute_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentizableCartLine_cost(ctx context.Context, field graphql.CollectedField, obj *model.ComponentizableCartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentizableCartLine_cost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartLineCost)
	fc.Result = res
	return ec.marshalNCartLineCost2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineCost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentizableCartLine_cost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentizableCartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amountPerQuantity":
				return ec.fieldContext_CartLineCost_amountPerQuantity(ctx, field)
			case "compareAtAmountPerQuantity":
				return ec.fieldContext_CartLineCost_compareAtAmountPerQuantity(ctx, field)
			case "subtotalAmount":
				return ec.fieldContext_CartLineCost_subtotalAmount(ctx, field)
			case "totalAmount":
				return ec.fieldContext_CartLineCost_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartLineCost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentizableCartLine_discountAllocations(ctx context.Context, field graphql.CollectedField, obj *model.ComponentizableCartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentizableCartLine_discountAllocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountAllocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CartDiscountAllocation)
	fc.Result = res
	return ec.marshalNCartDiscountAllocation2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountAllocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentizableCartLine_discountAllocations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentizableCartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentizableCartLine_estimatedCost(ctx context.Context, field graphql.CollectedField, obj *model.ComponentizableCartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentizableCartLine_estimatedCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CartLineEstimatedCost)
	fc.Result = res
	return ec.marshalNCartLineEstimatedCost2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineEstimatedCost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentizableCartLine_estimatedCost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentizableCartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_CartLineEstimatedCost_amount(ctx, field)
			case "compareAtAmount":
				return ec.fieldContext_CartLineEstimatedCost_compareAtAmount(ctx, field)
			case "subtotalAmount":
				return ec.fieldContext_CartLineEstimatedCost_subtotalAmount(ctx, field)
			case "totalAmount":
				return ec.fieldContext_CartLineEstimatedCost_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartLineEstimatedCost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentizableCartLine_id(ctx context.Context, field graphql.CollectedField, obj *model.ComponentizableCartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentizableCartLine_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentizableCartLine_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentizableCartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentizableCartLine_lineComponents(ctx context.Context, field graphql.CollectedField, obj *model.ComponentizableCartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentizableCartLine_lineComponents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineComponents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CartLine)
	fc.Result = res
	return ec.marshalNCartLine2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentizableCartLine_lineComponents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentizableCartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "attribute":
				return ec.fieldContext_CartLine_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_CartLine_attributes(ctx, field)
			case "cost":
				return ec.fieldContext_CartLine_cost(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_CartLine_discountAllocations(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_CartLine_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_CartLine_id(ctx, field)
			case "merchandise":
				return ec.fieldContext_CartLine_merchandise(ctx, field)
			case "quantity":
				return ec.fieldContext_CartLine_quantity(ctx, field)
			case "sellingPlanAllocation":
				return ec.fieldContext_CartLine_sellingPlanAllocation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartLine", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentizableCartLine_merchandise(ctx context.Context, field graphql.CollectedField, obj *model.ComponentizableCartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentizableCartLine_merchandise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Merchandise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Merchandise)
	fc.Result = res
	return ec.marshalNMerchandise2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMerchandise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentizableCartLine_merchandise(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentizableCartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Merchandise does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentizableCartLine_quantity(ctx context.Context, field graphql.CollectedField, obj *model.ComponentizableCartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentizableCartLine_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentizableCartLine_quantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentizableCartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentizableCartLine_sellingPlanAllocation(ctx context.Context, field graphql.CollectedField, obj *model.ComponentizableCartLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentizableCartLine_sellingPlanAllocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellingPlanAllocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellingPlanAllocation)
	fc.Result = res
	return ec.marshalOSellingPlanAllocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentizableCartLine_sellingPlanAllocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentizableCartLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkoutChargeAmount":
				return ec.fieldContext_SellingPlanAllocation_checkoutChargeAmount(ctx, field)
			case "priceAdjustments":
				return ec.fieldContext_SellingPlanAllocation_priceAdjustments(ctx, field)
			case "remainingBalanceChargeAmount":
				return ec.fieldContext_SellingPlanAllocation_remainingBalanceChargeAmount(ctx, field)
			case "sellingPlan":
				return ec.fieldContext_SellingPlanAllocation_sellingPlan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanAllocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Count_count(ctx context.Context, field graphql.CollectedField, obj *model.Count) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Count_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Count_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Count",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Count_precision(ctx context.Context, field graphql.CollectedField, obj *model.Count) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Count_precision(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Precision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CountPrecision)
	fc.Result = res
	return ec.marshalNCountPrecision2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountPrecision(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Count_precision(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Count",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CountPrecision does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_availableLanguages(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_availableLanguages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableLanguages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Language)
	fc.Result = res
	return ec.marshalNLanguage2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_availableLanguages(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endonymName":
				return ec.fieldContext_Language_endonymName(ctx, field)
			case "isoCode":
				return ec.fieldContext_Language_isoCode(ctx, field)
			case "name":
				return ec.fieldContext_Language_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Language", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_currency(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Currency)
	fc.Result = res
	return ec.marshalNCurrency2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_currency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isoCode":
				return ec.fieldContext_Currency_isoCode(ctx, field)
			case "name":
				return ec.fieldContext_Currency_name(ctx, field)
			case "symbol":
				return ec.fieldContext_Currency_symbol(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Currency", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_defaultLanguage(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_defaultLanguage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultLanguage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Language)
	fc.Result = res
	return ec.marshalNLanguage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_defaultLanguage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endonymName":
				return ec.fieldContext_Language_endonymName(ctx, field)
			case "isoCode":
				return ec.fieldContext_Language_isoCode(ctx, field)
			case "name":
				return ec.fieldContext_Language_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Language", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_isoCode(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_isoCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsoCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CountryCode)
	fc.Result = res
	return ec.marshalNCountryCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_isoCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CountryCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_market(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_market(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Market, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Market)
	fc.Result = res
	return ec.marshalOMarket2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMarket(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_market(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "handle":
				return ec.fieldContext_Market_handle(ctx, field)
			case "id":
				return ec.fieldContext_Market_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Market_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Market_metafields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Market", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_name(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_unitSystem(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_unitSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitSystem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UnitSystem)
	fc.Result = res
	return ec.marshalNUnitSystem2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitSystem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_unitSystem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UnitSystem does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCard_brand(ctx context.Context, field graphql.CollectedField, obj *model.CreditCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCard_brand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCard_brand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCard_expiryMonth(ctx context.Context, field graphql.CollectedField, obj *model.CreditCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCard_expiryMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCard_expiryMonth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCard_expiryYear(ctx context.Context, field graphql.CollectedField, obj *model.CreditCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCard_expiryYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCard_expiryYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCard_firstDigits(ctx context.Context, field graphql.CollectedField, obj *model.CreditCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCard_firstDigits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstDigits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCard_firstDigits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCard_firstName(ctx context.Context, field graphql.CollectedField, obj *model.CreditCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCard_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCard_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCard_lastDigits(ctx context.Context, field graphql.CollectedField, obj *model.CreditCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCard_lastDigits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastDigits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCard_lastDigits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCard_lastName(ctx context.Context, field graphql.CollectedField, obj *model.CreditCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCard_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCard_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCard_maskedNumber(ctx context.Context, field graphql.CollectedField, obj *model.CreditCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCard_maskedNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaskedNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCard_maskedNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Currency_isoCode(ctx context.Context, field graphql.CollectedField, obj *model.Currency) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Currency_isoCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsoCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CurrencyCode)
	fc.Result = res
	return ec.marshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Currency_isoCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Currency",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CurrencyCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Currency_name(ctx context.Context, field graphql.CollectedField, obj *model.Currency) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Currency_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Currency_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Currency",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Currency_symbol(ctx context.Context, field graphql.CollectedField, obj *model.Currency) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Currency_symbol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Symbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Currency_symbol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Currency",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_acceptsMarketing(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_acceptsMarketing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AcceptsMarketing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_acceptsMarketing(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_addresses(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_addresses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Addresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MailingAddressConnection)
	fc.Result = res
	return ec.marshalNMailingAddressConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_addresses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MailingAddressConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_MailingAddressConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MailingAddressConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddressConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Customer_addresses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Customer_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_defaultAddress(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_defaultAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MailingAddress)
	fc.Result = res
	return ec.marshalOMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_defaultAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_MailingAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_MailingAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_MailingAddress_city(ctx, field)
			case "company":
				return ec.fieldContext_MailingAddress_company(ctx, field)
			case "country":
				return ec.fieldContext_MailingAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_MailingAddress_countryCode(ctx, field)
			case "countryCodeV2":
				return ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
			case "firstName":
				return ec.fieldContext_MailingAddress_firstName(ctx, field)
			case "formatted":
				return ec.fieldContext_MailingAddress_formatted(ctx, field)
			case "formattedArea":
				return ec.fieldContext_MailingAddress_formattedArea(ctx, field)
			case "id":
				return ec.fieldContext_MailingAddress_id(ctx, field)
			case "lastName":
				return ec.fieldContext_MailingAddress_lastName(ctx, field)
			case "latitude":
				return ec.fieldContext_MailingAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_MailingAddress_longitude(ctx, field)
			case "name":
				return ec.fieldContext_MailingAddress_name(ctx, field)
			case "phone":
				return ec.fieldContext_MailingAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_MailingAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_MailingAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_MailingAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_displayName(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_displayName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_email(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_firstName(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_id(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_lastIncompleteCheckout(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastIncompleteCheckout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_lastIncompleteCheckout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_lastName(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Customer_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Customer_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Customer_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Customer_numberOfOrders(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_numberOfOrders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfOrders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNUnsignedInt642string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_numberOfOrders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UnsignedInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_orders(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_orders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Orders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrderConnection)
	fc.Result = res
	return ec.marshalNOrderConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_orders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OrderConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_OrderConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OrderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_OrderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Customer_orders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Customer_phone(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_tags(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_tags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessToken_accessToken(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessToken_accessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessToken_accessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessToken_expiresAt(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessToken_expiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessToken_expiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenCreatePayload_customerAccessToken(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenCreatePayload_customerAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessToken)
	fc.Result = res
	return ec.marshalOCustomerAccessToken2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenCreatePayload_customerAccessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_CustomerAccessToken_accessToken(ctx, field)
			case "expiresAt":
				return ec.fieldContext_CustomerAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenCreatePayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenCreatePayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenCreatePayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenCreatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenCreatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenCreatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenCreateWithMultipassPayload_customerAccessToken(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenCreateWithMultipassPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenCreateWithMultipassPayload_customerAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessToken)
	fc.Result = res
	return ec.marshalOCustomerAccessToken2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenCreateWithMultipassPayload_customerAccessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenCreateWithMultipassPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_CustomerAccessToken_accessToken(ctx, field)
			case "expiresAt":
				return ec.fieldContext_CustomerAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenCreateWithMultipassPayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenCreateWithMultipassPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenCreateWithMultipassPayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenCreateWithMultipassPayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenCreateWithMultipassPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenCreateWithMultipassPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenCreateWithMultipassPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenCreateWithMultipassPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenCreateWithMultipassPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenCreateWithMultipassPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenDeletePayload_deletedAccessToken(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenDeletePayload_deletedAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenDeletePayload_deletedAccessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenDeletePayload_deletedCustomerAccessTokenId(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenDeletePayload_deletedCustomerAccessTokenId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedCustomerAccessTokenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenDeletePayload_deletedCustomerAccessTokenId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenDeletePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenDeletePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenDeletePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenRenewPayload_customerAccessToken(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenRenewPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenRenewPayload_customerAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessToken)
	fc.Result = res
	return ec.marshalOCustomerAccessToken2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenRenewPayload_customerAccessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenRenewPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_CustomerAccessToken_accessToken(ctx, field)
			case "expiresAt":
				return ec.fieldContext_CustomerAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAccessTokenRenewPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAccessTokenRenewPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAccessTokenRenewPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAccessTokenRenewPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAccessTokenRenewPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerActivateByUrlPayload_customer(ctx context.Context, field graphql.CollectedField, obj *model.CustomerActivateByURLPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerActivateByUrlPayload_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerActivateByUrlPayload_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerActivateByUrlPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptsMarketing":
				return ec.fieldContext_Customer_acceptsMarketing(ctx, field)
			case "addresses":
				return ec.fieldContext_Customer_addresses(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "defaultAddress":
				return ec.fieldContext_Customer_defaultAddress(ctx, field)
			case "displayName":
				return ec.fieldContext_Customer_displayName(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Customer_firstName(ctx, field)
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "lastIncompleteCheckout":
				return ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
			case "lastName":
				return ec.fieldContext_Customer_lastName(ctx, field)
			case "metafield":
				return ec.fieldContext_Customer_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Customer_metafields(ctx, field)
			case "numberOfOrders":
				return ec.fieldContext_Customer_numberOfOrders(ctx, field)
			case "orders":
				return ec.fieldContext_Customer_orders(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "tags":
				return ec.fieldContext_Customer_tags(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerActivateByUrlPayload_customerAccessToken(ctx context.Context, field graphql.CollectedField, obj *model.CustomerActivateByURLPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerActivateByUrlPayload_customerAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessToken)
	fc.Result = res
	return ec.marshalOCustomerAccessToken2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerActivateByUrlPayload_customerAccessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerActivateByUrlPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_CustomerAccessToken_accessToken(ctx, field)
			case "expiresAt":
				return ec.fieldContext_CustomerAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerActivateByUrlPayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerActivateByURLPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerActivateByUrlPayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerActivateByUrlPayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerActivateByUrlPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerActivateByUrlPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerActivateByURLPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerActivateByUrlPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerActivateByUrlPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerActivateByUrlPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerActivatePayload_customer(ctx context.Context, field graphql.CollectedField, obj *model.CustomerActivatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerActivatePayload_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerActivatePayload_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerActivatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptsMarketing":
				return ec.fieldContext_Customer_acceptsMarketing(ctx, field)
			case "addresses":
				return ec.fieldContext_Customer_addresses(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "defaultAddress":
				return ec.fieldContext_Customer_defaultAddress(ctx, field)
			case "displayName":
				return ec.fieldContext_Customer_displayName(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Customer_firstName(ctx, field)
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "lastIncompleteCheckout":
				return ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
			case "lastName":
				return ec.fieldContext_Customer_lastName(ctx, field)
			case "metafield":
				return ec.fieldContext_Customer_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Customer_metafields(ctx, field)
			case "numberOfOrders":
				return ec.fieldContext_Customer_numberOfOrders(ctx, field)
			case "orders":
				return ec.fieldContext_Customer_orders(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "tags":
				return ec.fieldContext_Customer_tags(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerActivatePayload_customerAccessToken(ctx context.Context, field graphql.CollectedField, obj *model.CustomerActivatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerActivatePayload_customerAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessToken)
	fc.Result = res
	return ec.marshalOCustomerAccessToken2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerActivatePayload_customerAccessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerActivatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_CustomerAccessToken_accessToken(ctx, field)
			case "expiresAt":
				return ec.fieldContext_CustomerAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerActivatePayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerActivatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerActivatePayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerActivatePayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerActivatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerActivatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerActivatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerActivatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerActivatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerActivatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAddressCreatePayload_customerAddress(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAddressCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAddressCreatePayload_customerAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MailingAddress)
	fc.Result = res
	return ec.marshalOMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAddressCreatePayload_customerAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAddressCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_MailingAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_MailingAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_MailingAddress_city(ctx, field)
			case "company":
				return ec.fieldContext_MailingAddress_company(ctx, field)
			case "country":
				return ec.fieldContext_MailingAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_MailingAddress_countryCode(ctx, field)
			case "countryCodeV2":
				return ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
			case "firstName":
				return ec.fieldContext_MailingAddress_firstName(ctx, field)
			case "formatted":
				return ec.fieldContext_MailingAddress_formatted(ctx, field)
			case "formattedArea":
				return ec.fieldContext_MailingAddress_formattedArea(ctx, field)
			case "id":
				return ec.fieldContext_MailingAddress_id(ctx, field)
			case "lastName":
				return ec.fieldContext_MailingAddress_lastName(ctx, field)
			case "latitude":
				return ec.fieldContext_MailingAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_MailingAddress_longitude(ctx, field)
			case "name":
				return ec.fieldContext_MailingAddress_name(ctx, field)
			case "phone":
				return ec.fieldContext_MailingAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_MailingAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_MailingAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_MailingAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAddressCreatePayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAddressCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAddressCreatePayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAddressCreatePayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAddressCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAddressCreatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAddressCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAddressCreatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAddressCreatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAddressCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAddressDeletePayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAddressDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAddressDeletePayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAddressDeletePayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAddressDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAddressDeletePayload_deletedCustomerAddressId(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAddressDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAddressDeletePayload_deletedCustomerAddressId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedCustomerAddressID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAddressDeletePayload_deletedCustomerAddressId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAddressDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAddressDeletePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAddressDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAddressDeletePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAddressDeletePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAddressDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAddressUpdatePayload_customerAddress(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAddressUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAddressUpdatePayload_customerAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MailingAddress)
	fc.Result = res
	return ec.marshalOMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAddressUpdatePayload_customerAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAddressUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_MailingAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_MailingAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_MailingAddress_city(ctx, field)
			case "company":
				return ec.fieldContext_MailingAddress_company(ctx, field)
			case "country":
				return ec.fieldContext_MailingAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_MailingAddress_countryCode(ctx, field)
			case "countryCodeV2":
				return ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
			case "firstName":
				return ec.fieldContext_MailingAddress_firstName(ctx, field)
			case "formatted":
				return ec.fieldContext_MailingAddress_formatted(ctx, field)
			case "formattedArea":
				return ec.fieldContext_MailingAddress_formattedArea(ctx, field)
			case "id":
				return ec.fieldContext_MailingAddress_id(ctx, field)
			case "lastName":
				return ec.fieldContext_MailingAddress_lastName(ctx, field)
			case "latitude":
				return ec.fieldContext_MailingAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_MailingAddress_longitude(ctx, field)
			case "name":
				return ec.fieldContext_MailingAddress_name(ctx, field)
			case "phone":
				return ec.fieldContext_MailingAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_MailingAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_MailingAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_MailingAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAddressUpdatePayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAddressUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAddressUpdatePayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAddressUpdatePayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAddressUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerAddressUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerAddressUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerAddressUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerAddressUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerAddressUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerCreatePayload_customer(ctx context.Context, field graphql.CollectedField, obj *model.CustomerCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerCreatePayload_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerCreatePayload_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptsMarketing":
				return ec.fieldContext_Customer_acceptsMarketing(ctx, field)
			case "addresses":
				return ec.fieldContext_Customer_addresses(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "defaultAddress":
				return ec.fieldContext_Customer_defaultAddress(ctx, field)
			case "displayName":
				return ec.fieldContext_Customer_displayName(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Customer_firstName(ctx, field)
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "lastIncompleteCheckout":
				return ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
			case "lastName":
				return ec.fieldContext_Customer_lastName(ctx, field)
			case "metafield":
				return ec.fieldContext_Customer_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Customer_metafields(ctx, field)
			case "numberOfOrders":
				return ec.fieldContext_Customer_numberOfOrders(ctx, field)
			case "orders":
				return ec.fieldContext_Customer_orders(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "tags":
				return ec.fieldContext_Customer_tags(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerCreatePayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerCreatePayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerCreatePayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerCreatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerCreatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerCreatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerDefaultAddressUpdatePayload_customer(ctx context.Context, field graphql.CollectedField, obj *model.CustomerDefaultAddressUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerDefaultAddressUpdatePayload_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerDefaultAddressUpdatePayload_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerDefaultAddressUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptsMarketing":
				return ec.fieldContext_Customer_acceptsMarketing(ctx, field)
			case "addresses":
				return ec.fieldContext_Customer_addresses(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "defaultAddress":
				return ec.fieldContext_Customer_defaultAddress(ctx, field)
			case "displayName":
				return ec.fieldContext_Customer_displayName(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Customer_firstName(ctx, field)
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "lastIncompleteCheckout":
				return ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
			case "lastName":
				return ec.fieldContext_Customer_lastName(ctx, field)
			case "metafield":
				return ec.fieldContext_Customer_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Customer_metafields(ctx, field)
			case "numberOfOrders":
				return ec.fieldContext_Customer_numberOfOrders(ctx, field)
			case "orders":
				return ec.fieldContext_Customer_orders(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "tags":
				return ec.fieldContext_Customer_tags(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerDefaultAddressUpdatePayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerDefaultAddressUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerDefaultAddressUpdatePayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerDefaultAddressUpdatePayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerDefaultAddressUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerDefaultAddressUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerDefaultAddressUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerDefaultAddressUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerDefaultAddressUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerDefaultAddressUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerRecoverPayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerRecoverPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerRecoverPayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerRecoverPayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerRecoverPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerRecoverPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerRecoverPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerRecoverPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerRecoverPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerRecoverPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerResetByUrlPayload_customer(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResetByURLPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerResetByUrlPayload_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerResetByUrlPayload_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerResetByUrlPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptsMarketing":
				return ec.fieldContext_Customer_acceptsMarketing(ctx, field)
			case "addresses":
				return ec.fieldContext_Customer_addresses(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "defaultAddress":
				return ec.fieldContext_Customer_defaultAddress(ctx, field)
			case "displayName":
				return ec.fieldContext_Customer_displayName(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Customer_firstName(ctx, field)
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "lastIncompleteCheckout":
				return ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
			case "lastName":
				return ec.fieldContext_Customer_lastName(ctx, field)
			case "metafield":
				return ec.fieldContext_Customer_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Customer_metafields(ctx, field)
			case "numberOfOrders":
				return ec.fieldContext_Customer_numberOfOrders(ctx, field)
			case "orders":
				return ec.fieldContext_Customer_orders(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "tags":
				return ec.fieldContext_Customer_tags(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerResetByUrlPayload_customerAccessToken(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResetByURLPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerResetByUrlPayload_customerAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessToken)
	fc.Result = res
	return ec.marshalOCustomerAccessToken2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerResetByUrlPayload_customerAccessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerResetByUrlPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_CustomerAccessToken_accessToken(ctx, field)
			case "expiresAt":
				return ec.fieldContext_CustomerAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerResetByUrlPayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResetByURLPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerResetByUrlPayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerResetByUrlPayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerResetByUrlPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerResetByUrlPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResetByURLPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerResetByUrlPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerResetByUrlPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerResetByUrlPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerResetPayload_customer(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResetPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerResetPayload_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerResetPayload_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerResetPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptsMarketing":
				return ec.fieldContext_Customer_acceptsMarketing(ctx, field)
			case "addresses":
				return ec.fieldContext_Customer_addresses(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "defaultAddress":
				return ec.fieldContext_Customer_defaultAddress(ctx, field)
			case "displayName":
				return ec.fieldContext_Customer_displayName(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Customer_firstName(ctx, field)
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "lastIncompleteCheckout":
				return ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
			case "lastName":
				return ec.fieldContext_Customer_lastName(ctx, field)
			case "metafield":
				return ec.fieldContext_Customer_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Customer_metafields(ctx, field)
			case "numberOfOrders":
				return ec.fieldContext_Customer_numberOfOrders(ctx, field)
			case "orders":
				return ec.fieldContext_Customer_orders(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "tags":
				return ec.fieldContext_Customer_tags(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerResetPayload_customerAccessToken(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResetPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerResetPayload_customerAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessToken)
	fc.Result = res
	return ec.marshalOCustomerAccessToken2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerResetPayload_customerAccessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerResetPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_CustomerAccessToken_accessToken(ctx, field)
			case "expiresAt":
				return ec.fieldContext_CustomerAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerResetPayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResetPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerResetPayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerResetPayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerResetPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerResetPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResetPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerResetPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerResetPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerResetPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerUpdatePayload_customer(ctx context.Context, field graphql.CollectedField, obj *model.CustomerUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerUpdatePayload_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerUpdatePayload_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptsMarketing":
				return ec.fieldContext_Customer_acceptsMarketing(ctx, field)
			case "addresses":
				return ec.fieldContext_Customer_addresses(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "defaultAddress":
				return ec.fieldContext_Customer_defaultAddress(ctx, field)
			case "displayName":
				return ec.fieldContext_Customer_displayName(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Customer_firstName(ctx, field)
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "lastIncompleteCheckout":
				return ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
			case "lastName":
				return ec.fieldContext_Customer_lastName(ctx, field)
			case "metafield":
				return ec.fieldContext_Customer_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Customer_metafields(ctx, field)
			case "numberOfOrders":
				return ec.fieldContext_Customer_numberOfOrders(ctx, field)
			case "orders":
				return ec.fieldContext_Customer_orders(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "tags":
				return ec.fieldContext_Customer_tags(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerUpdatePayload_customerAccessToken(ctx context.Context, field graphql.CollectedField, obj *model.CustomerUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerUpdatePayload_customerAccessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessToken)
	fc.Result = res
	return ec.marshalOCustomerAccessToken2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerUpdatePayload_customerAccessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_CustomerAccessToken_accessToken(ctx, field)
			case "expiresAt":
				return ec.fieldContext_CustomerAccessToken_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerUpdatePayload_customerUserErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerUpdatePayload_customerUserErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerUserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerUserError)
	fc.Result = res
	return ec.marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerUpdatePayload_customerUserErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_CustomerUserError_code(ctx, field)
			case "field":
				return ec.fieldContext_CustomerUserError_field(ctx, field)
			case "message":
				return ec.fieldContext_CustomerUserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerUpdatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerUpdatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserError)
	fc.Result = res
	return ec.marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerUpdatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_UserError_field(ctx, field)
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerUserError_code(ctx context.Context, field graphql.CollectedField, obj *model.CustomerUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerUserError_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerErrorCode)
	fc.Result = res
	return ec.marshalOCustomerErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerUserError_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CustomerErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerUserError_field(ctx context.Context, field graphql.CollectedField, obj *model.CustomerUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerUserError_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerUserError_field(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerUserError_message(ctx context.Context, field graphql.CollectedField, obj *model.CustomerUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerUserError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerUserError_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountAllocation_allocatedAmount(ctx context.Context, field graphql.CollectedField, obj *model.DiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountAllocation_allocatedAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllocatedAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountAllocation_allocatedAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountAllocation_discountApplication(ctx context.Context, field graphql.CollectedField, obj *model.DiscountAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountAllocation_discountApplication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountApplication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplication)
	fc.Result = res
	return ec.marshalNDiscountApplication2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplication(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountAllocation_discountApplication(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountApplicationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.DiscountApplicationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountApplicationConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DiscountApplicationEdge)
	fc.Result = res
	return ec.marshalNDiscountApplicationEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountApplicationConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountApplicationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_DiscountApplicationEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_DiscountApplicationEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscountApplicationEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountApplicationConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DiscountApplicationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountApplicationConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DiscountApplication)
	fc.Result = res
	return ec.marshalNDiscountApplication2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountApplicationConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountApplicationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountApplicationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.DiscountApplicationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountApplicationConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountApplicationConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountApplicationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountApplicationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.DiscountApplicationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountApplicationEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountApplicationEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountApplicationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountApplicationEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.DiscountApplicationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountApplicationEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplication)
	fc.Result = res
	return ec.marshalNDiscountApplication2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplication(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountApplicationEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountApplicationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountCodeApplication_allocationMethod(ctx context.Context, field graphql.CollectedField, obj *model.DiscountCodeApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountCodeApplication_allocationMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllocationMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationAllocationMethod)
	fc.Result = res
	return ec.marshalNDiscountApplicationAllocationMethod2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationAllocationMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountCodeApplication_allocationMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountCodeApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationAllocationMethod does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountCodeApplication_applicable(ctx context.Context, field graphql.CollectedField, obj *model.DiscountCodeApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountCodeApplication_applicable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applicable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountCodeApplication_applicable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountCodeApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountCodeApplication_code(ctx context.Context, field graphql.CollectedField, obj *model.DiscountCodeApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountCodeApplication_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountCodeApplication_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountCodeApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountCodeApplication_targetSelection(ctx context.Context, field graphql.CollectedField, obj *model.DiscountCodeApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountCodeApplication_targetSelection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetSelection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetSelection)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetSelection2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountCodeApplication_targetSelection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountCodeApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetSelection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountCodeApplication_targetType(ctx context.Context, field graphql.CollectedField, obj *model.DiscountCodeApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountCodeApplication_targetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetType)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountCodeApplication_targetType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountCodeApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscountCodeApplication_value(ctx context.Context, field graphql.CollectedField, obj *model.DiscountCodeApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscountCodeApplication_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PricingValue)
	fc.Result = res
	return ec.marshalNPricingValue2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPricingValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscountCodeApplication_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscountCodeApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PricingValue does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Domain_host(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Domain_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Domain_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Domain_sslEnabled(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Domain_sslEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SslEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Domain_sslEnabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Domain_url(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Domain_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Domain_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalVideo_alt(ctx context.Context, field graphql.CollectedField, obj *model.ExternalVideo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalVideo_alt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalVideo_alt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalVideo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalVideo_embedUrl(ctx context.Context, field graphql.CollectedField, obj *model.ExternalVideo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalVideo_embedUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmbedURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalVideo_embedUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalVideo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalVideo_embeddedUrl(ctx context.Context, field graphql.CollectedField, obj *model.ExternalVideo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalVideo_embeddedUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmbeddedURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalVideo_embeddedUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalVideo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalVideo_host(ctx context.Context, field graphql.CollectedField, obj *model.ExternalVideo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalVideo_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MediaHost)
	fc.Result = res
	return ec.marshalNMediaHost2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaHost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalVideo_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalVideo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MediaHost does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalVideo_id(ctx context.Context, field graphql.CollectedField, obj *model.ExternalVideo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalVideo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalVideo_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalVideo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalVideo_mediaContentType(ctx context.Context, field graphql.CollectedField, obj *model.ExternalVideo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalVideo_mediaContentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MediaContentType)
	fc.Result = res
	return ec.marshalNMediaContentType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaContentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalVideo_mediaContentType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalVideo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MediaContentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalVideo_originUrl(ctx context.Context, field graphql.CollectedField, obj *model.ExternalVideo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalVideo_originUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalVideo_originUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalVideo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalVideo_presentation(ctx context.Context, field graphql.CollectedField, obj *model.ExternalVideo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalVideo_presentation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Presentation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MediaPresentation)
	fc.Result = res
	return ec.marshalOMediaPresentation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaPresentation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalVideo_presentation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalVideo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "asJson":
				return ec.fieldContext_MediaPresentation_asJson(ctx, field)
			case "id":
				return ec.fieldContext_MediaPresentation_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaPresentation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalVideo_previewImage(ctx context.Context, field graphql.CollectedField, obj *model.ExternalVideo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalVideo_previewImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalVideo_previewImage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalVideo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Filter_id(ctx context.Context, field graphql.CollectedField, obj *model.Filter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Filter_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Filter_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Filter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Filter_label(ctx context.Context, field graphql.CollectedField, obj *model.Filter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Filter_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Filter_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Filter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Filter_presentation(ctx context.Context, field graphql.CollectedField, obj *model.Filter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Filter_presentation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Presentation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FilterPresentation)
	fc.Result = res
	return ec.marshalOFilterPresentation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterPresentation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Filter_presentation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Filter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FilterPresentation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Filter_type(ctx context.Context, field graphql.CollectedField, obj *model.Filter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Filter_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.FilterType)
	fc.Result = res
	return ec.marshalNFilterType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Filter_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Filter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FilterType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Filter_values(ctx context.Context, field graphql.CollectedField, obj *model.Filter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Filter_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FilterValue)
	fc.Result = res
	return ec.marshalNFilterValue2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Filter_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Filter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_FilterValue_count(ctx, field)
			case "id":
				return ec.fieldContext_FilterValue_id(ctx, field)
			case "image":
				return ec.fieldContext_FilterValue_image(ctx, field)
			case "input":
				return ec.fieldContext_FilterValue_input(ctx, field)
			case "label":
				return ec.fieldContext_FilterValue_label(ctx, field)
			case "swatch":
				return ec.fieldContext_FilterValue_swatch(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FilterValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterValue_count(ctx context.Context, field graphql.CollectedField, obj *model.FilterValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterValue_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterValue_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterValue_id(ctx context.Context, field graphql.CollectedField, obj *model.FilterValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterValue_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterValue_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterValue_image(ctx context.Context, field graphql.CollectedField, obj *model.FilterValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterValue_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MediaImage)
	fc.Result = res
	return ec.marshalOMediaImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterValue_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alt":
				return ec.fieldContext_MediaImage_alt(ctx, field)
			case "id":
				return ec.fieldContext_MediaImage_id(ctx, field)
			case "image":
				return ec.fieldContext_MediaImage_image(ctx, field)
			case "mediaContentType":
				return ec.fieldContext_MediaImage_mediaContentType(ctx, field)
			case "presentation":
				return ec.fieldContext_MediaImage_presentation(ctx, field)
			case "previewImage":
				return ec.fieldContext_MediaImage_previewImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterValue_input(ctx context.Context, field graphql.CollectedField, obj *model.FilterValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterValue_input(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Input, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSON2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterValue_input(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterValue_label(ctx context.Context, field graphql.CollectedField, obj *model.FilterValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterValue_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterValue_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterValue_swatch(ctx context.Context, field graphql.CollectedField, obj *model.FilterValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterValue_swatch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Swatch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Swatch)
	fc.Result = res
	return ec.marshalOSwatch2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSwatch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterValue_swatch(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "color":
				return ec.fieldContext_Swatch_color(ctx, field)
			case "image":
				return ec.fieldContext_Swatch_image(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Swatch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fulfillment_fulfillmentLineItems(ctx context.Context, field graphql.CollectedField, obj *model.Fulfillment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Fulfillment_fulfillmentLineItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FulfillmentLineItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FulfillmentLineItemConnection)
	fc.Result = res
	return ec.marshalNFulfillmentLineItemConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItemConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Fulfillment_fulfillmentLineItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fulfillment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_FulfillmentLineItemConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_FulfillmentLineItemConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_FulfillmentLineItemConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FulfillmentLineItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Fulfillment_fulfillmentLineItems_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Fulfillment_trackingCompany(ctx context.Context, field graphql.CollectedField, obj *model.Fulfillment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Fulfillment_trackingCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrackingCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Fulfillment_trackingCompany(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fulfillment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fulfillment_trackingInfo(ctx context.Context, field graphql.CollectedField, obj *model.Fulfillment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Fulfillment_trackingInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrackingInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FulfillmentTrackingInfo)
	fc.Result = res
	return ec.marshalNFulfillmentTrackingInfo2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentTrackingInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Fulfillment_trackingInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fulfillment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "number":
				return ec.fieldContext_FulfillmentTrackingInfo_number(ctx, field)
			case "url":
				return ec.fieldContext_FulfillmentTrackingInfo_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FulfillmentTrackingInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Fulfillment_trackingInfo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _FulfillmentLineItem_lineItem(ctx context.Context, field graphql.CollectedField, obj *model.FulfillmentLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FulfillmentLineItem_lineItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineItem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrderLineItem)
	fc.Result = res
	return ec.marshalNOrderLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FulfillmentLineItem_lineItem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FulfillmentLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currentQuantity":
				return ec.fieldContext_OrderLineItem_currentQuantity(ctx, field)
			case "customAttributes":
				return ec.fieldContext_OrderLineItem_customAttributes(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_OrderLineItem_discountAllocations(ctx, field)
			case "discountedTotalPrice":
				return ec.fieldContext_OrderLineItem_discountedTotalPrice(ctx, field)
			case "originalTotalPrice":
				return ec.fieldContext_OrderLineItem_originalTotalPrice(ctx, field)
			case "quantity":
				return ec.fieldContext_OrderLineItem_quantity(ctx, field)
			case "title":
				return ec.fieldContext_OrderLineItem_title(ctx, field)
			case "variant":
				return ec.fieldContext_OrderLineItem_variant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FulfillmentLineItem_quantity(ctx context.Context, field graphql.CollectedField, obj *model.FulfillmentLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FulfillmentLineItem_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FulfillmentLineItem_quantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FulfillmentLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FulfillmentLineItemConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.FulfillmentLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FulfillmentLineItemConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FulfillmentLineItemEdge)
	fc.Result = res
	return ec.marshalNFulfillmentLineItemEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItemEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FulfillmentLineItemConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FulfillmentLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_FulfillmentLineItemEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_FulfillmentLineItemEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FulfillmentLineItemEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FulfillmentLineItemConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.FulfillmentLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FulfillmentLineItemConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FulfillmentLineItem)
	fc.Result = res
	return ec.marshalNFulfillmentLineItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FulfillmentLineItemConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FulfillmentLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lineItem":
				return ec.fieldContext_FulfillmentLineItem_lineItem(ctx, field)
			case "quantity":
				return ec.fieldContext_FulfillmentLineItem_quantity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FulfillmentLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FulfillmentLineItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.FulfillmentLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FulfillmentLineItemConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FulfillmentLineItemConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FulfillmentLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FulfillmentLineItemEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.FulfillmentLineItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FulfillmentLineItemEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FulfillmentLineItemEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FulfillmentLineItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FulfillmentLineItemEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.FulfillmentLineItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FulfillmentLineItemEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FulfillmentLineItem)
	fc.Result = res
	return ec.marshalNFulfillmentLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FulfillmentLineItemEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FulfillmentLineItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lineItem":
				return ec.fieldContext_FulfillmentLineItem_lineItem(ctx, field)
			case "quantity":
				return ec.fieldContext_FulfillmentLineItem_quantity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FulfillmentLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FulfillmentTrackingInfo_number(ctx context.Context, field graphql.CollectedField, obj *model.FulfillmentTrackingInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FulfillmentTrackingInfo_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FulfillmentTrackingInfo_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FulfillmentTrackingInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FulfillmentTrackingInfo_url(ctx context.Context, field graphql.CollectedField, obj *model.FulfillmentTrackingInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FulfillmentTrackingInfo_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FulfillmentTrackingInfo_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FulfillmentTrackingInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GenericFile_alt(ctx context.Context, field graphql.CollectedField, obj *model.GenericFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GenericFile_alt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GenericFile_alt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GenericFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GenericFile_id(ctx context.Context, field graphql.CollectedField, obj *model.GenericFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GenericFile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GenericFile_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GenericFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GenericFile_mimeType(ctx context.Context, field graphql.CollectedField, obj *model.GenericFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GenericFile_mimeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GenericFile_mimeType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GenericFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GenericFile_originalFileSize(ctx context.Context, field graphql.CollectedField, obj *model.GenericFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GenericFile_originalFileSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalFileSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GenericFile_originalFileSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GenericFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GenericFile_previewImage(ctx context.Context, field graphql.CollectedField, obj *model.GenericFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GenericFile_previewImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GenericFile_previewImage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GenericFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GenericFile_url(ctx context.Context, field graphql.CollectedField, obj *model.GenericFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GenericFile_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GenericFile_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GenericFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_altText(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_altText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AltText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_altText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_height(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_height(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_id(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_originalSrc(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_originalSrc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalSrc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_originalSrc(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_src(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_src(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Src, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_src(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_thumbhash(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_thumbhash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbhash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_thumbhash(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_transformedSrc(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_transformedSrc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransformedSrc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_transformedSrc(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Image_transformedSrc_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Image_url(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Image_url_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Image_width(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_width(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ImageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ImageEdge)
	fc.Result = res
	return ec.marshalNImageEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ImageEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ImageEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.ImageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Image)
	fc.Result = res
	return ec.marshalNImage2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ImageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ImageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ImageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalNImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InContextAnnotation_description(ctx context.Context, field graphql.CollectedField, obj *model.InContextAnnotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InContextAnnotation_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InContextAnnotation_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InContextAnnotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InContextAnnotation_type(ctx context.Context, field graphql.CollectedField, obj *model.InContextAnnotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InContextAnnotation_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InContextAnnotationType)
	fc.Result = res
	return ec.marshalNInContextAnnotationType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐInContextAnnotationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InContextAnnotation_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InContextAnnotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext_InContextAnnotationType_kind(ctx, field)
			case "name":
				return ec.fieldContext_InContextAnnotationType_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InContextAnnotationType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InContextAnnotationType_kind(ctx context.Context, field graphql.CollectedField, obj *model.InContextAnnotationType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InContextAnnotationType_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InContextAnnotationType_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InContextAnnotationType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InContextAnnotationType_name(ctx context.Context, field graphql.CollectedField, obj *model.InContextAnnotationType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InContextAnnotationType_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InContextAnnotationType_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InContextAnnotationType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Language_endonymName(ctx context.Context, field graphql.CollectedField, obj *model.Language) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Language_endonymName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndonymName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Language_endonymName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Language",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Language_isoCode(ctx context.Context, field graphql.CollectedField, obj *model.Language) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Language_isoCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsoCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.LanguageCode)
	fc.Result = res
	return ec.marshalNLanguageCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguageCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Language_isoCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Language",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LanguageCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Language_name(ctx context.Context, field graphql.CollectedField, obj *model.Language) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Language_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Language_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Language",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Localization_availableCountries(ctx context.Context, field graphql.CollectedField, obj *model.Localization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Localization_availableCountries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableCountries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Country)
	fc.Result = res
	return ec.marshalNCountry2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Localization_availableCountries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Localization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableLanguages":
				return ec.fieldContext_Country_availableLanguages(ctx, field)
			case "currency":
				return ec.fieldContext_Country_currency(ctx, field)
			case "defaultLanguage":
				return ec.fieldContext_Country_defaultLanguage(ctx, field)
			case "isoCode":
				return ec.fieldContext_Country_isoCode(ctx, field)
			case "market":
				return ec.fieldContext_Country_market(ctx, field)
			case "name":
				return ec.fieldContext_Country_name(ctx, field)
			case "unitSystem":
				return ec.fieldContext_Country_unitSystem(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Country", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Localization_availableLanguages(ctx context.Context, field graphql.CollectedField, obj *model.Localization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Localization_availableLanguages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableLanguages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Language)
	fc.Result = res
	return ec.marshalNLanguage2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Localization_availableLanguages(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Localization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endonymName":
				return ec.fieldContext_Language_endonymName(ctx, field)
			case "isoCode":
				return ec.fieldContext_Language_isoCode(ctx, field)
			case "name":
				return ec.fieldContext_Language_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Language", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Localization_country(ctx context.Context, field graphql.CollectedField, obj *model.Localization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Localization_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Country)
	fc.Result = res
	return ec.marshalNCountry2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Localization_country(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Localization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableLanguages":
				return ec.fieldContext_Country_availableLanguages(ctx, field)
			case "currency":
				return ec.fieldContext_Country_currency(ctx, field)
			case "defaultLanguage":
				return ec.fieldContext_Country_defaultLanguage(ctx, field)
			case "isoCode":
				return ec.fieldContext_Country_isoCode(ctx, field)
			case "market":
				return ec.fieldContext_Country_market(ctx, field)
			case "name":
				return ec.fieldContext_Country_name(ctx, field)
			case "unitSystem":
				return ec.fieldContext_Country_unitSystem(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Country", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Localization_language(ctx context.Context, field graphql.CollectedField, obj *model.Localization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Localization_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Language)
	fc.Result = res
	return ec.marshalNLanguage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Localization_language(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Localization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endonymName":
				return ec.fieldContext_Language_endonymName(ctx, field)
			case "isoCode":
				return ec.fieldContext_Language_isoCode(ctx, field)
			case "name":
				return ec.fieldContext_Language_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Language", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Localization_market(ctx context.Context, field graphql.CollectedField, obj *model.Localization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Localization_market(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Market, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Market)
	fc.Result = res
	return ec.marshalNMarket2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMarket(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Localization_market(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Localization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "handle":
				return ec.fieldContext_Market_handle(ctx, field)
			case "id":
				return ec.fieldContext_Market_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Market_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Market_metafields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Market", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_address(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LocationAddress)
	fc.Result = res
	return ec.marshalNLocationAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_LocationAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_LocationAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_LocationAddress_city(ctx, field)
			case "country":
				return ec.fieldContext_LocationAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_LocationAddress_countryCode(ctx, field)
			case "formatted":
				return ec.fieldContext_LocationAddress_formatted(ctx, field)
			case "latitude":
				return ec.fieldContext_LocationAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_LocationAddress_longitude(ctx, field)
			case "phone":
				return ec.fieldContext_LocationAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_LocationAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_LocationAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_LocationAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LocationAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_id(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Location_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Location_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Location_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Location_name(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_address1(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_address1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_address1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_address2(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_address2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_address2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_city(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_country(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_country(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_countryCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_formatted(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_formatted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formatted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_formatted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_latitude(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_latitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_latitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_longitude(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_longitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_longitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_phone(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_province(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_province(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Province, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_province(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_provinceCode(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_provinceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_provinceCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationAddress_zip(ctx context.Context, field graphql.CollectedField, obj *model.LocationAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationAddress_zip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationAddress_zip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.LocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.LocationEdge)
	fc.Result = res
	return ec.marshalNLocationEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_LocationEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_LocationEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LocationEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.LocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Location_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Location_metafields(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.LocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.LocationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocationEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.LocationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocationEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocationEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Location_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Location_metafields(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_address1(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_address1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_address1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_address2(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_address2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_address2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_city(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_company(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_country(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_country(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_countryCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_countryCodeV2(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCodeV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountryCode)
	fc.Result = res
	return ec.marshalOCountryCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_countryCodeV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CountryCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_firstName(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_formatted(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_formatted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formatted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_formatted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MailingAddress_formatted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_formattedArea(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_formattedArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormattedArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_formattedArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_id(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_lastName(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_latitude(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_latitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_latitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_longitude(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_longitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_longitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_name(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_phone(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_province(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_province(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Province, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_province(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_provinceCode(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_provinceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_provinceCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddress_zip(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddress_zip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddress_zip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddressConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddressConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddressConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MailingAddressEdge)
	fc.Result = res
	return ec.marshalNMailingAddressEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddressConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddressConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_MailingAddressEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_MailingAddressEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddressEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddressConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddressConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddressConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MailingAddress)
	fc.Result = res
	return ec.marshalNMailingAddress2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddressConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddressConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_MailingAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_MailingAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_MailingAddress_city(ctx, field)
			case "company":
				return ec.fieldContext_MailingAddress_company(ctx, field)
			case "country":
				return ec.fieldContext_MailingAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_MailingAddress_countryCode(ctx, field)
			case "countryCodeV2":
				return ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
			case "firstName":
				return ec.fieldContext_MailingAddress_firstName(ctx, field)
			case "formatted":
				return ec.fieldContext_MailingAddress_formatted(ctx, field)
			case "formattedArea":
				return ec.fieldContext_MailingAddress_formattedArea(ctx, field)
			case "id":
				return ec.fieldContext_MailingAddress_id(ctx, field)
			case "lastName":
				return ec.fieldContext_MailingAddress_lastName(ctx, field)
			case "latitude":
				return ec.fieldContext_MailingAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_MailingAddress_longitude(ctx, field)
			case "name":
				return ec.fieldContext_MailingAddress_name(ctx, field)
			case "phone":
				return ec.fieldContext_MailingAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_MailingAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_MailingAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_MailingAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddressConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddressConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddressConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddressConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddressConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddressEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddressEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddressEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddressEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddressEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MailingAddressEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.MailingAddressEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MailingAddressEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MailingAddress)
	fc.Result = res
	return ec.marshalNMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MailingAddressEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MailingAddressEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_MailingAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_MailingAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_MailingAddress_city(ctx, field)
			case "company":
				return ec.fieldContext_MailingAddress_company(ctx, field)
			case "country":
				return ec.fieldContext_MailingAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_MailingAddress_countryCode(ctx, field)
			case "countryCodeV2":
				return ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
			case "firstName":
				return ec.fieldContext_MailingAddress_firstName(ctx, field)
			case "formatted":
				return ec.fieldContext_MailingAddress_formatted(ctx, field)
			case "formattedArea":
				return ec.fieldContext_MailingAddress_formattedArea(ctx, field)
			case "id":
				return ec.fieldContext_MailingAddress_id(ctx, field)
			case "lastName":
				return ec.fieldContext_MailingAddress_lastName(ctx, field)
			case "latitude":
				return ec.fieldContext_MailingAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_MailingAddress_longitude(ctx, field)
			case "name":
				return ec.fieldContext_MailingAddress_name(ctx, field)
			case "phone":
				return ec.fieldContext_MailingAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_MailingAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_MailingAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_MailingAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManualDiscountApplication_allocationMethod(ctx context.Context, field graphql.CollectedField, obj *model.ManualDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManualDiscountApplication_allocationMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllocationMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationAllocationMethod)
	fc.Result = res
	return ec.marshalNDiscountApplicationAllocationMethod2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationAllocationMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManualDiscountApplication_allocationMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManualDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationAllocationMethod does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManualDiscountApplication_description(ctx context.Context, field graphql.CollectedField, obj *model.ManualDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManualDiscountApplication_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManualDiscountApplication_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManualDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManualDiscountApplication_targetSelection(ctx context.Context, field graphql.CollectedField, obj *model.ManualDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManualDiscountApplication_targetSelection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetSelection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetSelection)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetSelection2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManualDiscountApplication_targetSelection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManualDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetSelection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManualDiscountApplication_targetType(ctx context.Context, field graphql.CollectedField, obj *model.ManualDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManualDiscountApplication_targetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetType)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManualDiscountApplication_targetType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManualDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManualDiscountApplication_title(ctx context.Context, field graphql.CollectedField, obj *model.ManualDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManualDiscountApplication_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManualDiscountApplication_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManualDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManualDiscountApplication_value(ctx context.Context, field graphql.CollectedField, obj *model.ManualDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManualDiscountApplication_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PricingValue)
	fc.Result = res
	return ec.marshalNPricingValue2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPricingValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManualDiscountApplication_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManualDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PricingValue does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Market_handle(ctx context.Context, field graphql.CollectedField, obj *model.Market) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Market_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Market_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Market",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Market_id(ctx context.Context, field graphql.CollectedField, obj *model.Market) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Market_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Market_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Market",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Market_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Market) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Market_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Market_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Market",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Market_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Market_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Market) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Market_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Market_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Market",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Market_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _MediaConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.MediaConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MediaEdge)
	fc.Result = res
	return ec.marshalNMediaEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_MediaEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_MediaEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.MediaConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Media)
	fc.Result = res
	return ec.marshalNMedia2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.MediaConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.MediaEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.MediaEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Media)
	fc.Result = res
	return ec.marshalNMedia2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaImage_alt(ctx context.Context, field graphql.CollectedField, obj *model.MediaImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaImage_alt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaImage_alt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaImage_id(ctx context.Context, field graphql.CollectedField, obj *model.MediaImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaImage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaImage_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaImage_image(ctx context.Context, field graphql.CollectedField, obj *model.MediaImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaImage_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaImage_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaImage_mediaContentType(ctx context.Context, field graphql.CollectedField, obj *model.MediaImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaImage_mediaContentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MediaContentType)
	fc.Result = res
	return ec.marshalNMediaContentType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaContentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaImage_mediaContentType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MediaContentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaImage_presentation(ctx context.Context, field graphql.CollectedField, obj *model.MediaImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaImage_presentation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Presentation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MediaPresentation)
	fc.Result = res
	return ec.marshalOMediaPresentation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaPresentation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaImage_presentation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "asJson":
				return ec.fieldContext_MediaPresentation_asJson(ctx, field)
			case "id":
				return ec.fieldContext_MediaPresentation_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaPresentation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaImage_previewImage(ctx context.Context, field graphql.CollectedField, obj *model.MediaImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaImage_previewImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaImage_previewImage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaPresentation_asJson(ctx context.Context, field graphql.CollectedField, obj *model.MediaPresentation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaPresentation_asJson(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AsJSON, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaPresentation_asJson(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaPresentation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JSON does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MediaPresentation_asJson_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _MediaPresentation_id(ctx context.Context, field graphql.CollectedField, obj *model.MediaPresentation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaPresentation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaPresentation_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaPresentation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_handle(ctx context.Context, field graphql.CollectedField, obj *model.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_id(ctx context.Context, field graphql.CollectedField, obj *model.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_items(ctx context.Context, field graphql.CollectedField, obj *model.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MenuItem)
	fc.Result = res
	return ec.marshalNMenuItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenuItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MenuItem_id(ctx, field)
			case "items":
				return ec.fieldContext_MenuItem_items(ctx, field)
			case "resource":
				return ec.fieldContext_MenuItem_resource(ctx, field)
			case "resourceId":
				return ec.fieldContext_MenuItem_resourceId(ctx, field)
			case "tags":
				return ec.fieldContext_MenuItem_tags(ctx, field)
			case "title":
				return ec.fieldContext_MenuItem_title(ctx, field)
			case "type":
				return ec.fieldContext_MenuItem_type(ctx, field)
			case "url":
				return ec.fieldContext_MenuItem_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MenuItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_itemsCount(ctx context.Context, field graphql.CollectedField, obj *model.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_itemsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_itemsCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_title(ctx context.Context, field graphql.CollectedField, obj *model.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MenuItem_id(ctx context.Context, field graphql.CollectedField, obj *model.MenuItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MenuItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MenuItem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MenuItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MenuItem_items(ctx context.Context, field graphql.CollectedField, obj *model.MenuItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MenuItem_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MenuItem)
	fc.Result = res
	return ec.marshalNMenuItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenuItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MenuItem_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MenuItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MenuItem_id(ctx, field)
			case "items":
				return ec.fieldContext_MenuItem_items(ctx, field)
			case "resource":
				return ec.fieldContext_MenuItem_resource(ctx, field)
			case "resourceId":
				return ec.fieldContext_MenuItem_resourceId(ctx, field)
			case "tags":
				return ec.fieldContext_MenuItem_tags(ctx, field)
			case "title":
				return ec.fieldContext_MenuItem_title(ctx, field)
			case "type":
				return ec.fieldContext_MenuItem_type(ctx, field)
			case "url":
				return ec.fieldContext_MenuItem_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MenuItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MenuItem_resource(ctx context.Context, field graphql.CollectedField, obj *model.MenuItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MenuItem_resource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.MenuItemResource)
	fc.Result = res
	return ec.marshalOMenuItemResource2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenuItemResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MenuItem_resource(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MenuItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MenuItemResource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MenuItem_resourceId(ctx context.Context, field graphql.CollectedField, obj *model.MenuItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MenuItem_resourceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MenuItem_resourceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MenuItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MenuItem_tags(ctx context.Context, field graphql.CollectedField, obj *model.MenuItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MenuItem_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MenuItem_tags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MenuItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MenuItem_title(ctx context.Context, field graphql.CollectedField, obj *model.MenuItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MenuItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MenuItem_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MenuItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MenuItem_type(ctx context.Context, field graphql.CollectedField, obj *model.MenuItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MenuItem_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MenuItemType)
	fc.Result = res
	return ec.marshalNMenuItemType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenuItemType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MenuItem_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MenuItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MenuItemType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MenuItem_url(ctx context.Context, field graphql.CollectedField, obj *model.MenuItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MenuItem_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MenuItem_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MenuItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_description(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_id(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_key(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_namespace(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_namespace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Namespace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_namespace(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_parentResource(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_parentResource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentResource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MetafieldParentResource)
	fc.Result = res
	return ec.marshalNMetafieldParentResource2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldParentResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_parentResource(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MetafieldParentResource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_reference(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.MetafieldReference)
	fc.Result = res
	return ec.marshalOMetafieldReference2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_reference(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MetafieldReference does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_references(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_references(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.References, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetafieldReferenceConnection)
	fc.Result = res
	return ec.marshalOMetafieldReferenceConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReferenceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_references(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MetafieldReferenceConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_MetafieldReferenceConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MetafieldReferenceConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetafieldReferenceConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Metafield_references_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_type(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metafield_value(ctx context.Context, field graphql.CollectedField, obj *model.Metafield) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metafield_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metafield_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metafield",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldDeleteUserError_code(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldDeleteUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldDeleteUserError_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetafieldDeleteErrorCode)
	fc.Result = res
	return ec.marshalOMetafieldDeleteErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldDeleteErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldDeleteUserError_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldDeleteUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MetafieldDeleteErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldDeleteUserError_field(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldDeleteUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldDeleteUserError_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldDeleteUserError_field(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldDeleteUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldDeleteUserError_message(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldDeleteUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldDeleteUserError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldDeleteUserError_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldDeleteUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldReferenceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldReferenceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldReferenceConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MetafieldReferenceEdge)
	fc.Result = res
	return ec.marshalNMetafieldReferenceEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReferenceEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldReferenceConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldReferenceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_MetafieldReferenceEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_MetafieldReferenceEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetafieldReferenceEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldReferenceConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldReferenceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldReferenceConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.MetafieldReference)
	fc.Result = res
	return ec.marshalNMetafieldReference2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReferenceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldReferenceConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldReferenceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MetafieldReference does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldReferenceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldReferenceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldReferenceConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldReferenceConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldReferenceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldReferenceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldReferenceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldReferenceEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldReferenceEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldReferenceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldReferenceEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldReferenceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldReferenceEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MetafieldReference)
	fc.Result = res
	return ec.marshalNMetafieldReference2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldReferenceEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldReferenceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MetafieldReference does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldsSetUserError_code(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldsSetUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldsSetUserError_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetafieldsSetUserErrorCode)
	fc.Result = res
	return ec.marshalOMetafieldsSetUserErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldsSetUserErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldsSetUserError_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldsSetUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MetafieldsSetUserErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldsSetUserError_elementIndex(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldsSetUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldsSetUserError_elementIndex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElementIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldsSetUserError_elementIndex(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldsSetUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldsSetUserError_field(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldsSetUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldsSetUserError_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldsSetUserError_field(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldsSetUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetafieldsSetUserError_message(ctx context.Context, field graphql.CollectedField, obj *model.MetafieldsSetUserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetafieldsSetUserError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetafieldsSetUserError_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetafieldsSetUserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metaobject_field(ctx context.Context, field graphql.CollectedField, obj *model.Metaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metaobject_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetaobjectField)
	fc.Result = res
	return ec.marshalOMetaobjectField2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectField(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metaobject_field(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_MetaobjectField_key(ctx, field)
			case "reference":
				return ec.fieldContext_MetaobjectField_reference(ctx, field)
			case "references":
				return ec.fieldContext_MetaobjectField_references(ctx, field)
			case "type":
				return ec.fieldContext_MetaobjectField_type(ctx, field)
			case "value":
				return ec.fieldContext_MetaobjectField_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetaobjectField", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Metaobject_field_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Metaobject_fields(ctx context.Context, field graphql.CollectedField, obj *model.Metaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metaobject_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MetaobjectField)
	fc.Result = res
	return ec.marshalNMetaobjectField2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metaobject_fields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_MetaobjectField_key(ctx, field)
			case "reference":
				return ec.fieldContext_MetaobjectField_reference(ctx, field)
			case "references":
				return ec.fieldContext_MetaobjectField_references(ctx, field)
			case "type":
				return ec.fieldContext_MetaobjectField_type(ctx, field)
			case "value":
				return ec.fieldContext_MetaobjectField_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetaobjectField", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metaobject_handle(ctx context.Context, field graphql.CollectedField, obj *model.Metaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metaobject_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metaobject_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metaobject_id(ctx context.Context, field graphql.CollectedField, obj *model.Metaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metaobject_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metaobject_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metaobject_onlineStoreUrl(ctx context.Context, field graphql.CollectedField, obj *model.Metaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metaobject_onlineStoreUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnlineStoreURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metaobject_onlineStoreUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metaobject_seo(ctx context.Context, field graphql.CollectedField, obj *model.Metaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metaobject_seo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetaobjectSeo)
	fc.Result = res
	return ec.marshalOMetaobjectSEO2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectSeo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metaobject_seo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_MetaobjectSEO_description(ctx, field)
			case "title":
				return ec.fieldContext_MetaobjectSEO_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetaobjectSEO", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metaobject_type(ctx context.Context, field graphql.CollectedField, obj *model.Metaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metaobject_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metaobject_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metaobject_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Metaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metaobject_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metaobject_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MetaobjectEdge)
	fc.Result = res
	return ec.marshalNMetaobjectEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_MetaobjectEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_MetaobjectEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetaobjectEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metaobject)
	fc.Result = res
	return ec.marshalNMetaobject2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_Metaobject_field(ctx, field)
			case "fields":
				return ec.fieldContext_Metaobject_fields(ctx, field)
			case "handle":
				return ec.fieldContext_Metaobject_handle(ctx, field)
			case "id":
				return ec.fieldContext_Metaobject_id(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Metaobject_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Metaobject_seo(ctx, field)
			case "type":
				return ec.fieldContext_Metaobject_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metaobject_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metaobject", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Metaobject)
	fc.Result = res
	return ec.marshalNMetaobject2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_Metaobject_field(ctx, field)
			case "fields":
				return ec.fieldContext_Metaobject_fields(ctx, field)
			case "handle":
				return ec.fieldContext_Metaobject_handle(ctx, field)
			case "id":
				return ec.fieldContext_Metaobject_id(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Metaobject_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Metaobject_seo(ctx, field)
			case "type":
				return ec.fieldContext_Metaobject_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metaobject_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metaobject", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectField_key(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectField_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectField_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectField_reference(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectField_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.MetafieldReference)
	fc.Result = res
	return ec.marshalOMetafieldReference2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectField_reference(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MetafieldReference does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectField_references(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectField_references(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.References, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetafieldReferenceConnection)
	fc.Result = res
	return ec.marshalOMetafieldReferenceConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReferenceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectField_references(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MetafieldReferenceConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_MetafieldReferenceConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MetafieldReferenceConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetafieldReferenceConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MetaobjectField_references_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectField_type(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectField_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectField_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectField_value(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectField_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectField_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectSEO_description(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectSeo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectSEO_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetaobjectField)
	fc.Result = res
	return ec.marshalOMetaobjectField2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectField(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectSEO_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectSEO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_MetaobjectField_key(ctx, field)
			case "reference":
				return ec.fieldContext_MetaobjectField_reference(ctx, field)
			case "references":
				return ec.fieldContext_MetaobjectField_references(ctx, field)
			case "type":
				return ec.fieldContext_MetaobjectField_type(ctx, field)
			case "value":
				return ec.fieldContext_MetaobjectField_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetaobjectField", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetaobjectSEO_title(ctx context.Context, field graphql.CollectedField, obj *model.MetaobjectSeo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetaobjectSEO_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetaobjectField)
	fc.Result = res
	return ec.marshalOMetaobjectField2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectField(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetaobjectSEO_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetaobjectSEO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_MetaobjectField_key(ctx, field)
			case "reference":
				return ec.fieldContext_MetaobjectField_reference(ctx, field)
			case "references":
				return ec.fieldContext_MetaobjectField_references(ctx, field)
			case "type":
				return ec.fieldContext_MetaobjectField_type(ctx, field)
			case "value":
				return ec.fieldContext_MetaobjectField_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetaobjectField", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Model3d_alt(ctx context.Context, field graphql.CollectedField, obj *model.Model3d) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Model3d_alt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Model3d_alt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Model3d",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Model3d_id(ctx context.Context, field graphql.CollectedField, obj *model.Model3d) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Model3d_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Model3d_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Model3d",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Model3d_mediaContentType(ctx context.Context, field graphql.CollectedField, obj *model.Model3d) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Model3d_mediaContentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MediaContentType)
	fc.Result = res
	return ec.marshalNMediaContentType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaContentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Model3d_mediaContentType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Model3d",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MediaContentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Model3d_presentation(ctx context.Context, field graphql.CollectedField, obj *model.Model3d) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Model3d_presentation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Presentation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MediaPresentation)
	fc.Result = res
	return ec.marshalOMediaPresentation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaPresentation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Model3d_presentation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Model3d",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "asJson":
				return ec.fieldContext_MediaPresentation_asJson(ctx, field)
			case "id":
				return ec.fieldContext_MediaPresentation_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaPresentation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Model3d_previewImage(ctx context.Context, field graphql.CollectedField, obj *model.Model3d) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Model3d_previewImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Model3d_previewImage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Model3d",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Model3d_sources(ctx context.Context, field graphql.CollectedField, obj *model.Model3d) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Model3d_sources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Model3dSource)
	fc.Result = res
	return ec.marshalNModel3dSource2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐModel3dSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Model3d_sources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Model3d",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "filesize":
				return ec.fieldContext_Model3dSource_filesize(ctx, field)
			case "format":
				return ec.fieldContext_Model3dSource_format(ctx, field)
			case "mimeType":
				return ec.fieldContext_Model3dSource_mimeType(ctx, field)
			case "url":
				return ec.fieldContext_Model3dSource_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Model3dSource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Model3dSource_filesize(ctx context.Context, field graphql.CollectedField, obj *model.Model3dSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Model3dSource_filesize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filesize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Model3dSource_filesize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Model3dSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Model3dSource_format(ctx context.Context, field graphql.CollectedField, obj *model.Model3dSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Model3dSource_format(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Format, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Model3dSource_format(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Model3dSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Model3dSource_mimeType(ctx context.Context, field graphql.CollectedField, obj *model.Model3dSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Model3dSource_mimeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Model3dSource_mimeType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Model3dSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Model3dSource_url(ctx context.Context, field graphql.CollectedField, obj *model.Model3dSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Model3dSource_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Model3dSource_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Model3dSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyV2_amount(ctx context.Context, field graphql.CollectedField, obj *model.MoneyV2) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyV2_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDecimal2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyV2_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyV2",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyV2_currencyCode(ctx context.Context, field graphql.CollectedField, obj *model.MoneyV2) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyV2_currencyCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CurrencyCode)
	fc.Result = res
	return ec.marshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyV2_currencyCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyV2",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CurrencyCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartAttributesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartAttributesUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartAttributesUpdate(rctx, fc.Args["attributes"].([]*model.AttributeInput), fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartAttributesUpdatePayload)
	fc.Result = res
	return ec.marshalOCartAttributesUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartAttributesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartAttributesUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartAttributesUpdatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartAttributesUpdatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartAttributesUpdatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartAttributesUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartAttributesUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartBillingAddressUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartBillingAddressUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartBillingAddressUpdate(rctx, fc.Args["billingAddress"].(*model.MailingAddressInput), fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartBillingAddressUpdatePayload)
	fc.Result = res
	return ec.marshalOCartBillingAddressUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartBillingAddressUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartBillingAddressUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartBillingAddressUpdatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartBillingAddressUpdatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartBillingAddressUpdatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartBillingAddressUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartBillingAddressUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartBuyerIdentityUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartBuyerIdentityUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartBuyerIdentityUpdate(rctx, fc.Args["buyerIdentity"].(model.CartBuyerIdentityInput), fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartBuyerIdentityUpdatePayload)
	fc.Result = res
	return ec.marshalOCartBuyerIdentityUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartBuyerIdentityUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartBuyerIdentityUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartBuyerIdentityUpdatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartBuyerIdentityUpdatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartBuyerIdentityUpdatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartBuyerIdentityUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartBuyerIdentityUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartCreate(rctx, fc.Args["input"].(*model.CartInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartCreatePayload)
	fc.Result = res
	return ec.marshalOCartCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCreatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartCreatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartCreatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartCreatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartCreatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartDeliveryAddressesAdd(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartDeliveryAddressesAdd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartDeliveryAddressesAdd(rctx, fc.Args["addresses"].([]*model.CartSelectableAddressInput), fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartDeliveryAddressesAddPayload)
	fc.Result = res
	return ec.marshalOCartDeliveryAddressesAddPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryAddressesAddPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartDeliveryAddressesAdd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartDeliveryAddressesAddPayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartDeliveryAddressesAddPayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartDeliveryAddressesAddPayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryAddressesAddPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartDeliveryAddressesAdd_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartDeliveryAddressesRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartDeliveryAddressesRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartDeliveryAddressesRemove(rctx, fc.Args["addressIds"].([]string), fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartDeliveryAddressesRemovePayload)
	fc.Result = res
	return ec.marshalOCartDeliveryAddressesRemovePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryAddressesRemovePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartDeliveryAddressesRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartDeliveryAddressesRemovePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartDeliveryAddressesRemovePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartDeliveryAddressesRemovePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryAddressesRemovePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartDeliveryAddressesRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartDeliveryAddressesReplace(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartDeliveryAddressesReplace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartDeliveryAddressesReplace(rctx, fc.Args["addresses"].([]*model.CartSelectableAddressInput), fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartDeliveryAddressesReplacePayload)
	fc.Result = res
	return ec.marshalOCartDeliveryAddressesReplacePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryAddressesReplacePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartDeliveryAddressesReplace(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartDeliveryAddressesReplacePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartDeliveryAddressesReplacePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartDeliveryAddressesReplacePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryAddressesReplacePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartDeliveryAddressesReplace_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartDeliveryAddressesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartDeliveryAddressesUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartDeliveryAddressesUpdate(rctx, fc.Args["addresses"].([]*model.CartSelectableAddressUpdateInput), fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartDeliveryAddressesUpdatePayload)
	fc.Result = res
	return ec.marshalOCartDeliveryAddressesUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryAddressesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartDeliveryAddressesUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartDeliveryAddressesUpdatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartDeliveryAddressesUpdatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartDeliveryAddressesUpdatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDeliveryAddressesUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartDeliveryAddressesUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartDiscountCodesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartDiscountCodesUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartDiscountCodesUpdate(rctx, fc.Args["cartId"].(string), fc.Args["discountCodes"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartDiscountCodesUpdatePayload)
	fc.Result = res
	return ec.marshalOCartDiscountCodesUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountCodesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartDiscountCodesUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartDiscountCodesUpdatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartDiscountCodesUpdatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartDiscountCodesUpdatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDiscountCodesUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartDiscountCodesUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartGiftCardCodesRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartGiftCardCodesRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartGiftCardCodesRemove(rctx, fc.Args["appliedGiftCardIds"].([]string), fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartGiftCardCodesRemovePayload)
	fc.Result = res
	return ec.marshalOCartGiftCardCodesRemovePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartGiftCardCodesRemovePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartGiftCardCodesRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartGiftCardCodesRemovePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartGiftCardCodesRemovePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartGiftCardCodesRemovePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartGiftCardCodesRemovePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartGiftCardCodesRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartGiftCardCodesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartGiftCardCodesUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartGiftCardCodesUpdate(rctx, fc.Args["cartId"].(string), fc.Args["giftCardCodes"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartGiftCardCodesUpdatePayload)
	fc.Result = res
	return ec.marshalOCartGiftCardCodesUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartGiftCardCodesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartGiftCardCodesUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartGiftCardCodesUpdatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartGiftCardCodesUpdatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartGiftCardCodesUpdatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartGiftCardCodesUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartGiftCardCodesUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartLinesAdd(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartLinesAdd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartLinesAdd(rctx, fc.Args["cartId"].(string), fc.Args["lines"].([]*model.CartLineInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartLinesAddPayload)
	fc.Result = res
	return ec.marshalOCartLinesAddPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLinesAddPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartLinesAdd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartLinesAddPayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartLinesAddPayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartLinesAddPayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartLinesAddPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartLinesAdd_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartLinesRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartLinesRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartLinesRemove(rctx, fc.Args["cartId"].(string), fc.Args["lineIds"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartLinesRemovePayload)
	fc.Result = res
	return ec.marshalOCartLinesRemovePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLinesRemovePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartLinesRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartLinesRemovePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartLinesRemovePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartLinesRemovePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartLinesRemovePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartLinesRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartLinesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartLinesUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartLinesUpdate(rctx, fc.Args["cartId"].(string), fc.Args["lines"].([]*model.CartLineUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartLinesUpdatePayload)
	fc.Result = res
	return ec.marshalOCartLinesUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLinesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartLinesUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartLinesUpdatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartLinesUpdatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartLinesUpdatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartLinesUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartLinesUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartMetafieldDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartMetafieldDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartMetafieldDelete(rctx, fc.Args["input"].(model.CartMetafieldDeleteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartMetafieldDeletePayload)
	fc.Result = res
	return ec.marshalOCartMetafieldDeletePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartMetafieldDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartMetafieldDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deletedId":
				return ec.fieldContext_CartMetafieldDeletePayload_deletedId(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartMetafieldDeletePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartMetafieldDeletePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartMetafieldDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartMetafieldsSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartMetafieldsSet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartMetafieldsSet(rctx, fc.Args["metafields"].([]*model.CartMetafieldsSetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartMetafieldsSetPayload)
	fc.Result = res
	return ec.marshalOCartMetafieldsSetPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartMetafieldsSetPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartMetafieldsSet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metafields":
				return ec.fieldContext_CartMetafieldsSetPayload_metafields(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartMetafieldsSetPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartMetafieldsSetPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartMetafieldsSet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartNoteUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartNoteUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartNoteUpdate(rctx, fc.Args["cartId"].(string), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartNoteUpdatePayload)
	fc.Result = res
	return ec.marshalOCartNoteUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartNoteUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartNoteUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartNoteUpdatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartNoteUpdatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartNoteUpdatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartNoteUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartNoteUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartPaymentUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartPaymentUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartPaymentUpdate(rctx, fc.Args["cartId"].(string), fc.Args["payment"].(model.CartPaymentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartPaymentUpdatePayload)
	fc.Result = res
	return ec.marshalOCartPaymentUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPaymentUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartPaymentUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartPaymentUpdatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartPaymentUpdatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartPaymentUpdatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartPaymentUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartPaymentUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartPrepareForCompletion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartPrepareForCompletion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartPrepareForCompletion(rctx, fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartPrepareForCompletionPayload)
	fc.Result = res
	return ec.marshalOCartPrepareForCompletionPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPrepareForCompletionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartPrepareForCompletion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_CartPrepareForCompletionPayload_result(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartPrepareForCompletionPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartPrepareForCompletionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartPrepareForCompletion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartRemovePersonalData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartRemovePersonalData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartRemovePersonalData(rctx, fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartRemovePersonalDataPayload)
	fc.Result = res
	return ec.marshalOCartRemovePersonalDataPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartRemovePersonalDataPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartRemovePersonalData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartRemovePersonalDataPayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartRemovePersonalDataPayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartRemovePersonalDataPayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartRemovePersonalDataPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartRemovePersonalData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartSelectedDeliveryOptionsUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartSelectedDeliveryOptionsUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartSelectedDeliveryOptionsUpdate(rctx, fc.Args["cartId"].(string), fc.Args["selectedDeliveryOptions"].([]*model.CartSelectedDeliveryOptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartSelectedDeliveryOptionsUpdatePayload)
	fc.Result = res
	return ec.marshalOCartSelectedDeliveryOptionsUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectedDeliveryOptionsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartSelectedDeliveryOptionsUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_CartSelectedDeliveryOptionsUpdatePayload_cart(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartSelectedDeliveryOptionsUpdatePayload_userErrors(ctx, field)
			case "warnings":
				return ec.fieldContext_CartSelectedDeliveryOptionsUpdatePayload_warnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartSelectedDeliveryOptionsUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartSelectedDeliveryOptionsUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartSubmitForCompletion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartSubmitForCompletion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartSubmitForCompletion(rctx, fc.Args["attemptToken"].(string), fc.Args["cartId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CartSubmitForCompletionPayload)
	fc.Result = res
	return ec.marshalOCartSubmitForCompletionPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSubmitForCompletionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartSubmitForCompletion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_CartSubmitForCompletionPayload_result(ctx, field)
			case "userErrors":
				return ec.fieldContext_CartSubmitForCompletionPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartSubmitForCompletionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartSubmitForCompletion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutAttributesUpdateV2(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutAttributesUpdateV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutAttributesUpdateV2(rctx, fc.Args["checkoutId"].(string), fc.Args["input"].(model.CheckoutAttributesUpdateV2Input))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutAttributesUpdateV2Payload)
	fc.Result = res
	return ec.marshalOCheckoutAttributesUpdateV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutAttributesUpdateV2Payload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutAttributesUpdateV2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutAttributesUpdateV2Payload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutAttributesUpdateV2Payload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutAttributesUpdateV2Payload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutAttributesUpdateV2Payload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutAttributesUpdateV2_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutCompleteFree(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutCompleteFree(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutCompleteFree(rctx, fc.Args["checkoutId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutCompleteFreePayload)
	fc.Result = res
	return ec.marshalOCheckoutCompleteFreePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCompleteFreePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutCompleteFree(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutCompleteFreePayload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutCompleteFreePayload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutCompleteFreePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutCompleteFreePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutCompleteFree_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutCompleteWithCreditCardV2(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutCompleteWithCreditCardV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutCompleteWithCreditCardV2(rctx, fc.Args["checkoutId"].(string), fc.Args["payment"].(model.CreditCardPaymentInputV2))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutCompleteWithCreditCardV2Payload)
	fc.Result = res
	return ec.marshalOCheckoutCompleteWithCreditCardV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCompleteWithCreditCardV2Payload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutCompleteWithCreditCardV2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutCompleteWithCreditCardV2Payload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutCompleteWithCreditCardV2Payload_checkoutUserErrors(ctx, field)
			case "payment":
				return ec.fieldContext_CheckoutCompleteWithCreditCardV2Payload_payment(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutCompleteWithCreditCardV2Payload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutCompleteWithCreditCardV2Payload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutCompleteWithCreditCardV2_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutCompleteWithTokenizedPaymentV3(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutCompleteWithTokenizedPaymentV3(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutCompleteWithTokenizedPaymentV3(rctx, fc.Args["checkoutId"].(string), fc.Args["payment"].(model.TokenizedPaymentInputV3))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutCompleteWithTokenizedPaymentV3Payload)
	fc.Result = res
	return ec.marshalOCheckoutCompleteWithTokenizedPaymentV3Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCompleteWithTokenizedPaymentV3Payload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutCompleteWithTokenizedPaymentV3(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_checkoutUserErrors(ctx, field)
			case "payment":
				return ec.fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_payment(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutCompleteWithTokenizedPaymentV3Payload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutCompleteWithTokenizedPaymentV3Payload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutCompleteWithTokenizedPaymentV3_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutCreate(rctx, fc.Args["input"].(model.CheckoutCreateInput), fc.Args["queueToken"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutCreatePayload)
	fc.Result = res
	return ec.marshalOCheckoutCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCreatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutCreatePayload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutCreatePayload_checkoutUserErrors(ctx, field)
			case "queueToken":
				return ec.fieldContext_CheckoutCreatePayload_queueToken(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutCreatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutCreatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutCustomerAssociateV2(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutCustomerAssociateV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutCustomerAssociateV2(rctx, fc.Args["checkoutId"].(string), fc.Args["customerAccessToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutCustomerAssociateV2Payload)
	fc.Result = res
	return ec.marshalOCheckoutCustomerAssociateV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCustomerAssociateV2Payload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutCustomerAssociateV2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutCustomerAssociateV2Payload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutCustomerAssociateV2Payload_checkoutUserErrors(ctx, field)
			case "customer":
				return ec.fieldContext_CheckoutCustomerAssociateV2Payload_customer(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutCustomerAssociateV2Payload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutCustomerAssociateV2Payload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutCustomerAssociateV2_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutCustomerDisassociateV2(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutCustomerDisassociateV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutCustomerDisassociateV2(rctx, fc.Args["checkoutId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutCustomerDisassociateV2Payload)
	fc.Result = res
	return ec.marshalOCheckoutCustomerDisassociateV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCustomerDisassociateV2Payload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutCustomerDisassociateV2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutCustomerDisassociateV2Payload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutCustomerDisassociateV2Payload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutCustomerDisassociateV2Payload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutCustomerDisassociateV2Payload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutCustomerDisassociateV2_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutDiscountCodeApplyV2(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutDiscountCodeApplyV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutDiscountCodeApplyV2(rctx, fc.Args["checkoutId"].(string), fc.Args["discountCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutDiscountCodeApplyV2Payload)
	fc.Result = res
	return ec.marshalOCheckoutDiscountCodeApplyV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutDiscountCodeApplyV2Payload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutDiscountCodeApplyV2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutDiscountCodeApplyV2Payload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutDiscountCodeApplyV2Payload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutDiscountCodeApplyV2Payload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutDiscountCodeApplyV2Payload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutDiscountCodeApplyV2_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutDiscountCodeRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutDiscountCodeRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutDiscountCodeRemove(rctx, fc.Args["checkoutId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutDiscountCodeRemovePayload)
	fc.Result = res
	return ec.marshalOCheckoutDiscountCodeRemovePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutDiscountCodeRemovePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutDiscountCodeRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutDiscountCodeRemovePayload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutDiscountCodeRemovePayload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutDiscountCodeRemovePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutDiscountCodeRemovePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutDiscountCodeRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutEmailUpdateV2(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutEmailUpdateV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutEmailUpdateV2(rctx, fc.Args["checkoutId"].(string), fc.Args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutEmailUpdateV2Payload)
	fc.Result = res
	return ec.marshalOCheckoutEmailUpdateV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutEmailUpdateV2Payload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutEmailUpdateV2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutEmailUpdateV2Payload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutEmailUpdateV2Payload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutEmailUpdateV2Payload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutEmailUpdateV2Payload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutEmailUpdateV2_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutGiftCardRemoveV2(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutGiftCardRemoveV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutGiftCardRemoveV2(rctx, fc.Args["appliedGiftCardId"].(string), fc.Args["checkoutId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutGiftCardRemoveV2Payload)
	fc.Result = res
	return ec.marshalOCheckoutGiftCardRemoveV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutGiftCardRemoveV2Payload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutGiftCardRemoveV2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutGiftCardRemoveV2Payload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutGiftCardRemoveV2Payload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutGiftCardRemoveV2Payload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutGiftCardRemoveV2Payload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutGiftCardRemoveV2_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutGiftCardsAppend(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutGiftCardsAppend(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutGiftCardsAppend(rctx, fc.Args["checkoutId"].(string), fc.Args["giftCardCodes"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutGiftCardsAppendPayload)
	fc.Result = res
	return ec.marshalOCheckoutGiftCardsAppendPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutGiftCardsAppendPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutGiftCardsAppend(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutGiftCardsAppendPayload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutGiftCardsAppendPayload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutGiftCardsAppendPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutGiftCardsAppendPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutGiftCardsAppend_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutLineItemsAdd(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutLineItemsAdd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutLineItemsAdd(rctx, fc.Args["checkoutId"].(string), fc.Args["lineItems"].([]*model.CheckoutLineItemInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutLineItemsAddPayload)
	fc.Result = res
	return ec.marshalOCheckoutLineItemsAddPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemsAddPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutLineItemsAdd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutLineItemsAddPayload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutLineItemsAddPayload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutLineItemsAddPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutLineItemsAddPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutLineItemsAdd_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutLineItemsRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutLineItemsRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutLineItemsRemove(rctx, fc.Args["checkoutId"].(string), fc.Args["lineItemIds"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutLineItemsRemovePayload)
	fc.Result = res
	return ec.marshalOCheckoutLineItemsRemovePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemsRemovePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutLineItemsRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutLineItemsRemovePayload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutLineItemsRemovePayload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutLineItemsRemovePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutLineItemsRemovePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutLineItemsRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutLineItemsReplace(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutLineItemsReplace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutLineItemsReplace(rctx, fc.Args["checkoutId"].(string), fc.Args["lineItems"].([]*model.CheckoutLineItemInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutLineItemsReplacePayload)
	fc.Result = res
	return ec.marshalOCheckoutLineItemsReplacePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemsReplacePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutLineItemsReplace(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutLineItemsReplacePayload_checkout(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutLineItemsReplacePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutLineItemsReplacePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutLineItemsReplace_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutLineItemsUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutLineItemsUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutLineItemsUpdate(rctx, fc.Args["checkoutId"].(string), fc.Args["lineItems"].([]*model.CheckoutLineItemUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutLineItemsUpdatePayload)
	fc.Result = res
	return ec.marshalOCheckoutLineItemsUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutLineItemsUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutLineItemsUpdatePayload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutLineItemsUpdatePayload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutLineItemsUpdatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutLineItemsUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutLineItemsUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutShippingAddressUpdateV2(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutShippingAddressUpdateV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutShippingAddressUpdateV2(rctx, fc.Args["checkoutId"].(string), fc.Args["shippingAddress"].(model.MailingAddressInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutShippingAddressUpdateV2Payload)
	fc.Result = res
	return ec.marshalOCheckoutShippingAddressUpdateV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutShippingAddressUpdateV2Payload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutShippingAddressUpdateV2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutShippingAddressUpdateV2Payload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutShippingAddressUpdateV2Payload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutShippingAddressUpdateV2Payload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutShippingAddressUpdateV2Payload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutShippingAddressUpdateV2_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_checkoutShippingLineUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_checkoutShippingLineUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckoutShippingLineUpdate(rctx, fc.Args["checkoutId"].(string), fc.Args["shippingRateHandle"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckoutShippingLineUpdatePayload)
	fc.Result = res
	return ec.marshalOCheckoutShippingLineUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutShippingLineUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_checkoutShippingLineUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkout":
				return ec.fieldContext_CheckoutShippingLineUpdatePayload_checkout(ctx, field)
			case "checkoutUserErrors":
				return ec.fieldContext_CheckoutShippingLineUpdatePayload_checkoutUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CheckoutShippingLineUpdatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckoutShippingLineUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_checkoutShippingLineUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerAccessTokenCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerAccessTokenCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerAccessTokenCreate(rctx, fc.Args["input"].(model.CustomerAccessTokenCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessTokenCreatePayload)
	fc.Result = res
	return ec.marshalOCustomerAccessTokenCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessTokenCreatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerAccessTokenCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customerAccessToken":
				return ec.fieldContext_CustomerAccessTokenCreatePayload_customerAccessToken(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerAccessTokenCreatePayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerAccessTokenCreatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessTokenCreatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerAccessTokenCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerAccessTokenCreateWithMultipass(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerAccessTokenCreateWithMultipass(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerAccessTokenCreateWithMultipass(rctx, fc.Args["multipassToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessTokenCreateWithMultipassPayload)
	fc.Result = res
	return ec.marshalOCustomerAccessTokenCreateWithMultipassPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessTokenCreateWithMultipassPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerAccessTokenCreateWithMultipass(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customerAccessToken":
				return ec.fieldContext_CustomerAccessTokenCreateWithMultipassPayload_customerAccessToken(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerAccessTokenCreateWithMultipassPayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerAccessTokenCreateWithMultipassPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessTokenCreateWithMultipassPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerAccessTokenCreateWithMultipass_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerAccessTokenDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerAccessTokenDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerAccessTokenDelete(rctx, fc.Args["customerAccessToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessTokenDeletePayload)
	fc.Result = res
	return ec.marshalOCustomerAccessTokenDeletePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessTokenDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerAccessTokenDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deletedAccessToken":
				return ec.fieldContext_CustomerAccessTokenDeletePayload_deletedAccessToken(ctx, field)
			case "deletedCustomerAccessTokenId":
				return ec.fieldContext_CustomerAccessTokenDeletePayload_deletedCustomerAccessTokenId(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerAccessTokenDeletePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessTokenDeletePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerAccessTokenDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerAccessTokenRenew(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerAccessTokenRenew(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerAccessTokenRenew(rctx, fc.Args["customerAccessToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAccessTokenRenewPayload)
	fc.Result = res
	return ec.marshalOCustomerAccessTokenRenewPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessTokenRenewPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerAccessTokenRenew(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customerAccessToken":
				return ec.fieldContext_CustomerAccessTokenRenewPayload_customerAccessToken(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerAccessTokenRenewPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAccessTokenRenewPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerAccessTokenRenew_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerActivate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerActivate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerActivate(rctx, fc.Args["id"].(string), fc.Args["input"].(model.CustomerActivateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerActivatePayload)
	fc.Result = res
	return ec.marshalOCustomerActivatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerActivatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerActivate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customer":
				return ec.fieldContext_CustomerActivatePayload_customer(ctx, field)
			case "customerAccessToken":
				return ec.fieldContext_CustomerActivatePayload_customerAccessToken(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerActivatePayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerActivatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerActivatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerActivate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerActivateByUrl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerActivateByUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerActivateByURL(rctx, fc.Args["activationUrl"].(string), fc.Args["password"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerActivateByURLPayload)
	fc.Result = res
	return ec.marshalOCustomerActivateByUrlPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerActivateByURLPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerActivateByUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customer":
				return ec.fieldContext_CustomerActivateByUrlPayload_customer(ctx, field)
			case "customerAccessToken":
				return ec.fieldContext_CustomerActivateByUrlPayload_customerAccessToken(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerActivateByUrlPayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerActivateByUrlPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerActivateByUrlPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerActivateByUrl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerAddressCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerAddressCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerAddressCreate(rctx, fc.Args["address"].(model.MailingAddressInput), fc.Args["customerAccessToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAddressCreatePayload)
	fc.Result = res
	return ec.marshalOCustomerAddressCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAddressCreatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerAddressCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customerAddress":
				return ec.fieldContext_CustomerAddressCreatePayload_customerAddress(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerAddressCreatePayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerAddressCreatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAddressCreatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerAddressCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerAddressDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerAddressDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerAddressDelete(rctx, fc.Args["customerAccessToken"].(string), fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAddressDeletePayload)
	fc.Result = res
	return ec.marshalOCustomerAddressDeletePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAddressDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerAddressDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customerUserErrors":
				return ec.fieldContext_CustomerAddressDeletePayload_customerUserErrors(ctx, field)
			case "deletedCustomerAddressId":
				return ec.fieldContext_CustomerAddressDeletePayload_deletedCustomerAddressId(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerAddressDeletePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAddressDeletePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerAddressDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerAddressUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerAddressUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerAddressUpdate(rctx, fc.Args["address"].(model.MailingAddressInput), fc.Args["customerAccessToken"].(string), fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerAddressUpdatePayload)
	fc.Result = res
	return ec.marshalOCustomerAddressUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAddressUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerAddressUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customerAddress":
				return ec.fieldContext_CustomerAddressUpdatePayload_customerAddress(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerAddressUpdatePayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerAddressUpdatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerAddressUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerAddressUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerCreate(rctx, fc.Args["input"].(model.CustomerCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerCreatePayload)
	fc.Result = res
	return ec.marshalOCustomerCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerCreatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customer":
				return ec.fieldContext_CustomerCreatePayload_customer(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerCreatePayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerCreatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerCreatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerDefaultAddressUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerDefaultAddressUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerDefaultAddressUpdate(rctx, fc.Args["addressId"].(string), fc.Args["customerAccessToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerDefaultAddressUpdatePayload)
	fc.Result = res
	return ec.marshalOCustomerDefaultAddressUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerDefaultAddressUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerDefaultAddressUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customer":
				return ec.fieldContext_CustomerDefaultAddressUpdatePayload_customer(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerDefaultAddressUpdatePayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerDefaultAddressUpdatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerDefaultAddressUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerDefaultAddressUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerRecover(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerRecover(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerRecover(rctx, fc.Args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerRecoverPayload)
	fc.Result = res
	return ec.marshalOCustomerRecoverPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerRecoverPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerRecover(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customerUserErrors":
				return ec.fieldContext_CustomerRecoverPayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerRecoverPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerRecoverPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerRecover_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerReset(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerReset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerReset(rctx, fc.Args["id"].(string), fc.Args["input"].(model.CustomerResetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerResetPayload)
	fc.Result = res
	return ec.marshalOCustomerResetPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerResetPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerReset(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customer":
				return ec.fieldContext_CustomerResetPayload_customer(ctx, field)
			case "customerAccessToken":
				return ec.fieldContext_CustomerResetPayload_customerAccessToken(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerResetPayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerResetPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerResetPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerReset_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerResetByUrl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerResetByUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerResetByURL(rctx, fc.Args["password"].(string), fc.Args["resetUrl"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerResetByURLPayload)
	fc.Result = res
	return ec.marshalOCustomerResetByUrlPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerResetByURLPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerResetByUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customer":
				return ec.fieldContext_CustomerResetByUrlPayload_customer(ctx, field)
			case "customerAccessToken":
				return ec.fieldContext_CustomerResetByUrlPayload_customerAccessToken(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerResetByUrlPayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerResetByUrlPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerResetByUrlPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerResetByUrl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customerUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customerUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerUpdate(rctx, fc.Args["customer"].(model.CustomerUpdateInput), fc.Args["customerAccessToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerUpdatePayload)
	fc.Result = res
	return ec.marshalOCustomerUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customerUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customer":
				return ec.fieldContext_CustomerUpdatePayload_customer(ctx, field)
			case "customerAccessToken":
				return ec.fieldContext_CustomerUpdatePayload_customerAccessToken(ctx, field)
			case "customerUserErrors":
				return ec.fieldContext_CustomerUpdatePayload_customerUserErrors(ctx, field)
			case "userErrors":
				return ec.fieldContext_CustomerUpdatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUpdatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customerUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_shopPayPaymentRequestSessionCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_shopPayPaymentRequestSessionCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ShopPayPaymentRequestSessionCreate(rctx, fc.Args["paymentRequest"].(model.ShopPayPaymentRequestInput), fc.Args["sourceIdentifier"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayPaymentRequestSessionCreatePayload)
	fc.Result = res
	return ec.marshalOShopPayPaymentRequestSessionCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestSessionCreatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_shopPayPaymentRequestSessionCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "shopPayPaymentRequestSession":
				return ec.fieldContext_ShopPayPaymentRequestSessionCreatePayload_shopPayPaymentRequestSession(ctx, field)
			case "userErrors":
				return ec.fieldContext_ShopPayPaymentRequestSessionCreatePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestSessionCreatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_shopPayPaymentRequestSessionCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_shopPayPaymentRequestSessionSubmit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_shopPayPaymentRequestSessionSubmit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ShopPayPaymentRequestSessionSubmit(rctx, fc.Args["idempotencyKey"].(string), fc.Args["orderName"].(*string), fc.Args["paymentRequest"].(model.ShopPayPaymentRequestInput), fc.Args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayPaymentRequestSessionSubmitPayload)
	fc.Result = res
	return ec.marshalOShopPayPaymentRequestSessionSubmitPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestSessionSubmitPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_shopPayPaymentRequestSessionSubmit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paymentRequestReceipt":
				return ec.fieldContext_ShopPayPaymentRequestSessionSubmitPayload_paymentRequestReceipt(ctx, field)
			case "userErrors":
				return ec.fieldContext_ShopPayPaymentRequestSessionSubmitPayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestSessionSubmitPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_shopPayPaymentRequestSessionSubmit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Order_billingAddress(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_billingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MailingAddress)
	fc.Result = res
	return ec.marshalOMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_billingAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_MailingAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_MailingAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_MailingAddress_city(ctx, field)
			case "company":
				return ec.fieldContext_MailingAddress_company(ctx, field)
			case "country":
				return ec.fieldContext_MailingAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_MailingAddress_countryCode(ctx, field)
			case "countryCodeV2":
				return ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
			case "firstName":
				return ec.fieldContext_MailingAddress_firstName(ctx, field)
			case "formatted":
				return ec.fieldContext_MailingAddress_formatted(ctx, field)
			case "formattedArea":
				return ec.fieldContext_MailingAddress_formattedArea(ctx, field)
			case "id":
				return ec.fieldContext_MailingAddress_id(ctx, field)
			case "lastName":
				return ec.fieldContext_MailingAddress_lastName(ctx, field)
			case "latitude":
				return ec.fieldContext_MailingAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_MailingAddress_longitude(ctx, field)
			case "name":
				return ec.fieldContext_MailingAddress_name(ctx, field)
			case "phone":
				return ec.fieldContext_MailingAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_MailingAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_MailingAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_MailingAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_cancelReason(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_cancelReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CancelReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrderCancelReason)
	fc.Result = res
	return ec.marshalOOrderCancelReason2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderCancelReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_cancelReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OrderCancelReason does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_canceledAt(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_canceledAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanceledAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_canceledAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_currencyCode(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_currencyCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CurrencyCode)
	fc.Result = res
	return ec.marshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_currencyCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CurrencyCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_currentSubtotalPrice(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_currentSubtotalPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentSubtotalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_currentSubtotalPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_currentTotalDuties(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_currentTotalDuties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentTotalDuties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_currentTotalDuties(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_currentTotalPrice(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_currentTotalPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentTotalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_currentTotalPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_currentTotalShippingPrice(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_currentTotalShippingPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentTotalShippingPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_currentTotalShippingPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_currentTotalTax(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_currentTotalTax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentTotalTax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_currentTotalTax(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_customAttributes(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_customAttributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attribute)
	fc.Result = res
	return ec.marshalNAttribute2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_customAttributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Attribute_key(ctx, field)
			case "value":
				return ec.fieldContext_Attribute_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_customerLocale(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_customerLocale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerLocale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_customerLocale(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_customerUrl(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_customerUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_customerUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_discountApplications(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_discountApplications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountApplications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DiscountApplicationConnection)
	fc.Result = res
	return ec.marshalNDiscountApplicationConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_discountApplications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_DiscountApplicationConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_DiscountApplicationConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DiscountApplicationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscountApplicationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Order_discountApplications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Order_edited(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_edited(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edited, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_edited(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_email(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_financialStatus(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_financialStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinancialStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrderFinancialStatus)
	fc.Result = res
	return ec.marshalOOrderFinancialStatus2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderFinancialStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_financialStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OrderFinancialStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_fulfillmentStatus(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_fulfillmentStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FulfillmentStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.OrderFulfillmentStatus)
	fc.Result = res
	return ec.marshalNOrderFulfillmentStatus2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderFulfillmentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_fulfillmentStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OrderFulfillmentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_id(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_lineItems(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_lineItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrderLineItemConnection)
	fc.Result = res
	return ec.marshalNOrderLineItemConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItemConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_lineItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OrderLineItemConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_OrderLineItemConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OrderLineItemConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderLineItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Order_lineItems_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Order_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Order_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Order_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Order_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Order_name(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_orderNumber(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_orderNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_orderNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_originalTotalDuties(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_originalTotalDuties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalTotalDuties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_originalTotalDuties(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_originalTotalPrice(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_originalTotalPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalTotalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_originalTotalPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_phone(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_processedAt(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_processedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_processedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_shippingAddress(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_shippingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MailingAddress)
	fc.Result = res
	return ec.marshalOMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_shippingAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_MailingAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_MailingAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_MailingAddress_city(ctx, field)
			case "company":
				return ec.fieldContext_MailingAddress_company(ctx, field)
			case "country":
				return ec.fieldContext_MailingAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_MailingAddress_countryCode(ctx, field)
			case "countryCodeV2":
				return ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
			case "firstName":
				return ec.fieldContext_MailingAddress_firstName(ctx, field)
			case "formatted":
				return ec.fieldContext_MailingAddress_formatted(ctx, field)
			case "formattedArea":
				return ec.fieldContext_MailingAddress_formattedArea(ctx, field)
			case "id":
				return ec.fieldContext_MailingAddress_id(ctx, field)
			case "lastName":
				return ec.fieldContext_MailingAddress_lastName(ctx, field)
			case "latitude":
				return ec.fieldContext_MailingAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_MailingAddress_longitude(ctx, field)
			case "name":
				return ec.fieldContext_MailingAddress_name(ctx, field)
			case "phone":
				return ec.fieldContext_MailingAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_MailingAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_MailingAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_MailingAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_shippingDiscountAllocations(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_shippingDiscountAllocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingDiscountAllocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DiscountAllocation)
	fc.Result = res
	return ec.marshalNDiscountAllocation2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountAllocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_shippingDiscountAllocations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "allocatedAmount":
				return ec.fieldContext_DiscountAllocation_allocatedAmount(ctx, field)
			case "discountApplication":
				return ec.fieldContext_DiscountAllocation_discountApplication(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscountAllocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_statusUrl(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_statusUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_statusUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_subtotalPrice(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_subtotalPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtotalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_subtotalPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_subtotalPriceV2(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_subtotalPriceV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtotalPriceV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_subtotalPriceV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_successfulFulfillments(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_successfulFulfillments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuccessfulFulfillments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Fulfillment)
	fc.Result = res
	return ec.marshalOFulfillment2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_successfulFulfillments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fulfillmentLineItems":
				return ec.fieldContext_Fulfillment_fulfillmentLineItems(ctx, field)
			case "trackingCompany":
				return ec.fieldContext_Fulfillment_trackingCompany(ctx, field)
			case "trackingInfo":
				return ec.fieldContext_Fulfillment_trackingInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Fulfillment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Order_successfulFulfillments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Order_totalPrice(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_totalPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_totalPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_totalPriceV2(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_totalPriceV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPriceV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_totalPriceV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_totalRefunded(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_totalRefunded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalRefunded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_totalRefunded(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_totalRefundedV2(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_totalRefundedV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalRefundedV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_totalRefundedV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_totalShippingPrice(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_totalShippingPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalShippingPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_totalShippingPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_totalShippingPriceV2(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_totalShippingPriceV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalShippingPriceV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_totalShippingPriceV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_totalTax(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_totalTax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_totalTax(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_totalTaxV2(ctx context.Context, field graphql.CollectedField, obj *model.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_totalTaxV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTaxV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_totalTaxV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.OrderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OrderEdge)
	fc.Result = res
	return ec.marshalNOrderEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_OrderEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_OrderEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.OrderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Order)
	fc.Result = res
	return ec.marshalNOrder2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "billingAddress":
				return ec.fieldContext_Order_billingAddress(ctx, field)
			case "cancelReason":
				return ec.fieldContext_Order_cancelReason(ctx, field)
			case "canceledAt":
				return ec.fieldContext_Order_canceledAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Order_currencyCode(ctx, field)
			case "currentSubtotalPrice":
				return ec.fieldContext_Order_currentSubtotalPrice(ctx, field)
			case "currentTotalDuties":
				return ec.fieldContext_Order_currentTotalDuties(ctx, field)
			case "currentTotalPrice":
				return ec.fieldContext_Order_currentTotalPrice(ctx, field)
			case "currentTotalShippingPrice":
				return ec.fieldContext_Order_currentTotalShippingPrice(ctx, field)
			case "currentTotalTax":
				return ec.fieldContext_Order_currentTotalTax(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Order_customAttributes(ctx, field)
			case "customerLocale":
				return ec.fieldContext_Order_customerLocale(ctx, field)
			case "customerUrl":
				return ec.fieldContext_Order_customerUrl(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Order_discountApplications(ctx, field)
			case "edited":
				return ec.fieldContext_Order_edited(ctx, field)
			case "email":
				return ec.fieldContext_Order_email(ctx, field)
			case "financialStatus":
				return ec.fieldContext_Order_financialStatus(ctx, field)
			case "fulfillmentStatus":
				return ec.fieldContext_Order_fulfillmentStatus(ctx, field)
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Order_lineItems(ctx, field)
			case "metafield":
				return ec.fieldContext_Order_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Order_metafields(ctx, field)
			case "name":
				return ec.fieldContext_Order_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Order_orderNumber(ctx, field)
			case "originalTotalDuties":
				return ec.fieldContext_Order_originalTotalDuties(ctx, field)
			case "originalTotalPrice":
				return ec.fieldContext_Order_originalTotalPrice(ctx, field)
			case "phone":
				return ec.fieldContext_Order_phone(ctx, field)
			case "processedAt":
				return ec.fieldContext_Order_processedAt(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Order_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Order_shippingDiscountAllocations(ctx, field)
			case "statusUrl":
				return ec.fieldContext_Order_statusUrl(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Order_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Order_subtotalPriceV2(ctx, field)
			case "successfulFulfillments":
				return ec.fieldContext_Order_successfulFulfillments(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Order_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Order_totalPriceV2(ctx, field)
			case "totalRefunded":
				return ec.fieldContext_Order_totalRefunded(ctx, field)
			case "totalRefundedV2":
				return ec.fieldContext_Order_totalRefundedV2(ctx, field)
			case "totalShippingPrice":
				return ec.fieldContext_Order_totalShippingPrice(ctx, field)
			case "totalShippingPriceV2":
				return ec.fieldContext_Order_totalShippingPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Order_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Order_totalTaxV2(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.OrderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.OrderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNUnsignedInt642string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UnsignedInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.OrderEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.OrderEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Order)
	fc.Result = res
	return ec.marshalNOrder2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "billingAddress":
				return ec.fieldContext_Order_billingAddress(ctx, field)
			case "cancelReason":
				return ec.fieldContext_Order_cancelReason(ctx, field)
			case "canceledAt":
				return ec.fieldContext_Order_canceledAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Order_currencyCode(ctx, field)
			case "currentSubtotalPrice":
				return ec.fieldContext_Order_currentSubtotalPrice(ctx, field)
			case "currentTotalDuties":
				return ec.fieldContext_Order_currentTotalDuties(ctx, field)
			case "currentTotalPrice":
				return ec.fieldContext_Order_currentTotalPrice(ctx, field)
			case "currentTotalShippingPrice":
				return ec.fieldContext_Order_currentTotalShippingPrice(ctx, field)
			case "currentTotalTax":
				return ec.fieldContext_Order_currentTotalTax(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Order_customAttributes(ctx, field)
			case "customerLocale":
				return ec.fieldContext_Order_customerLocale(ctx, field)
			case "customerUrl":
				return ec.fieldContext_Order_customerUrl(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Order_discountApplications(ctx, field)
			case "edited":
				return ec.fieldContext_Order_edited(ctx, field)
			case "email":
				return ec.fieldContext_Order_email(ctx, field)
			case "financialStatus":
				return ec.fieldContext_Order_financialStatus(ctx, field)
			case "fulfillmentStatus":
				return ec.fieldContext_Order_fulfillmentStatus(ctx, field)
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Order_lineItems(ctx, field)
			case "metafield":
				return ec.fieldContext_Order_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Order_metafields(ctx, field)
			case "name":
				return ec.fieldContext_Order_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Order_orderNumber(ctx, field)
			case "originalTotalDuties":
				return ec.fieldContext_Order_originalTotalDuties(ctx, field)
			case "originalTotalPrice":
				return ec.fieldContext_Order_originalTotalPrice(ctx, field)
			case "phone":
				return ec.fieldContext_Order_phone(ctx, field)
			case "processedAt":
				return ec.fieldContext_Order_processedAt(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Order_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Order_shippingDiscountAllocations(ctx, field)
			case "statusUrl":
				return ec.fieldContext_Order_statusUrl(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Order_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Order_subtotalPriceV2(ctx, field)
			case "successfulFulfillments":
				return ec.fieldContext_Order_successfulFulfillments(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Order_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Order_totalPriceV2(ctx, field)
			case "totalRefunded":
				return ec.fieldContext_Order_totalRefunded(ctx, field)
			case "totalRefundedV2":
				return ec.fieldContext_Order_totalRefundedV2(ctx, field)
			case "totalShippingPrice":
				return ec.fieldContext_Order_totalShippingPrice(ctx, field)
			case "totalShippingPriceV2":
				return ec.fieldContext_Order_totalShippingPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Order_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Order_totalTaxV2(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItem_currentQuantity(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItem_currentQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItem_currentQuantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItem_customAttributes(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItem_customAttributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attribute)
	fc.Result = res
	return ec.marshalNAttribute2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItem_customAttributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Attribute_key(ctx, field)
			case "value":
				return ec.fieldContext_Attribute_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItem_discountAllocations(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItem_discountAllocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountAllocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DiscountAllocation)
	fc.Result = res
	return ec.marshalNDiscountAllocation2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountAllocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItem_discountAllocations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "allocatedAmount":
				return ec.fieldContext_DiscountAllocation_allocatedAmount(ctx, field)
			case "discountApplication":
				return ec.fieldContext_DiscountAllocation_discountApplication(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscountAllocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItem_discountedTotalPrice(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItem_discountedTotalPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountedTotalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItem_discountedTotalPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItem_originalTotalPrice(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItem_originalTotalPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalTotalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItem_originalTotalPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItem_quantity(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItem_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItem_quantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItem_title(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItem_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItem_variant(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItem_variant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariant)
	fc.Result = res
	return ec.marshalOProductVariant2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItem_variant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableForSale":
				return ec.fieldContext_ProductVariant_availableForSale(ctx, field)
			case "barcode":
				return ec.fieldContext_ProductVariant_barcode(ctx, field)
			case "compareAtPrice":
				return ec.fieldContext_ProductVariant_compareAtPrice(ctx, field)
			case "compareAtPriceV2":
				return ec.fieldContext_ProductVariant_compareAtPriceV2(ctx, field)
			case "components":
				return ec.fieldContext_ProductVariant_components(ctx, field)
			case "currentlyNotInStock":
				return ec.fieldContext_ProductVariant_currentlyNotInStock(ctx, field)
			case "groupedBy":
				return ec.fieldContext_ProductVariant_groupedBy(ctx, field)
			case "id":
				return ec.fieldContext_ProductVariant_id(ctx, field)
			case "image":
				return ec.fieldContext_ProductVariant_image(ctx, field)
			case "metafield":
				return ec.fieldContext_ProductVariant_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_ProductVariant_metafields(ctx, field)
			case "price":
				return ec.fieldContext_ProductVariant_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ProductVariant_priceV2(ctx, field)
			case "product":
				return ec.fieldContext_ProductVariant_product(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_ProductVariant_quantityAvailable(ctx, field)
			case "quantityPriceBreaks":
				return ec.fieldContext_ProductVariant_quantityPriceBreaks(ctx, field)
			case "quantityRule":
				return ec.fieldContext_ProductVariant_quantityRule(ctx, field)
			case "requiresComponents":
				return ec.fieldContext_ProductVariant_requiresComponents(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_ProductVariant_requiresShipping(ctx, field)
			case "selectedOptions":
				return ec.fieldContext_ProductVariant_selectedOptions(ctx, field)
			case "sellingPlanAllocations":
				return ec.fieldContext_ProductVariant_sellingPlanAllocations(ctx, field)
			case "shopPayInstallmentsPricing":
				return ec.fieldContext_ProductVariant_shopPayInstallmentsPricing(ctx, field)
			case "sku":
				return ec.fieldContext_ProductVariant_sku(ctx, field)
			case "storeAvailability":
				return ec.fieldContext_ProductVariant_storeAvailability(ctx, field)
			case "taxable":
				return ec.fieldContext_ProductVariant_taxable(ctx, field)
			case "title":
				return ec.fieldContext_ProductVariant_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_ProductVariant_unitPrice(ctx, field)
			case "unitPriceMeasurement":
				return ec.fieldContext_ProductVariant_unitPriceMeasurement(ctx, field)
			case "weight":
				return ec.fieldContext_ProductVariant_weight(ctx, field)
			case "weightUnit":
				return ec.fieldContext_ProductVariant_weightUnit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItemConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItemConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OrderLineItemEdge)
	fc.Result = res
	return ec.marshalNOrderLineItemEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItemEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItemConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_OrderLineItemEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_OrderLineItemEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderLineItemEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItemConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItemConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OrderLineItem)
	fc.Result = res
	return ec.marshalNOrderLineItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItemConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currentQuantity":
				return ec.fieldContext_OrderLineItem_currentQuantity(ctx, field)
			case "customAttributes":
				return ec.fieldContext_OrderLineItem_customAttributes(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_OrderLineItem_discountAllocations(ctx, field)
			case "discountedTotalPrice":
				return ec.fieldContext_OrderLineItem_discountedTotalPrice(ctx, field)
			case "originalTotalPrice":
				return ec.fieldContext_OrderLineItem_originalTotalPrice(ctx, field)
			case "quantity":
				return ec.fieldContext_OrderLineItem_quantity(ctx, field)
			case "title":
				return ec.fieldContext_OrderLineItem_title(ctx, field)
			case "variant":
				return ec.fieldContext_OrderLineItem_variant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItemConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItemConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItemEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItemEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItemEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderLineItemEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.OrderLineItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderLineItemEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrderLineItem)
	fc.Result = res
	return ec.marshalNOrderLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderLineItemEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderLineItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currentQuantity":
				return ec.fieldContext_OrderLineItem_currentQuantity(ctx, field)
			case "customAttributes":
				return ec.fieldContext_OrderLineItem_customAttributes(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_OrderLineItem_discountAllocations(ctx, field)
			case "discountedTotalPrice":
				return ec.fieldContext_OrderLineItem_discountedTotalPrice(ctx, field)
			case "originalTotalPrice":
				return ec.fieldContext_OrderLineItem_originalTotalPrice(ctx, field)
			case "quantity":
				return ec.fieldContext_OrderLineItem_quantity(ctx, field)
			case "title":
				return ec.fieldContext_OrderLineItem_title(ctx, field)
			case "variant":
				return ec.fieldContext_OrderLineItem_variant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_body(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_body(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNHTML2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_body(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_bodySummary(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_bodySummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BodySummary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_bodySummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_handle(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_id(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Page_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Page_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Page_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Page_onlineStoreUrl(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_onlineStoreUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnlineStoreURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_onlineStoreUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_seo(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_seo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Seo)
	fc.Result = res
	return ec.marshalOSEO2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSeo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_seo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_SEO_description(ctx, field)
			case "title":
				return ec.fieldContext_SEO_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SEO", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_title(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_trackingParameters(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_trackingParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrackingParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_trackingParameters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PageEdge)
	fc.Result = res
	return ec.marshalNPageEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_PageEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_PageEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Page)
	fc.Result = res
	return ec.marshalNPage2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "body":
				return ec.fieldContext_Page_body(ctx, field)
			case "bodySummary":
				return ec.fieldContext_Page_bodySummary(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "handle":
				return ec.fieldContext_Page_handle(ctx, field)
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Page_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Page_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Page_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Page_seo(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Page_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.PageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.PageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Page)
	fc.Result = res
	return ec.marshalNPage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "body":
				return ec.fieldContext_Page_body(ctx, field)
			case "bodySummary":
				return ec.fieldContext_Page_bodySummary(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "handle":
				return ec.fieldContext_Page_handle(ctx, field)
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Page_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Page_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Page_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Page_seo(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Page_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedSitemapResources_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedSitemapResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedSitemapResources_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedSitemapResources_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedSitemapResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedSitemapResources_items(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedSitemapResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedSitemapResources_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.SitemapResourceInterface)
	fc.Result = res
	return ec.marshalNSitemapResourceInterface2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemapResourceInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedSitemapResources_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedSitemapResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_amount(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_amountV2(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_amountV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_amountV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_billingAddress(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_billingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MailingAddress)
	fc.Result = res
	return ec.marshalOMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_billingAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_MailingAddress_address1(ctx, field)
			case "address2":
				return ec.fieldContext_MailingAddress_address2(ctx, field)
			case "city":
				return ec.fieldContext_MailingAddress_city(ctx, field)
			case "company":
				return ec.fieldContext_MailingAddress_company(ctx, field)
			case "country":
				return ec.fieldContext_MailingAddress_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_MailingAddress_countryCode(ctx, field)
			case "countryCodeV2":
				return ec.fieldContext_MailingAddress_countryCodeV2(ctx, field)
			case "firstName":
				return ec.fieldContext_MailingAddress_firstName(ctx, field)
			case "formatted":
				return ec.fieldContext_MailingAddress_formatted(ctx, field)
			case "formattedArea":
				return ec.fieldContext_MailingAddress_formattedArea(ctx, field)
			case "id":
				return ec.fieldContext_MailingAddress_id(ctx, field)
			case "lastName":
				return ec.fieldContext_MailingAddress_lastName(ctx, field)
			case "latitude":
				return ec.fieldContext_MailingAddress_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_MailingAddress_longitude(ctx, field)
			case "name":
				return ec.fieldContext_MailingAddress_name(ctx, field)
			case "phone":
				return ec.fieldContext_MailingAddress_phone(ctx, field)
			case "province":
				return ec.fieldContext_MailingAddress_province(ctx, field)
			case "provinceCode":
				return ec.fieldContext_MailingAddress_provinceCode(ctx, field)
			case "zip":
				return ec.fieldContext_MailingAddress_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MailingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_checkout(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_checkout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checkout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Checkout)
	fc.Result = res
	return ec.marshalNCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_checkout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Checkout_appliedGiftCards(ctx, field)
			case "availableShippingRates":
				return ec.fieldContext_Checkout_availableShippingRates(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Checkout_buyerIdentity(ctx, field)
			case "completedAt":
				return ec.fieldContext_Checkout_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Checkout_createdAt(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Checkout_currencyCode(ctx, field)
			case "customAttributes":
				return ec.fieldContext_Checkout_customAttributes(ctx, field)
			case "discountApplications":
				return ec.fieldContext_Checkout_discountApplications(ctx, field)
			case "email":
				return ec.fieldContext_Checkout_email(ctx, field)
			case "id":
				return ec.fieldContext_Checkout_id(ctx, field)
			case "lineItems":
				return ec.fieldContext_Checkout_lineItems(ctx, field)
			case "lineItemsSubtotalPrice":
				return ec.fieldContext_Checkout_lineItemsSubtotalPrice(ctx, field)
			case "note":
				return ec.fieldContext_Checkout_note(ctx, field)
			case "order":
				return ec.fieldContext_Checkout_order(ctx, field)
			case "orderStatusUrl":
				return ec.fieldContext_Checkout_orderStatusUrl(ctx, field)
			case "paymentDue":
				return ec.fieldContext_Checkout_paymentDue(ctx, field)
			case "paymentDueV2":
				return ec.fieldContext_Checkout_paymentDueV2(ctx, field)
			case "ready":
				return ec.fieldContext_Checkout_ready(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_Checkout_requiresShipping(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_Checkout_shippingAddress(ctx, field)
			case "shippingDiscountAllocations":
				return ec.fieldContext_Checkout_shippingDiscountAllocations(ctx, field)
			case "shippingLine":
				return ec.fieldContext_Checkout_shippingLine(ctx, field)
			case "subtotalPrice":
				return ec.fieldContext_Checkout_subtotalPrice(ctx, field)
			case "subtotalPriceV2":
				return ec.fieldContext_Checkout_subtotalPriceV2(ctx, field)
			case "taxExempt":
				return ec.fieldContext_Checkout_taxExempt(ctx, field)
			case "taxesIncluded":
				return ec.fieldContext_Checkout_taxesIncluded(ctx, field)
			case "totalDuties":
				return ec.fieldContext_Checkout_totalDuties(ctx, field)
			case "totalPrice":
				return ec.fieldContext_Checkout_totalPrice(ctx, field)
			case "totalPriceV2":
				return ec.fieldContext_Checkout_totalPriceV2(ctx, field)
			case "totalTax":
				return ec.fieldContext_Checkout_totalTax(ctx, field)
			case "totalTaxV2":
				return ec.fieldContext_Checkout_totalTaxV2(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Checkout_updatedAt(ctx, field)
			case "webUrl":
				return ec.fieldContext_Checkout_webUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Checkout", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_creditCard(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_creditCard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CreditCard)
	fc.Result = res
	return ec.marshalOCreditCard2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCreditCard(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_creditCard(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "brand":
				return ec.fieldContext_CreditCard_brand(ctx, field)
			case "expiryMonth":
				return ec.fieldContext_CreditCard_expiryMonth(ctx, field)
			case "expiryYear":
				return ec.fieldContext_CreditCard_expiryYear(ctx, field)
			case "firstDigits":
				return ec.fieldContext_CreditCard_firstDigits(ctx, field)
			case "firstName":
				return ec.fieldContext_CreditCard_firstName(ctx, field)
			case "lastDigits":
				return ec.fieldContext_CreditCard_lastDigits(ctx, field)
			case "lastName":
				return ec.fieldContext_CreditCard_lastName(ctx, field)
			case "maskedNumber":
				return ec.fieldContext_CreditCard_maskedNumber(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreditCard", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_errorMessage(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_errorMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_errorMessage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_id(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_idempotencyKey(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_idempotencyKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdempotencyKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_idempotencyKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_nextActionUrl(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_nextActionUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextActionURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_nextActionUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_ready(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_ready(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ready, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_ready(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_test(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_test(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Test, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_test(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Payment_transaction(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Payment_transaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Transaction)
	fc.Result = res
	return ec.marshalOTransaction2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Payment_transaction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Transaction_amount(ctx, field)
			case "amountV2":
				return ec.fieldContext_Transaction_amountV2(ctx, field)
			case "kind":
				return ec.fieldContext_Transaction_kind(ctx, field)
			case "status":
				return ec.fieldContext_Transaction_status(ctx, field)
			case "statusV2":
				return ec.fieldContext_Transaction_statusV2(ctx, field)
			case "test":
				return ec.fieldContext_Transaction_test(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transaction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymentSettings_acceptedCardBrands(ctx context.Context, field graphql.CollectedField, obj *model.PaymentSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymentSettings_acceptedCardBrands(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AcceptedCardBrands, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CardBrand)
	fc.Result = res
	return ec.marshalNCardBrand2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCardBrandᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymentSettings_acceptedCardBrands(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymentSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CardBrand does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymentSettings_cardVaultUrl(ctx context.Context, field graphql.CollectedField, obj *model.PaymentSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymentSettings_cardVaultUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardVaultURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymentSettings_cardVaultUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymentSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymentSettings_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.PaymentSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymentSettings_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CountryCode)
	fc.Result = res
	return ec.marshalNCountryCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymentSettings_countryCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymentSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CountryCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymentSettings_currencyCode(ctx context.Context, field graphql.CollectedField, obj *model.PaymentSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymentSettings_currencyCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CurrencyCode)
	fc.Result = res
	return ec.marshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymentSettings_currencyCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymentSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CurrencyCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymentSettings_enabledPresentmentCurrencies(ctx context.Context, field graphql.CollectedField, obj *model.PaymentSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymentSettings_enabledPresentmentCurrencies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnabledPresentmentCurrencies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CurrencyCode)
	fc.Result = res
	return ec.marshalNCurrencyCode2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymentSettings_enabledPresentmentCurrencies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymentSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CurrencyCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymentSettings_shopifyPaymentsAccountId(ctx context.Context, field graphql.CollectedField, obj *model.PaymentSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymentSettings_shopifyPaymentsAccountId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShopifyPaymentsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymentSettings_shopifyPaymentsAccountId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymentSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymentSettings_supportedDigitalWallets(ctx context.Context, field graphql.CollectedField, obj *model.PaymentSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymentSettings_supportedDigitalWallets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportedDigitalWallets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DigitalWallet)
	fc.Result = res
	return ec.marshalNDigitalWallet2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDigitalWalletᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymentSettings_supportedDigitalWallets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymentSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DigitalWallet does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PredictiveSearchResult_articles(ctx context.Context, field graphql.CollectedField, obj *model.PredictiveSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PredictiveSearchResult_articles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Articles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Article)
	fc.Result = res
	return ec.marshalNArticle2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PredictiveSearchResult_articles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PredictiveSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Article_author(ctx, field)
			case "authorV2":
				return ec.fieldContext_Article_authorV2(ctx, field)
			case "blog":
				return ec.fieldContext_Article_blog(ctx, field)
			case "comments":
				return ec.fieldContext_Article_comments(ctx, field)
			case "content":
				return ec.fieldContext_Article_content(ctx, field)
			case "contentHtml":
				return ec.fieldContext_Article_contentHtml(ctx, field)
			case "excerpt":
				return ec.fieldContext_Article_excerpt(ctx, field)
			case "excerptHtml":
				return ec.fieldContext_Article_excerptHtml(ctx, field)
			case "handle":
				return ec.fieldContext_Article_handle(ctx, field)
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "image":
				return ec.fieldContext_Article_image(ctx, field)
			case "metafield":
				return ec.fieldContext_Article_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Article_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Article_onlineStoreUrl(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Article_publishedAt(ctx, field)
			case "seo":
				return ec.fieldContext_Article_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Article_tags(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Article_trackingParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PredictiveSearchResult_collections(ctx context.Context, field graphql.CollectedField, obj *model.PredictiveSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PredictiveSearchResult_collections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Collections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Collection)
	fc.Result = res
	return ec.marshalNCollection2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PredictiveSearchResult_collections(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PredictiveSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_Collection_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Collection_descriptionHtml(ctx, field)
			case "handle":
				return ec.fieldContext_Collection_handle(ctx, field)
			case "id":
				return ec.fieldContext_Collection_id(ctx, field)
			case "image":
				return ec.fieldContext_Collection_image(ctx, field)
			case "metafield":
				return ec.fieldContext_Collection_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Collection_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Collection_onlineStoreUrl(ctx, field)
			case "products":
				return ec.fieldContext_Collection_products(ctx, field)
			case "seo":
				return ec.fieldContext_Collection_seo(ctx, field)
			case "title":
				return ec.fieldContext_Collection_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Collection_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Collection_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Collection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PredictiveSearchResult_pages(ctx context.Context, field graphql.CollectedField, obj *model.PredictiveSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PredictiveSearchResult_pages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Page)
	fc.Result = res
	return ec.marshalNPage2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PredictiveSearchResult_pages(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PredictiveSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "body":
				return ec.fieldContext_Page_body(ctx, field)
			case "bodySummary":
				return ec.fieldContext_Page_bodySummary(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "handle":
				return ec.fieldContext_Page_handle(ctx, field)
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Page_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Page_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Page_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Page_seo(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Page_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PredictiveSearchResult_products(ctx context.Context, field graphql.CollectedField, obj *model.PredictiveSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PredictiveSearchResult_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PredictiveSearchResult_products(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PredictiveSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adjacentVariants":
				return ec.fieldContext_Product_adjacentVariants(ctx, field)
			case "availableForSale":
				return ec.fieldContext_Product_availableForSale(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "collections":
				return ec.fieldContext_Product_collections(ctx, field)
			case "compareAtPriceRange":
				return ec.fieldContext_Product_compareAtPriceRange(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Product_descriptionHtml(ctx, field)
			case "encodedVariantAvailability":
				return ec.fieldContext_Product_encodedVariantAvailability(ctx, field)
			case "encodedVariantExistence":
				return ec.fieldContext_Product_encodedVariantExistence(ctx, field)
			case "featuredImage":
				return ec.fieldContext_Product_featuredImage(ctx, field)
			case "handle":
				return ec.fieldContext_Product_handle(ctx, field)
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "images":
				return ec.fieldContext_Product_images(ctx, field)
			case "isGiftCard":
				return ec.fieldContext_Product_isGiftCard(ctx, field)
			case "media":
				return ec.fieldContext_Product_media(ctx, field)
			case "metafield":
				return ec.fieldContext_Product_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Product_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Product_onlineStoreUrl(ctx, field)
			case "options":
				return ec.fieldContext_Product_options(ctx, field)
			case "priceRange":
				return ec.fieldContext_Product_priceRange(ctx, field)
			case "productType":
				return ec.fieldContext_Product_productType(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Product_publishedAt(ctx, field)
			case "requiresSellingPlan":
				return ec.fieldContext_Product_requiresSellingPlan(ctx, field)
			case "selectedOrFirstAvailableVariant":
				return ec.fieldContext_Product_selectedOrFirstAvailableVariant(ctx, field)
			case "sellingPlanGroups":
				return ec.fieldContext_Product_sellingPlanGroups(ctx, field)
			case "seo":
				return ec.fieldContext_Product_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Product_tags(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "totalInventory":
				return ec.fieldContext_Product_totalInventory(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Product_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "variantBySelectedOptions":
				return ec.fieldContext_Product_variantBySelectedOptions(ctx, field)
			case "variants":
				return ec.fieldContext_Product_variants(ctx, field)
			case "variantsCount":
				return ec.fieldContext_Product_variantsCount(ctx, field)
			case "vendor":
				return ec.fieldContext_Product_vendor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PredictiveSearchResult_queries(ctx context.Context, field graphql.CollectedField, obj *model.PredictiveSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PredictiveSearchResult_queries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Queries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SearchQuerySuggestion)
	fc.Result = res
	return ec.marshalNSearchQuerySuggestion2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchQuerySuggestionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PredictiveSearchResult_queries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PredictiveSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "styledText":
				return ec.fieldContext_SearchQuerySuggestion_styledText(ctx, field)
			case "text":
				return ec.fieldContext_SearchQuerySuggestion_text(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_SearchQuerySuggestion_trackingParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchQuerySuggestion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PricingPercentageValue_percentage(ctx context.Context, field graphql.CollectedField, obj *model.PricingPercentageValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PricingPercentageValue_percentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PricingPercentageValue_percentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PricingPercentageValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_adjacentVariants(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_adjacentVariants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdjacentVariants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProductVariant)
	fc.Result = res
	return ec.marshalNProductVariant2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_adjacentVariants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableForSale":
				return ec.fieldContext_ProductVariant_availableForSale(ctx, field)
			case "barcode":
				return ec.fieldContext_ProductVariant_barcode(ctx, field)
			case "compareAtPrice":
				return ec.fieldContext_ProductVariant_compareAtPrice(ctx, field)
			case "compareAtPriceV2":
				return ec.fieldContext_ProductVariant_compareAtPriceV2(ctx, field)
			case "components":
				return ec.fieldContext_ProductVariant_components(ctx, field)
			case "currentlyNotInStock":
				return ec.fieldContext_ProductVariant_currentlyNotInStock(ctx, field)
			case "groupedBy":
				return ec.fieldContext_ProductVariant_groupedBy(ctx, field)
			case "id":
				return ec.fieldContext_ProductVariant_id(ctx, field)
			case "image":
				return ec.fieldContext_ProductVariant_image(ctx, field)
			case "metafield":
				return ec.fieldContext_ProductVariant_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_ProductVariant_metafields(ctx, field)
			case "price":
				return ec.fieldContext_ProductVariant_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ProductVariant_priceV2(ctx, field)
			case "product":
				return ec.fieldContext_ProductVariant_product(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_ProductVariant_quantityAvailable(ctx, field)
			case "quantityPriceBreaks":
				return ec.fieldContext_ProductVariant_quantityPriceBreaks(ctx, field)
			case "quantityRule":
				return ec.fieldContext_ProductVariant_quantityRule(ctx, field)
			case "requiresComponents":
				return ec.fieldContext_ProductVariant_requiresComponents(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_ProductVariant_requiresShipping(ctx, field)
			case "selectedOptions":
				return ec.fieldContext_ProductVariant_selectedOptions(ctx, field)
			case "sellingPlanAllocations":
				return ec.fieldContext_ProductVariant_sellingPlanAllocations(ctx, field)
			case "shopPayInstallmentsPricing":
				return ec.fieldContext_ProductVariant_shopPayInstallmentsPricing(ctx, field)
			case "sku":
				return ec.fieldContext_ProductVariant_sku(ctx, field)
			case "storeAvailability":
				return ec.fieldContext_ProductVariant_storeAvailability(ctx, field)
			case "taxable":
				return ec.fieldContext_ProductVariant_taxable(ctx, field)
			case "title":
				return ec.fieldContext_ProductVariant_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_ProductVariant_unitPrice(ctx, field)
			case "unitPriceMeasurement":
				return ec.fieldContext_ProductVariant_unitPriceMeasurement(ctx, field)
			case "weight":
				return ec.fieldContext_ProductVariant_weight(ctx, field)
			case "weightUnit":
				return ec.fieldContext_ProductVariant_weightUnit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_adjacentVariants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_availableForSale(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_availableForSale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableForSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_availableForSale(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_category(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TaxonomyCategory)
	fc.Result = res
	return ec.marshalOTaxonomyCategory2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTaxonomyCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ancestors":
				return ec.fieldContext_TaxonomyCategory_ancestors(ctx, field)
			case "id":
				return ec.fieldContext_TaxonomyCategory_id(ctx, field)
			case "name":
				return ec.fieldContext_TaxonomyCategory_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaxonomyCategory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_collections(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_collections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Collections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CollectionConnection)
	fc.Result = res
	return ec.marshalNCollectionConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_collections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CollectionConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_CollectionConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CollectionConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CollectionConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CollectionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_collections_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_compareAtPriceRange(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_compareAtPriceRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompareAtPriceRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductPriceRange)
	fc.Result = res
	return ec.marshalNProductPriceRange2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductPriceRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_compareAtPriceRange(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "maxVariantPrice":
				return ec.fieldContext_ProductPriceRange_maxVariantPrice(ctx, field)
			case "minVariantPrice":
				return ec.fieldContext_ProductPriceRange_minVariantPrice(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductPriceRange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_description(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_description_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_descriptionHtml(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_descriptionHtml(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionHTML, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNHTML2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_descriptionHtml(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_encodedVariantAvailability(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_encodedVariantAvailability(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncodedVariantAvailability, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_encodedVariantAvailability(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_encodedVariantExistence(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_encodedVariantExistence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncodedVariantExistence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_encodedVariantExistence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_featuredImage(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_featuredImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeaturedImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_featuredImage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_handle(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_id(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_images(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ImageConnection)
	fc.Result = res
	return ec.marshalNImageConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_images(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ImageConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ImageConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ImageConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_images_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_isGiftCard(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_isGiftCard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGiftCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_isGiftCard(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_media(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MediaConnection)
	fc.Result = res
	return ec.marshalNMediaConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MediaConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_MediaConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MediaConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_media_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_onlineStoreUrl(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_onlineStoreUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnlineStoreURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_onlineStoreUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_options(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProductOption)
	fc.Result = res
	return ec.marshalNProductOption2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_options(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProductOption_id(ctx, field)
			case "name":
				return ec.fieldContext_ProductOption_name(ctx, field)
			case "optionValues":
				return ec.fieldContext_ProductOption_optionValues(ctx, field)
			case "values":
				return ec.fieldContext_ProductOption_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductOption", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_options_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_priceRange(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_priceRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductPriceRange)
	fc.Result = res
	return ec.marshalNProductPriceRange2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductPriceRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_priceRange(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "maxVariantPrice":
				return ec.fieldContext_ProductPriceRange_maxVariantPrice(ctx, field)
			case "minVariantPrice":
				return ec.fieldContext_ProductPriceRange_minVariantPrice(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductPriceRange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_productType(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_productType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_productType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_publishedAt(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_publishedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_publishedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_requiresSellingPlan(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_requiresSellingPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiresSellingPlan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_requiresSellingPlan(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_selectedOrFirstAvailableVariant(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_selectedOrFirstAvailableVariant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedOrFirstAvailableVariant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariant)
	fc.Result = res
	return ec.marshalOProductVariant2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_selectedOrFirstAvailableVariant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableForSale":
				return ec.fieldContext_ProductVariant_availableForSale(ctx, field)
			case "barcode":
				return ec.fieldContext_ProductVariant_barcode(ctx, field)
			case "compareAtPrice":
				return ec.fieldContext_ProductVariant_compareAtPrice(ctx, field)
			case "compareAtPriceV2":
				return ec.fieldContext_ProductVariant_compareAtPriceV2(ctx, field)
			case "components":
				return ec.fieldContext_ProductVariant_components(ctx, field)
			case "currentlyNotInStock":
				return ec.fieldContext_ProductVariant_currentlyNotInStock(ctx, field)
			case "groupedBy":
				return ec.fieldContext_ProductVariant_groupedBy(ctx, field)
			case "id":
				return ec.fieldContext_ProductVariant_id(ctx, field)
			case "image":
				return ec.fieldContext_ProductVariant_image(ctx, field)
			case "metafield":
				return ec.fieldContext_ProductVariant_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_ProductVariant_metafields(ctx, field)
			case "price":
				return ec.fieldContext_ProductVariant_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ProductVariant_priceV2(ctx, field)
			case "product":
				return ec.fieldContext_ProductVariant_product(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_ProductVariant_quantityAvailable(ctx, field)
			case "quantityPriceBreaks":
				return ec.fieldContext_ProductVariant_quantityPriceBreaks(ctx, field)
			case "quantityRule":
				return ec.fieldContext_ProductVariant_quantityRule(ctx, field)
			case "requiresComponents":
				return ec.fieldContext_ProductVariant_requiresComponents(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_ProductVariant_requiresShipping(ctx, field)
			case "selectedOptions":
				return ec.fieldContext_ProductVariant_selectedOptions(ctx, field)
			case "sellingPlanAllocations":
				return ec.fieldContext_ProductVariant_sellingPlanAllocations(ctx, field)
			case "shopPayInstallmentsPricing":
				return ec.fieldContext_ProductVariant_shopPayInstallmentsPricing(ctx, field)
			case "sku":
				return ec.fieldContext_ProductVariant_sku(ctx, field)
			case "storeAvailability":
				return ec.fieldContext_ProductVariant_storeAvailability(ctx, field)
			case "taxable":
				return ec.fieldContext_ProductVariant_taxable(ctx, field)
			case "title":
				return ec.fieldContext_ProductVariant_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_ProductVariant_unitPrice(ctx, field)
			case "unitPriceMeasurement":
				return ec.fieldContext_ProductVariant_unitPriceMeasurement(ctx, field)
			case "weight":
				return ec.fieldContext_ProductVariant_weight(ctx, field)
			case "weightUnit":
				return ec.fieldContext_ProductVariant_weightUnit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_selectedOrFirstAvailableVariant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_sellingPlanGroups(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_sellingPlanGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellingPlanGroups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SellingPlanGroupConnection)
	fc.Result = res
	return ec.marshalNSellingPlanGroupConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_sellingPlanGroups(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SellingPlanGroupConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_SellingPlanGroupConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SellingPlanGroupConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanGroupConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_sellingPlanGroups_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_seo(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_seo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Seo)
	fc.Result = res
	return ec.marshalNSEO2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSeo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_seo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_SEO_description(ctx, field)
			case "title":
				return ec.fieldContext_SEO_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SEO", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_tags(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_tags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_title(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_totalInventory(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_totalInventory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_totalInventory(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_trackingParameters(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_trackingParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrackingParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_trackingParameters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_variantBySelectedOptions(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_variantBySelectedOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariantBySelectedOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariant)
	fc.Result = res
	return ec.marshalOProductVariant2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_variantBySelectedOptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableForSale":
				return ec.fieldContext_ProductVariant_availableForSale(ctx, field)
			case "barcode":
				return ec.fieldContext_ProductVariant_barcode(ctx, field)
			case "compareAtPrice":
				return ec.fieldContext_ProductVariant_compareAtPrice(ctx, field)
			case "compareAtPriceV2":
				return ec.fieldContext_ProductVariant_compareAtPriceV2(ctx, field)
			case "components":
				return ec.fieldContext_ProductVariant_components(ctx, field)
			case "currentlyNotInStock":
				return ec.fieldContext_ProductVariant_currentlyNotInStock(ctx, field)
			case "groupedBy":
				return ec.fieldContext_ProductVariant_groupedBy(ctx, field)
			case "id":
				return ec.fieldContext_ProductVariant_id(ctx, field)
			case "image":
				return ec.fieldContext_ProductVariant_image(ctx, field)
			case "metafield":
				return ec.fieldContext_ProductVariant_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_ProductVariant_metafields(ctx, field)
			case "price":
				return ec.fieldContext_ProductVariant_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ProductVariant_priceV2(ctx, field)
			case "product":
				return ec.fieldContext_ProductVariant_product(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_ProductVariant_quantityAvailable(ctx, field)
			case "quantityPriceBreaks":
				return ec.fieldContext_ProductVariant_quantityPriceBreaks(ctx, field)
			case "quantityRule":
				return ec.fieldContext_ProductVariant_quantityRule(ctx, field)
			case "requiresComponents":
				return ec.fieldContext_ProductVariant_requiresComponents(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_ProductVariant_requiresShipping(ctx, field)
			case "selectedOptions":
				return ec.fieldContext_ProductVariant_selectedOptions(ctx, field)
			case "sellingPlanAllocations":
				return ec.fieldContext_ProductVariant_sellingPlanAllocations(ctx, field)
			case "shopPayInstallmentsPricing":
				return ec.fieldContext_ProductVariant_shopPayInstallmentsPricing(ctx, field)
			case "sku":
				return ec.fieldContext_ProductVariant_sku(ctx, field)
			case "storeAvailability":
				return ec.fieldContext_ProductVariant_storeAvailability(ctx, field)
			case "taxable":
				return ec.fieldContext_ProductVariant_taxable(ctx, field)
			case "title":
				return ec.fieldContext_ProductVariant_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_ProductVariant_unitPrice(ctx, field)
			case "unitPriceMeasurement":
				return ec.fieldContext_ProductVariant_unitPriceMeasurement(ctx, field)
			case "weight":
				return ec.fieldContext_ProductVariant_weight(ctx, field)
			case "weightUnit":
				return ec.fieldContext_ProductVariant_weightUnit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_variantBySelectedOptions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_variants(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_variants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariantConnection)
	fc.Result = res
	return ec.marshalNProductVariantConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_variants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProductVariantConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ProductVariantConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProductVariantConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariantConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_variants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_variantsCount(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_variantsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariantsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Count)
	fc.Result = res
	return ec.marshalOCount2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_variantsCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_Count_count(ctx, field)
			case "precision":
				return ec.fieldContext_Count_precision(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Count", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_vendor(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_vendor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vendor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_vendor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ProductConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProductEdge)
	fc.Result = res
	return ec.marshalNProductEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ProductEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ProductEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductConnection_filters(ctx context.Context, field graphql.CollectedField, obj *model.ProductConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductConnection_filters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Filter)
	fc.Result = res
	return ec.marshalNFilter2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductConnection_filters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Filter_id(ctx, field)
			case "label":
				return ec.fieldContext_Filter_label(ctx, field)
			case "presentation":
				return ec.fieldContext_Filter_presentation(ctx, field)
			case "type":
				return ec.fieldContext_Filter_type(ctx, field)
			case "values":
				return ec.fieldContext_Filter_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Filter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.ProductConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adjacentVariants":
				return ec.fieldContext_Product_adjacentVariants(ctx, field)
			case "availableForSale":
				return ec.fieldContext_Product_availableForSale(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "collections":
				return ec.fieldContext_Product_collections(ctx, field)
			case "compareAtPriceRange":
				return ec.fieldContext_Product_compareAtPriceRange(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Product_descriptionHtml(ctx, field)
			case "encodedVariantAvailability":
				return ec.fieldContext_Product_encodedVariantAvailability(ctx, field)
			case "encodedVariantExistence":
				return ec.fieldContext_Product_encodedVariantExistence(ctx, field)
			case "featuredImage":
				return ec.fieldContext_Product_featuredImage(ctx, field)
			case "handle":
				return ec.fieldContext_Product_handle(ctx, field)
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "images":
				return ec.fieldContext_Product_images(ctx, field)
			case "isGiftCard":
				return ec.fieldContext_Product_isGiftCard(ctx, field)
			case "media":
				return ec.fieldContext_Product_media(ctx, field)
			case "metafield":
				return ec.fieldContext_Product_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Product_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Product_onlineStoreUrl(ctx, field)
			case "options":
				return ec.fieldContext_Product_options(ctx, field)
			case "priceRange":
				return ec.fieldContext_Product_priceRange(ctx, field)
			case "productType":
				return ec.fieldContext_Product_productType(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Product_publishedAt(ctx, field)
			case "requiresSellingPlan":
				return ec.fieldContext_Product_requiresSellingPlan(ctx, field)
			case "selectedOrFirstAvailableVariant":
				return ec.fieldContext_Product_selectedOrFirstAvailableVariant(ctx, field)
			case "sellingPlanGroups":
				return ec.fieldContext_Product_sellingPlanGroups(ctx, field)
			case "seo":
				return ec.fieldContext_Product_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Product_tags(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "totalInventory":
				return ec.fieldContext_Product_totalInventory(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Product_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "variantBySelectedOptions":
				return ec.fieldContext_Product_variantBySelectedOptions(ctx, field)
			case "variants":
				return ec.fieldContext_Product_variants(ctx, field)
			case "variantsCount":
				return ec.fieldContext_Product_variantsCount(ctx, field)
			case "vendor":
				return ec.fieldContext_Product_vendor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ProductConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ProductEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ProductEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adjacentVariants":
				return ec.fieldContext_Product_adjacentVariants(ctx, field)
			case "availableForSale":
				return ec.fieldContext_Product_availableForSale(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "collections":
				return ec.fieldContext_Product_collections(ctx, field)
			case "compareAtPriceRange":
				return ec.fieldContext_Product_compareAtPriceRange(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Product_descriptionHtml(ctx, field)
			case "encodedVariantAvailability":
				return ec.fieldContext_Product_encodedVariantAvailability(ctx, field)
			case "encodedVariantExistence":
				return ec.fieldContext_Product_encodedVariantExistence(ctx, field)
			case "featuredImage":
				return ec.fieldContext_Product_featuredImage(ctx, field)
			case "handle":
				return ec.fieldContext_Product_handle(ctx, field)
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "images":
				return ec.fieldContext_Product_images(ctx, field)
			case "isGiftCard":
				return ec.fieldContext_Product_isGiftCard(ctx, field)
			case "media":
				return ec.fieldContext_Product_media(ctx, field)
			case "metafield":
				return ec.fieldContext_Product_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Product_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Product_onlineStoreUrl(ctx, field)
			case "options":
				return ec.fieldContext_Product_options(ctx, field)
			case "priceRange":
				return ec.fieldContext_Product_priceRange(ctx, field)
			case "productType":
				return ec.fieldContext_Product_productType(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Product_publishedAt(ctx, field)
			case "requiresSellingPlan":
				return ec.fieldContext_Product_requiresSellingPlan(ctx, field)
			case "selectedOrFirstAvailableVariant":
				return ec.fieldContext_Product_selectedOrFirstAvailableVariant(ctx, field)
			case "sellingPlanGroups":
				return ec.fieldContext_Product_sellingPlanGroups(ctx, field)
			case "seo":
				return ec.fieldContext_Product_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Product_tags(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "totalInventory":
				return ec.fieldContext_Product_totalInventory(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Product_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "variantBySelectedOptions":
				return ec.fieldContext_Product_variantBySelectedOptions(ctx, field)
			case "variants":
				return ec.fieldContext_Product_variants(ctx, field)
			case "variantsCount":
				return ec.fieldContext_Product_variantsCount(ctx, field)
			case "vendor":
				return ec.fieldContext_Product_vendor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductOption_id(ctx context.Context, field graphql.CollectedField, obj *model.ProductOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductOption_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductOption_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductOption_name(ctx context.Context, field graphql.CollectedField, obj *model.ProductOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductOption_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductOption_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductOption_optionValues(ctx context.Context, field graphql.CollectedField, obj *model.ProductOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductOption_optionValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OptionValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProductOptionValue)
	fc.Result = res
	return ec.marshalNProductOptionValue2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductOptionValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductOption_optionValues(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstSelectableVariant":
				return ec.fieldContext_ProductOptionValue_firstSelectableVariant(ctx, field)
			case "id":
				return ec.fieldContext_ProductOptionValue_id(ctx, field)
			case "name":
				return ec.fieldContext_ProductOptionValue_name(ctx, field)
			case "swatch":
				return ec.fieldContext_ProductOptionValue_swatch(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductOptionValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductOption_values(ctx context.Context, field graphql.CollectedField, obj *model.ProductOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductOption_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductOption_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductOptionValue_firstSelectableVariant(ctx context.Context, field graphql.CollectedField, obj *model.ProductOptionValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductOptionValue_firstSelectableVariant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstSelectableVariant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariant)
	fc.Result = res
	return ec.marshalOProductVariant2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductOptionValue_firstSelectableVariant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductOptionValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableForSale":
				return ec.fieldContext_ProductVariant_availableForSale(ctx, field)
			case "barcode":
				return ec.fieldContext_ProductVariant_barcode(ctx, field)
			case "compareAtPrice":
				return ec.fieldContext_ProductVariant_compareAtPrice(ctx, field)
			case "compareAtPriceV2":
				return ec.fieldContext_ProductVariant_compareAtPriceV2(ctx, field)
			case "components":
				return ec.fieldContext_ProductVariant_components(ctx, field)
			case "currentlyNotInStock":
				return ec.fieldContext_ProductVariant_currentlyNotInStock(ctx, field)
			case "groupedBy":
				return ec.fieldContext_ProductVariant_groupedBy(ctx, field)
			case "id":
				return ec.fieldContext_ProductVariant_id(ctx, field)
			case "image":
				return ec.fieldContext_ProductVariant_image(ctx, field)
			case "metafield":
				return ec.fieldContext_ProductVariant_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_ProductVariant_metafields(ctx, field)
			case "price":
				return ec.fieldContext_ProductVariant_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ProductVariant_priceV2(ctx, field)
			case "product":
				return ec.fieldContext_ProductVariant_product(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_ProductVariant_quantityAvailable(ctx, field)
			case "quantityPriceBreaks":
				return ec.fieldContext_ProductVariant_quantityPriceBreaks(ctx, field)
			case "quantityRule":
				return ec.fieldContext_ProductVariant_quantityRule(ctx, field)
			case "requiresComponents":
				return ec.fieldContext_ProductVariant_requiresComponents(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_ProductVariant_requiresShipping(ctx, field)
			case "selectedOptions":
				return ec.fieldContext_ProductVariant_selectedOptions(ctx, field)
			case "sellingPlanAllocations":
				return ec.fieldContext_ProductVariant_sellingPlanAllocations(ctx, field)
			case "shopPayInstallmentsPricing":
				return ec.fieldContext_ProductVariant_shopPayInstallmentsPricing(ctx, field)
			case "sku":
				return ec.fieldContext_ProductVariant_sku(ctx, field)
			case "storeAvailability":
				return ec.fieldContext_ProductVariant_storeAvailability(ctx, field)
			case "taxable":
				return ec.fieldContext_ProductVariant_taxable(ctx, field)
			case "title":
				return ec.fieldContext_ProductVariant_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_ProductVariant_unitPrice(ctx, field)
			case "unitPriceMeasurement":
				return ec.fieldContext_ProductVariant_unitPriceMeasurement(ctx, field)
			case "weight":
				return ec.fieldContext_ProductVariant_weight(ctx, field)
			case "weightUnit":
				return ec.fieldContext_ProductVariant_weightUnit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductOptionValue_id(ctx context.Context, field graphql.CollectedField, obj *model.ProductOptionValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductOptionValue_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductOptionValue_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductOptionValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductOptionValue_name(ctx context.Context, field graphql.CollectedField, obj *model.ProductOptionValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductOptionValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductOptionValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductOptionValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductOptionValue_swatch(ctx context.Context, field graphql.CollectedField, obj *model.ProductOptionValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductOptionValue_swatch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Swatch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductOptionValueSwatch)
	fc.Result = res
	return ec.marshalOProductOptionValueSwatch2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductOptionValueSwatch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductOptionValue_swatch(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductOptionValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "color":
				return ec.fieldContext_ProductOptionValueSwatch_color(ctx, field)
			case "image":
				return ec.fieldContext_ProductOptionValueSwatch_image(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductOptionValueSwatch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductOptionValueSwatch_color(ctx context.Context, field graphql.CollectedField, obj *model.ProductOptionValueSwatch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductOptionValueSwatch_color(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOColor2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductOptionValueSwatch_color(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductOptionValueSwatch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Color does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductOptionValueSwatch_image(ctx context.Context, field graphql.CollectedField, obj *model.ProductOptionValueSwatch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductOptionValueSwatch_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.Media)
	fc.Result = res
	return ec.marshalOMedia2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductOptionValueSwatch_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductOptionValueSwatch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPriceRange_maxVariantPrice(ctx context.Context, field graphql.CollectedField, obj *model.ProductPriceRange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPriceRange_maxVariantPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxVariantPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPriceRange_maxVariantPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPriceRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPriceRange_minVariantPrice(ctx context.Context, field graphql.CollectedField, obj *model.ProductPriceRange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPriceRange_minVariantPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinVariantPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPriceRange_minVariantPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPriceRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_availableForSale(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_availableForSale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableForSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_availableForSale(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_barcode(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_barcode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Barcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_barcode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_compareAtPrice(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_compareAtPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompareAtPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_compareAtPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_compareAtPriceV2(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_compareAtPriceV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompareAtPriceV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_compareAtPriceV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_components(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_components(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Components, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariantComponentConnection)
	fc.Result = res
	return ec.marshalNProductVariantComponentConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_components(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProductVariantComponentConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ProductVariantComponentConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProductVariantComponentConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariantComponentConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProductVariant_components_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_currentlyNotInStock(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_currentlyNotInStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentlyNotInStock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_currentlyNotInStock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_groupedBy(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_groupedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariantConnection)
	fc.Result = res
	return ec.marshalNProductVariantConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_groupedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProductVariantConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ProductVariantConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProductVariantConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariantConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProductVariant_groupedBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_id(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_image(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_metafield(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProductVariant_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_metafields(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProductVariant_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_price(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_priceV2(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_priceV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_priceV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_product(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_product(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adjacentVariants":
				return ec.fieldContext_Product_adjacentVariants(ctx, field)
			case "availableForSale":
				return ec.fieldContext_Product_availableForSale(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "collections":
				return ec.fieldContext_Product_collections(ctx, field)
			case "compareAtPriceRange":
				return ec.fieldContext_Product_compareAtPriceRange(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Product_descriptionHtml(ctx, field)
			case "encodedVariantAvailability":
				return ec.fieldContext_Product_encodedVariantAvailability(ctx, field)
			case "encodedVariantExistence":
				return ec.fieldContext_Product_encodedVariantExistence(ctx, field)
			case "featuredImage":
				return ec.fieldContext_Product_featuredImage(ctx, field)
			case "handle":
				return ec.fieldContext_Product_handle(ctx, field)
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "images":
				return ec.fieldContext_Product_images(ctx, field)
			case "isGiftCard":
				return ec.fieldContext_Product_isGiftCard(ctx, field)
			case "media":
				return ec.fieldContext_Product_media(ctx, field)
			case "metafield":
				return ec.fieldContext_Product_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Product_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Product_onlineStoreUrl(ctx, field)
			case "options":
				return ec.fieldContext_Product_options(ctx, field)
			case "priceRange":
				return ec.fieldContext_Product_priceRange(ctx, field)
			case "productType":
				return ec.fieldContext_Product_productType(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Product_publishedAt(ctx, field)
			case "requiresSellingPlan":
				return ec.fieldContext_Product_requiresSellingPlan(ctx, field)
			case "selectedOrFirstAvailableVariant":
				return ec.fieldContext_Product_selectedOrFirstAvailableVariant(ctx, field)
			case "sellingPlanGroups":
				return ec.fieldContext_Product_sellingPlanGroups(ctx, field)
			case "seo":
				return ec.fieldContext_Product_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Product_tags(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "totalInventory":
				return ec.fieldContext_Product_totalInventory(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Product_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "variantBySelectedOptions":
				return ec.fieldContext_Product_variantBySelectedOptions(ctx, field)
			case "variants":
				return ec.fieldContext_Product_variants(ctx, field)
			case "variantsCount":
				return ec.fieldContext_Product_variantsCount(ctx, field)
			case "vendor":
				return ec.fieldContext_Product_vendor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_quantityAvailable(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_quantityAvailable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityAvailable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_quantityAvailable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_quantityPriceBreaks(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_quantityPriceBreaks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityPriceBreaks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.QuantityPriceBreakConnection)
	fc.Result = res
	return ec.marshalNQuantityPriceBreakConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreakConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_quantityPriceBreaks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_QuantityPriceBreakConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_QuantityPriceBreakConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_QuantityPriceBreakConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuantityPriceBreakConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProductVariant_quantityPriceBreaks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_quantityRule(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_quantityRule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityRule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.QuantityRule)
	fc.Result = res
	return ec.marshalNQuantityRule2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityRule(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_quantityRule(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "increment":
				return ec.fieldContext_QuantityRule_increment(ctx, field)
			case "maximum":
				return ec.fieldContext_QuantityRule_maximum(ctx, field)
			case "minimum":
				return ec.fieldContext_QuantityRule_minimum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuantityRule", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_requiresComponents(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_requiresComponents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiresComponents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_requiresComponents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_requiresShipping(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_requiresShipping(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiresShipping, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_requiresShipping(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_selectedOptions(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_selectedOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SelectedOption)
	fc.Result = res
	return ec.marshalNSelectedOption2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_selectedOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_SelectedOption_name(ctx, field)
			case "value":
				return ec.fieldContext_SelectedOption_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SelectedOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_sellingPlanAllocations(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_sellingPlanAllocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellingPlanAllocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SellingPlanAllocationConnection)
	fc.Result = res
	return ec.marshalNSellingPlanAllocationConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_sellingPlanAllocations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SellingPlanAllocationConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_SellingPlanAllocationConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SellingPlanAllocationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanAllocationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProductVariant_sellingPlanAllocations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_shopPayInstallmentsPricing(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_shopPayInstallmentsPricing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShopPayInstallmentsPricing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayInstallmentsProductVariantPricing)
	fc.Result = res
	return ec.marshalOShopPayInstallmentsProductVariantPricing2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsProductVariantPricing(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_shopPayInstallmentsPricing(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "available":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_available(ctx, field)
			case "eligible":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_eligible(ctx, field)
			case "fullPrice":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_fullPrice(ctx, field)
			case "id":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_id(ctx, field)
			case "installmentsCount":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_installmentsCount(ctx, field)
			case "pricePerTerm":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_pricePerTerm(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayInstallmentsProductVariantPricing", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_sku(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_sku(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sku, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_sku(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_storeAvailability(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_storeAvailability(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoreAvailability, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StoreAvailabilityConnection)
	fc.Result = res
	return ec.marshalNStoreAvailabilityConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailabilityConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_storeAvailability(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StoreAvailabilityConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_StoreAvailabilityConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StoreAvailabilityConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StoreAvailabilityConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProductVariant_storeAvailability_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_taxable(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_taxable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_taxable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_title(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_unitPrice(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_unitPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_unitPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_unitPriceMeasurement(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_unitPriceMeasurement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitPriceMeasurement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UnitPriceMeasurement)
	fc.Result = res
	return ec.marshalOUnitPriceMeasurement2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitPriceMeasurement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_unitPriceMeasurement(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "measuredType":
				return ec.fieldContext_UnitPriceMeasurement_measuredType(ctx, field)
			case "quantityUnit":
				return ec.fieldContext_UnitPriceMeasurement_quantityUnit(ctx, field)
			case "quantityValue":
				return ec.fieldContext_UnitPriceMeasurement_quantityValue(ctx, field)
			case "referenceUnit":
				return ec.fieldContext_UnitPriceMeasurement_referenceUnit(ctx, field)
			case "referenceValue":
				return ec.fieldContext_UnitPriceMeasurement_referenceValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UnitPriceMeasurement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_weight(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_weight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariant_weightUnit(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariant_weightUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeightUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.WeightUnit)
	fc.Result = res
	return ec.marshalNWeightUnit2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐWeightUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariant_weightUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type WeightUnit does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantComponent_productVariant(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantComponent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantComponent_productVariant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductVariant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariant)
	fc.Result = res
	return ec.marshalNProductVariant2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantComponent_productVariant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantComponent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableForSale":
				return ec.fieldContext_ProductVariant_availableForSale(ctx, field)
			case "barcode":
				return ec.fieldContext_ProductVariant_barcode(ctx, field)
			case "compareAtPrice":
				return ec.fieldContext_ProductVariant_compareAtPrice(ctx, field)
			case "compareAtPriceV2":
				return ec.fieldContext_ProductVariant_compareAtPriceV2(ctx, field)
			case "components":
				return ec.fieldContext_ProductVariant_components(ctx, field)
			case "currentlyNotInStock":
				return ec.fieldContext_ProductVariant_currentlyNotInStock(ctx, field)
			case "groupedBy":
				return ec.fieldContext_ProductVariant_groupedBy(ctx, field)
			case "id":
				return ec.fieldContext_ProductVariant_id(ctx, field)
			case "image":
				return ec.fieldContext_ProductVariant_image(ctx, field)
			case "metafield":
				return ec.fieldContext_ProductVariant_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_ProductVariant_metafields(ctx, field)
			case "price":
				return ec.fieldContext_ProductVariant_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ProductVariant_priceV2(ctx, field)
			case "product":
				return ec.fieldContext_ProductVariant_product(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_ProductVariant_quantityAvailable(ctx, field)
			case "quantityPriceBreaks":
				return ec.fieldContext_ProductVariant_quantityPriceBreaks(ctx, field)
			case "quantityRule":
				return ec.fieldContext_ProductVariant_quantityRule(ctx, field)
			case "requiresComponents":
				return ec.fieldContext_ProductVariant_requiresComponents(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_ProductVariant_requiresShipping(ctx, field)
			case "selectedOptions":
				return ec.fieldContext_ProductVariant_selectedOptions(ctx, field)
			case "sellingPlanAllocations":
				return ec.fieldContext_ProductVariant_sellingPlanAllocations(ctx, field)
			case "shopPayInstallmentsPricing":
				return ec.fieldContext_ProductVariant_shopPayInstallmentsPricing(ctx, field)
			case "sku":
				return ec.fieldContext_ProductVariant_sku(ctx, field)
			case "storeAvailability":
				return ec.fieldContext_ProductVariant_storeAvailability(ctx, field)
			case "taxable":
				return ec.fieldContext_ProductVariant_taxable(ctx, field)
			case "title":
				return ec.fieldContext_ProductVariant_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_ProductVariant_unitPrice(ctx, field)
			case "unitPriceMeasurement":
				return ec.fieldContext_ProductVariant_unitPriceMeasurement(ctx, field)
			case "weight":
				return ec.fieldContext_ProductVariant_weight(ctx, field)
			case "weightUnit":
				return ec.fieldContext_ProductVariant_weightUnit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantComponent_quantity(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantComponent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantComponent_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantComponent_quantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantComponent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantComponentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantComponentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantComponentConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProductVariantComponentEdge)
	fc.Result = res
	return ec.marshalNProductVariantComponentEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponentEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantComponentConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantComponentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ProductVariantComponentEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ProductVariantComponentEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariantComponentEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantComponentConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantComponentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantComponentConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProductVariantComponent)
	fc.Result = res
	return ec.marshalNProductVariantComponent2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantComponentConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantComponentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "productVariant":
				return ec.fieldContext_ProductVariantComponent_productVariant(ctx, field)
			case "quantity":
				return ec.fieldContext_ProductVariantComponent_quantity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariantComponent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantComponentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantComponentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantComponentConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantComponentConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantComponentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantComponentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantComponentEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantComponentEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantComponentEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantComponentEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantComponentEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantComponentEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantComponentEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariantComponent)
	fc.Result = res
	return ec.marshalNProductVariantComponent2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantComponentEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantComponentEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "productVariant":
				return ec.fieldContext_ProductVariantComponent_productVariant(ctx, field)
			case "quantity":
				return ec.fieldContext_ProductVariantComponent_quantity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariantComponent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProductVariantEdge)
	fc.Result = res
	return ec.marshalNProductVariantEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ProductVariantEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ProductVariantEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariantEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProductVariant)
	fc.Result = res
	return ec.marshalNProductVariant2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableForSale":
				return ec.fieldContext_ProductVariant_availableForSale(ctx, field)
			case "barcode":
				return ec.fieldContext_ProductVariant_barcode(ctx, field)
			case "compareAtPrice":
				return ec.fieldContext_ProductVariant_compareAtPrice(ctx, field)
			case "compareAtPriceV2":
				return ec.fieldContext_ProductVariant_compareAtPriceV2(ctx, field)
			case "components":
				return ec.fieldContext_ProductVariant_components(ctx, field)
			case "currentlyNotInStock":
				return ec.fieldContext_ProductVariant_currentlyNotInStock(ctx, field)
			case "groupedBy":
				return ec.fieldContext_ProductVariant_groupedBy(ctx, field)
			case "id":
				return ec.fieldContext_ProductVariant_id(ctx, field)
			case "image":
				return ec.fieldContext_ProductVariant_image(ctx, field)
			case "metafield":
				return ec.fieldContext_ProductVariant_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_ProductVariant_metafields(ctx, field)
			case "price":
				return ec.fieldContext_ProductVariant_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ProductVariant_priceV2(ctx, field)
			case "product":
				return ec.fieldContext_ProductVariant_product(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_ProductVariant_quantityAvailable(ctx, field)
			case "quantityPriceBreaks":
				return ec.fieldContext_ProductVariant_quantityPriceBreaks(ctx, field)
			case "quantityRule":
				return ec.fieldContext_ProductVariant_quantityRule(ctx, field)
			case "requiresComponents":
				return ec.fieldContext_ProductVariant_requiresComponents(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_ProductVariant_requiresShipping(ctx, field)
			case "selectedOptions":
				return ec.fieldContext_ProductVariant_selectedOptions(ctx, field)
			case "sellingPlanAllocations":
				return ec.fieldContext_ProductVariant_sellingPlanAllocations(ctx, field)
			case "shopPayInstallmentsPricing":
				return ec.fieldContext_ProductVariant_shopPayInstallmentsPricing(ctx, field)
			case "sku":
				return ec.fieldContext_ProductVariant_sku(ctx, field)
			case "storeAvailability":
				return ec.fieldContext_ProductVariant_storeAvailability(ctx, field)
			case "taxable":
				return ec.fieldContext_ProductVariant_taxable(ctx, field)
			case "title":
				return ec.fieldContext_ProductVariant_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_ProductVariant_unitPrice(ctx, field)
			case "unitPriceMeasurement":
				return ec.fieldContext_ProductVariant_unitPriceMeasurement(ctx, field)
			case "weight":
				return ec.fieldContext_ProductVariant_weight(ctx, field)
			case "weightUnit":
				return ec.fieldContext_ProductVariant_weightUnit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductVariantEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ProductVariantEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductVariantEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductVariant)
	fc.Result = res
	return ec.marshalNProductVariant2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductVariantEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductVariantEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableForSale":
				return ec.fieldContext_ProductVariant_availableForSale(ctx, field)
			case "barcode":
				return ec.fieldContext_ProductVariant_barcode(ctx, field)
			case "compareAtPrice":
				return ec.fieldContext_ProductVariant_compareAtPrice(ctx, field)
			case "compareAtPriceV2":
				return ec.fieldContext_ProductVariant_compareAtPriceV2(ctx, field)
			case "components":
				return ec.fieldContext_ProductVariant_components(ctx, field)
			case "currentlyNotInStock":
				return ec.fieldContext_ProductVariant_currentlyNotInStock(ctx, field)
			case "groupedBy":
				return ec.fieldContext_ProductVariant_groupedBy(ctx, field)
			case "id":
				return ec.fieldContext_ProductVariant_id(ctx, field)
			case "image":
				return ec.fieldContext_ProductVariant_image(ctx, field)
			case "metafield":
				return ec.fieldContext_ProductVariant_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_ProductVariant_metafields(ctx, field)
			case "price":
				return ec.fieldContext_ProductVariant_price(ctx, field)
			case "priceV2":
				return ec.fieldContext_ProductVariant_priceV2(ctx, field)
			case "product":
				return ec.fieldContext_ProductVariant_product(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_ProductVariant_quantityAvailable(ctx, field)
			case "quantityPriceBreaks":
				return ec.fieldContext_ProductVariant_quantityPriceBreaks(ctx, field)
			case "quantityRule":
				return ec.fieldContext_ProductVariant_quantityRule(ctx, field)
			case "requiresComponents":
				return ec.fieldContext_ProductVariant_requiresComponents(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_ProductVariant_requiresShipping(ctx, field)
			case "selectedOptions":
				return ec.fieldContext_ProductVariant_selectedOptions(ctx, field)
			case "sellingPlanAllocations":
				return ec.fieldContext_ProductVariant_sellingPlanAllocations(ctx, field)
			case "shopPayInstallmentsPricing":
				return ec.fieldContext_ProductVariant_shopPayInstallmentsPricing(ctx, field)
			case "sku":
				return ec.fieldContext_ProductVariant_sku(ctx, field)
			case "storeAvailability":
				return ec.fieldContext_ProductVariant_storeAvailability(ctx, field)
			case "taxable":
				return ec.fieldContext_ProductVariant_taxable(ctx, field)
			case "title":
				return ec.fieldContext_ProductVariant_title(ctx, field)
			case "unitPrice":
				return ec.fieldContext_ProductVariant_unitPrice(ctx, field)
			case "unitPriceMeasurement":
				return ec.fieldContext_ProductVariant_unitPriceMeasurement(ctx, field)
			case "weight":
				return ec.fieldContext_ProductVariant_weight(ctx, field)
			case "weightUnit":
				return ec.fieldContext_ProductVariant_weightUnit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PurchasingCompany_company(ctx context.Context, field graphql.CollectedField, obj *model.PurchasingCompany) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PurchasingCompany_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PurchasingCompany_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PurchasingCompany",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Company_createdAt(ctx, field)
			case "externalId":
				return ec.fieldContext_Company_externalId(ctx, field)
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Company_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Company_metafields(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Company_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PurchasingCompany_contact(ctx context.Context, field graphql.CollectedField, obj *model.PurchasingCompany) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PurchasingCompany_contact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CompanyContact)
	fc.Result = res
	return ec.marshalOCompanyContact2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompanyContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PurchasingCompany_contact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PurchasingCompany",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CompanyContact_createdAt(ctx, field)
			case "id":
				return ec.fieldContext_CompanyContact_id(ctx, field)
			case "locale":
				return ec.fieldContext_CompanyContact_locale(ctx, field)
			case "title":
				return ec.fieldContext_CompanyContact_title(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompanyContact_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyContact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PurchasingCompany_location(ctx context.Context, field graphql.CollectedField, obj *model.PurchasingCompany) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PurchasingCompany_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyLocation)
	fc.Result = res
	return ec.marshalNCompanyLocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompanyLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PurchasingCompany_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PurchasingCompany",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CompanyLocation_createdAt(ctx, field)
			case "externalId":
				return ec.fieldContext_CompanyLocation_externalId(ctx, field)
			case "id":
				return ec.fieldContext_CompanyLocation_id(ctx, field)
			case "locale":
				return ec.fieldContext_CompanyLocation_locale(ctx, field)
			case "metafield":
				return ec.fieldContext_CompanyLocation_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_CompanyLocation_metafields(ctx, field)
			case "name":
				return ec.fieldContext_CompanyLocation_name(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompanyLocation_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyLocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuantityPriceBreak_minimumQuantity(ctx context.Context, field graphql.CollectedField, obj *model.QuantityPriceBreak) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuantityPriceBreak_minimumQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinimumQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuantityPriceBreak_minimumQuantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuantityPriceBreak",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuantityPriceBreak_price(ctx context.Context, field graphql.CollectedField, obj *model.QuantityPriceBreak) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuantityPriceBreak_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuantityPriceBreak_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuantityPriceBreak",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuantityPriceBreakConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.QuantityPriceBreakConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuantityPriceBreakConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.QuantityPriceBreakEdge)
	fc.Result = res
	return ec.marshalNQuantityPriceBreakEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreakEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuantityPriceBreakConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuantityPriceBreakConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_QuantityPriceBreakEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_QuantityPriceBreakEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuantityPriceBreakEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuantityPriceBreakConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.QuantityPriceBreakConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuantityPriceBreakConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.QuantityPriceBreak)
	fc.Result = res
	return ec.marshalNQuantityPriceBreak2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreakᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuantityPriceBreakConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuantityPriceBreakConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "minimumQuantity":
				return ec.fieldContext_QuantityPriceBreak_minimumQuantity(ctx, field)
			case "price":
				return ec.fieldContext_QuantityPriceBreak_price(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuantityPriceBreak", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuantityPriceBreakConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.QuantityPriceBreakConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuantityPriceBreakConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuantityPriceBreakConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuantityPriceBreakConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuantityPriceBreakEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.QuantityPriceBreakEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuantityPriceBreakEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuantityPriceBreakEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuantityPriceBreakEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuantityPriceBreakEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.QuantityPriceBreakEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuantityPriceBreakEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.QuantityPriceBreak)
	fc.Result = res
	return ec.marshalNQuantityPriceBreak2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreak(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuantityPriceBreakEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuantityPriceBreakEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "minimumQuantity":
				return ec.fieldContext_QuantityPriceBreak_minimumQuantity(ctx, field)
			case "price":
				return ec.fieldContext_QuantityPriceBreak_price(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuantityPriceBreak", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuantityRule_increment(ctx context.Context, field graphql.CollectedField, obj *model.QuantityRule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuantityRule_increment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Increment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuantityRule_increment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuantityRule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuantityRule_maximum(ctx context.Context, field graphql.CollectedField, obj *model.QuantityRule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuantityRule_maximum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Maximum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuantityRule_maximum(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuantityRule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuantityRule_minimum(ctx context.Context, field graphql.CollectedField, obj *model.QuantityRule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuantityRule_minimum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Minimum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuantityRule_minimum(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuantityRule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_article(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_article(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Article, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Article)
	fc.Result = res
	return ec.marshalOArticle2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_article(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Article_author(ctx, field)
			case "authorV2":
				return ec.fieldContext_Article_authorV2(ctx, field)
			case "blog":
				return ec.fieldContext_Article_blog(ctx, field)
			case "comments":
				return ec.fieldContext_Article_comments(ctx, field)
			case "content":
				return ec.fieldContext_Article_content(ctx, field)
			case "contentHtml":
				return ec.fieldContext_Article_contentHtml(ctx, field)
			case "excerpt":
				return ec.fieldContext_Article_excerpt(ctx, field)
			case "excerptHtml":
				return ec.fieldContext_Article_excerptHtml(ctx, field)
			case "handle":
				return ec.fieldContext_Article_handle(ctx, field)
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "image":
				return ec.fieldContext_Article_image(ctx, field)
			case "metafield":
				return ec.fieldContext_Article_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Article_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Article_onlineStoreUrl(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Article_publishedAt(ctx, field)
			case "seo":
				return ec.fieldContext_Article_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Article_tags(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Article_trackingParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_article_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_articles(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_articles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Articles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArticleConnection)
	fc.Result = res
	return ec.marshalNArticleConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_articles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ArticleConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ArticleConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ArticleConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_articles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_blog(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_blog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Blog)
	fc.Result = res
	return ec.marshalOBlog2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlog(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_blog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "articleByHandle":
				return ec.fieldContext_Blog_articleByHandle(ctx, field)
			case "articles":
				return ec.fieldContext_Blog_articles(ctx, field)
			case "authors":
				return ec.fieldContext_Blog_authors(ctx, field)
			case "handle":
				return ec.fieldContext_Blog_handle(ctx, field)
			case "id":
				return ec.fieldContext_Blog_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Blog_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Blog_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Blog_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Blog_seo(ctx, field)
			case "title":
				return ec.fieldContext_Blog_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blog", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_blog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_blogByHandle(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_blogByHandle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlogByHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Blog)
	fc.Result = res
	return ec.marshalOBlog2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlog(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_blogByHandle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "articleByHandle":
				return ec.fieldContext_Blog_articleByHandle(ctx, field)
			case "articles":
				return ec.fieldContext_Blog_articles(ctx, field)
			case "authors":
				return ec.fieldContext_Blog_authors(ctx, field)
			case "handle":
				return ec.fieldContext_Blog_handle(ctx, field)
			case "id":
				return ec.fieldContext_Blog_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Blog_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Blog_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Blog_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Blog_seo(ctx, field)
			case "title":
				return ec.fieldContext_Blog_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blog", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_blogByHandle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_blogs(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_blogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blogs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BlogConnection)
	fc.Result = res
	return ec.marshalNBlogConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_blogs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_BlogConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_BlogConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_BlogConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlogConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_blogs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_cart(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_cart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appliedGiftCards":
				return ec.fieldContext_Cart_appliedGiftCards(ctx, field)
			case "attribute":
				return ec.fieldContext_Cart_attribute(ctx, field)
			case "attributes":
				return ec.fieldContext_Cart_attributes(ctx, field)
			case "buyerIdentity":
				return ec.fieldContext_Cart_buyerIdentity(ctx, field)
			case "checkoutUrl":
				return ec.fieldContext_Cart_checkoutUrl(ctx, field)
			case "cost":
				return ec.fieldContext_Cart_cost(ctx, field)
			case "createdAt":
				return ec.fieldContext_Cart_createdAt(ctx, field)
			case "delivery":
				return ec.fieldContext_Cart_delivery(ctx, field)
			case "deliveryGroups":
				return ec.fieldContext_Cart_deliveryGroups(ctx, field)
			case "discountAllocations":
				return ec.fieldContext_Cart_discountAllocations(ctx, field)
			case "discountCodes":
				return ec.fieldContext_Cart_discountCodes(ctx, field)
			case "estimatedCost":
				return ec.fieldContext_Cart_estimatedCost(ctx, field)
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "lines":
				return ec.fieldContext_Cart_lines(ctx, field)
			case "metafield":
				return ec.fieldContext_Cart_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Cart_metafields(ctx, field)
			case "note":
				return ec.fieldContext_Cart_note(ctx, field)
			case "totalQuantity":
				return ec.fieldContext_Cart_totalQuantity(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Cart_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_cart_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_cartCompletionAttempt(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_cartCompletionAttempt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CartCompletionAttempt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.CartCompletionAttemptResult)
	fc.Result = res
	return ec.marshalOCartCompletionAttemptResult2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCompletionAttemptResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_cartCompletionAttempt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CartCompletionAttemptResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_cartCompletionAttempt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_collection(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_collection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Collection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Collection)
	fc.Result = res
	return ec.marshalOCollection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_collection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_Collection_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Collection_descriptionHtml(ctx, field)
			case "handle":
				return ec.fieldContext_Collection_handle(ctx, field)
			case "id":
				return ec.fieldContext_Collection_id(ctx, field)
			case "image":
				return ec.fieldContext_Collection_image(ctx, field)
			case "metafield":
				return ec.fieldContext_Collection_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Collection_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Collection_onlineStoreUrl(ctx, field)
			case "products":
				return ec.fieldContext_Collection_products(ctx, field)
			case "seo":
				return ec.fieldContext_Collection_seo(ctx, field)
			case "title":
				return ec.fieldContext_Collection_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Collection_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Collection_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Collection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_collection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_collectionByHandle(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_collectionByHandle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollectionByHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Collection)
	fc.Result = res
	return ec.marshalOCollection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_collectionByHandle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_Collection_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Collection_descriptionHtml(ctx, field)
			case "handle":
				return ec.fieldContext_Collection_handle(ctx, field)
			case "id":
				return ec.fieldContext_Collection_id(ctx, field)
			case "image":
				return ec.fieldContext_Collection_image(ctx, field)
			case "metafield":
				return ec.fieldContext_Collection_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Collection_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Collection_onlineStoreUrl(ctx, field)
			case "products":
				return ec.fieldContext_Collection_products(ctx, field)
			case "seo":
				return ec.fieldContext_Collection_seo(ctx, field)
			case "title":
				return ec.fieldContext_Collection_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Collection_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Collection_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Collection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_collectionByHandle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_collections(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_collections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Collections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CollectionConnection)
	fc.Result = res
	return ec.marshalNCollectionConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_collections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CollectionConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_CollectionConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CollectionConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CollectionConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CollectionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_collections_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_customer(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_customer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptsMarketing":
				return ec.fieldContext_Customer_acceptsMarketing(ctx, field)
			case "addresses":
				return ec.fieldContext_Customer_addresses(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "defaultAddress":
				return ec.fieldContext_Customer_defaultAddress(ctx, field)
			case "displayName":
				return ec.fieldContext_Customer_displayName(ctx, field)
			case "email":
				return ec.fieldContext_Customer_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Customer_firstName(ctx, field)
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "lastIncompleteCheckout":
				return ec.fieldContext_Customer_lastIncompleteCheckout(ctx, field)
			case "lastName":
				return ec.fieldContext_Customer_lastName(ctx, field)
			case "metafield":
				return ec.fieldContext_Customer_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Customer_metafields(ctx, field)
			case "numberOfOrders":
				return ec.fieldContext_Customer_numberOfOrders(ctx, field)
			case "orders":
				return ec.fieldContext_Customer_orders(ctx, field)
			case "phone":
				return ec.fieldContext_Customer_phone(ctx, field)
			case "tags":
				return ec.fieldContext_Customer_tags(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_customer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_localization(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_localization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Localization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Localization)
	fc.Result = res
	return ec.marshalNLocalization2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocalization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_localization(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableCountries":
				return ec.fieldContext_Localization_availableCountries(ctx, field)
			case "availableLanguages":
				return ec.fieldContext_Localization_availableLanguages(ctx, field)
			case "country":
				return ec.fieldContext_Localization_country(ctx, field)
			case "language":
				return ec.fieldContext_Localization_language(ctx, field)
			case "market":
				return ec.fieldContext_Localization_market(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Localization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_locations(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LocationConnection)
	fc.Result = res
	return ec.marshalNLocationConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_LocationConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_LocationConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_LocationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LocationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_locations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_menu(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_menu(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Menu, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Menu)
	fc.Result = res
	return ec.marshalOMenu2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenu(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_menu(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "handle":
				return ec.fieldContext_Menu_handle(ctx, field)
			case "id":
				return ec.fieldContext_Menu_id(ctx, field)
			case "items":
				return ec.fieldContext_Menu_items(ctx, field)
			case "itemsCount":
				return ec.fieldContext_Menu_itemsCount(ctx, field)
			case "title":
				return ec.fieldContext_Menu_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Menu", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_menu_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_metaobject(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_metaobject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metaobject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metaobject)
	fc.Result = res
	return ec.marshalOMetaobject2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_metaobject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_Metaobject_field(ctx, field)
			case "fields":
				return ec.fieldContext_Metaobject_fields(ctx, field)
			case "handle":
				return ec.fieldContext_Metaobject_handle(ctx, field)
			case "id":
				return ec.fieldContext_Metaobject_id(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Metaobject_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Metaobject_seo(ctx, field)
			case "type":
				return ec.fieldContext_Metaobject_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metaobject_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metaobject", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_metaobject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_metaobjects(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_metaobjects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metaobjects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MetaobjectConnection)
	fc.Result = res
	return ec.marshalNMetaobjectConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_metaobjects(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MetaobjectConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_MetaobjectConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MetaobjectConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetaobjectConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_metaobjects_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_node(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.Node)
	fc.Result = res
	return ec.marshalONode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_nodes(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Node)
	fc.Result = res
	return ec.marshalNNode2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_page(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Page)
	fc.Result = res
	return ec.marshalOPage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "body":
				return ec.fieldContext_Page_body(ctx, field)
			case "bodySummary":
				return ec.fieldContext_Page_bodySummary(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "handle":
				return ec.fieldContext_Page_handle(ctx, field)
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Page_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Page_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Page_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Page_seo(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Page_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_page_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_pageByHandle(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_pageByHandle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageByHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Page)
	fc.Result = res
	return ec.marshalOPage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_pageByHandle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "body":
				return ec.fieldContext_Page_body(ctx, field)
			case "bodySummary":
				return ec.fieldContext_Page_bodySummary(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "handle":
				return ec.fieldContext_Page_handle(ctx, field)
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Page_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Page_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Page_onlineStoreUrl(ctx, field)
			case "seo":
				return ec.fieldContext_Page_seo(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Page_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_pageByHandle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_pages(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_pages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageConnection)
	fc.Result = res
	return ec.marshalNPageConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_pages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PageConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_PageConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PageConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_pages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_paymentSettings(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_paymentSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentSettings)
	fc.Result = res
	return ec.marshalNPaymentSettings2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPaymentSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_paymentSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptedCardBrands":
				return ec.fieldContext_PaymentSettings_acceptedCardBrands(ctx, field)
			case "cardVaultUrl":
				return ec.fieldContext_PaymentSettings_cardVaultUrl(ctx, field)
			case "countryCode":
				return ec.fieldContext_PaymentSettings_countryCode(ctx, field)
			case "currencyCode":
				return ec.fieldContext_PaymentSettings_currencyCode(ctx, field)
			case "enabledPresentmentCurrencies":
				return ec.fieldContext_PaymentSettings_enabledPresentmentCurrencies(ctx, field)
			case "shopifyPaymentsAccountId":
				return ec.fieldContext_PaymentSettings_shopifyPaymentsAccountId(ctx, field)
			case "supportedDigitalWallets":
				return ec.fieldContext_PaymentSettings_supportedDigitalWallets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymentSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_predictiveSearch(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_predictiveSearch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PredictiveSearch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PredictiveSearchResult)
	fc.Result = res
	return ec.marshalOPredictiveSearchResult2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_predictiveSearch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "articles":
				return ec.fieldContext_PredictiveSearchResult_articles(ctx, field)
			case "collections":
				return ec.fieldContext_PredictiveSearchResult_collections(ctx, field)
			case "pages":
				return ec.fieldContext_PredictiveSearchResult_pages(ctx, field)
			case "products":
				return ec.fieldContext_PredictiveSearchResult_products(ctx, field)
			case "queries":
				return ec.fieldContext_PredictiveSearchResult_queries(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PredictiveSearchResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_predictiveSearch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_product(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adjacentVariants":
				return ec.fieldContext_Product_adjacentVariants(ctx, field)
			case "availableForSale":
				return ec.fieldContext_Product_availableForSale(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "collections":
				return ec.fieldContext_Product_collections(ctx, field)
			case "compareAtPriceRange":
				return ec.fieldContext_Product_compareAtPriceRange(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Product_descriptionHtml(ctx, field)
			case "encodedVariantAvailability":
				return ec.fieldContext_Product_encodedVariantAvailability(ctx, field)
			case "encodedVariantExistence":
				return ec.fieldContext_Product_encodedVariantExistence(ctx, field)
			case "featuredImage":
				return ec.fieldContext_Product_featuredImage(ctx, field)
			case "handle":
				return ec.fieldContext_Product_handle(ctx, field)
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "images":
				return ec.fieldContext_Product_images(ctx, field)
			case "isGiftCard":
				return ec.fieldContext_Product_isGiftCard(ctx, field)
			case "media":
				return ec.fieldContext_Product_media(ctx, field)
			case "metafield":
				return ec.fieldContext_Product_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Product_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Product_onlineStoreUrl(ctx, field)
			case "options":
				return ec.fieldContext_Product_options(ctx, field)
			case "priceRange":
				return ec.fieldContext_Product_priceRange(ctx, field)
			case "productType":
				return ec.fieldContext_Product_productType(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Product_publishedAt(ctx, field)
			case "requiresSellingPlan":
				return ec.fieldContext_Product_requiresSellingPlan(ctx, field)
			case "selectedOrFirstAvailableVariant":
				return ec.fieldContext_Product_selectedOrFirstAvailableVariant(ctx, field)
			case "sellingPlanGroups":
				return ec.fieldContext_Product_sellingPlanGroups(ctx, field)
			case "seo":
				return ec.fieldContext_Product_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Product_tags(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "totalInventory":
				return ec.fieldContext_Product_totalInventory(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Product_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "variantBySelectedOptions":
				return ec.fieldContext_Product_variantBySelectedOptions(ctx, field)
			case "variants":
				return ec.fieldContext_Product_variants(ctx, field)
			case "variantsCount":
				return ec.fieldContext_Product_variantsCount(ctx, field)
			case "vendor":
				return ec.fieldContext_Product_vendor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_product_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_productByHandle(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_productByHandle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductByHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_productByHandle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adjacentVariants":
				return ec.fieldContext_Product_adjacentVariants(ctx, field)
			case "availableForSale":
				return ec.fieldContext_Product_availableForSale(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "collections":
				return ec.fieldContext_Product_collections(ctx, field)
			case "compareAtPriceRange":
				return ec.fieldContext_Product_compareAtPriceRange(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Product_descriptionHtml(ctx, field)
			case "encodedVariantAvailability":
				return ec.fieldContext_Product_encodedVariantAvailability(ctx, field)
			case "encodedVariantExistence":
				return ec.fieldContext_Product_encodedVariantExistence(ctx, field)
			case "featuredImage":
				return ec.fieldContext_Product_featuredImage(ctx, field)
			case "handle":
				return ec.fieldContext_Product_handle(ctx, field)
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "images":
				return ec.fieldContext_Product_images(ctx, field)
			case "isGiftCard":
				return ec.fieldContext_Product_isGiftCard(ctx, field)
			case "media":
				return ec.fieldContext_Product_media(ctx, field)
			case "metafield":
				return ec.fieldContext_Product_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Product_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Product_onlineStoreUrl(ctx, field)
			case "options":
				return ec.fieldContext_Product_options(ctx, field)
			case "priceRange":
				return ec.fieldContext_Product_priceRange(ctx, field)
			case "productType":
				return ec.fieldContext_Product_productType(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Product_publishedAt(ctx, field)
			case "requiresSellingPlan":
				return ec.fieldContext_Product_requiresSellingPlan(ctx, field)
			case "selectedOrFirstAvailableVariant":
				return ec.fieldContext_Product_selectedOrFirstAvailableVariant(ctx, field)
			case "sellingPlanGroups":
				return ec.fieldContext_Product_sellingPlanGroups(ctx, field)
			case "seo":
				return ec.fieldContext_Product_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Product_tags(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "totalInventory":
				return ec.fieldContext_Product_totalInventory(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Product_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "variantBySelectedOptions":
				return ec.fieldContext_Product_variantBySelectedOptions(ctx, field)
			case "variants":
				return ec.fieldContext_Product_variants(ctx, field)
			case "variantsCount":
				return ec.fieldContext_Product_variantsCount(ctx, field)
			case "vendor":
				return ec.fieldContext_Product_vendor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_productByHandle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_productRecommendations(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_productRecommendations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductRecommendations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_productRecommendations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adjacentVariants":
				return ec.fieldContext_Product_adjacentVariants(ctx, field)
			case "availableForSale":
				return ec.fieldContext_Product_availableForSale(ctx, field)
			case "category":
				return ec.fieldContext_Product_category(ctx, field)
			case "collections":
				return ec.fieldContext_Product_collections(ctx, field)
			case "compareAtPriceRange":
				return ec.fieldContext_Product_compareAtPriceRange(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Product_description(ctx, field)
			case "descriptionHtml":
				return ec.fieldContext_Product_descriptionHtml(ctx, field)
			case "encodedVariantAvailability":
				return ec.fieldContext_Product_encodedVariantAvailability(ctx, field)
			case "encodedVariantExistence":
				return ec.fieldContext_Product_encodedVariantExistence(ctx, field)
			case "featuredImage":
				return ec.fieldContext_Product_featuredImage(ctx, field)
			case "handle":
				return ec.fieldContext_Product_handle(ctx, field)
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "images":
				return ec.fieldContext_Product_images(ctx, field)
			case "isGiftCard":
				return ec.fieldContext_Product_isGiftCard(ctx, field)
			case "media":
				return ec.fieldContext_Product_media(ctx, field)
			case "metafield":
				return ec.fieldContext_Product_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Product_metafields(ctx, field)
			case "onlineStoreUrl":
				return ec.fieldContext_Product_onlineStoreUrl(ctx, field)
			case "options":
				return ec.fieldContext_Product_options(ctx, field)
			case "priceRange":
				return ec.fieldContext_Product_priceRange(ctx, field)
			case "productType":
				return ec.fieldContext_Product_productType(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Product_publishedAt(ctx, field)
			case "requiresSellingPlan":
				return ec.fieldContext_Product_requiresSellingPlan(ctx, field)
			case "selectedOrFirstAvailableVariant":
				return ec.fieldContext_Product_selectedOrFirstAvailableVariant(ctx, field)
			case "sellingPlanGroups":
				return ec.fieldContext_Product_sellingPlanGroups(ctx, field)
			case "seo":
				return ec.fieldContext_Product_seo(ctx, field)
			case "tags":
				return ec.fieldContext_Product_tags(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "totalInventory":
				return ec.fieldContext_Product_totalInventory(ctx, field)
			case "trackingParameters":
				return ec.fieldContext_Product_trackingParameters(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "variantBySelectedOptions":
				return ec.fieldContext_Product_variantBySelectedOptions(ctx, field)
			case "variants":
				return ec.fieldContext_Product_variants(ctx, field)
			case "variantsCount":
				return ec.fieldContext_Product_variantsCount(ctx, field)
			case "vendor":
				return ec.fieldContext_Product_vendor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_productRecommendations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_productTags(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_productTags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductTags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StringConnection)
	fc.Result = res
	return ec.marshalNStringConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStringConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_productTags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StringConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_StringConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StringConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_productTags_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_productTypes(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_productTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StringConnection)
	fc.Result = res
	return ec.marshalNStringConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStringConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_productTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StringConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_StringConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StringConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_productTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_products(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductConnection)
	fc.Result = res
	return ec.marshalNProductConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_products(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProductConnection_edges(ctx, field)
			case "filters":
				return ec.fieldContext_ProductConnection_filters(ctx, field)
			case "nodes":
				return ec.fieldContext_ProductConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProductConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_products_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_publicApiVersions(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_publicApiVersions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicAPIVersions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.APIVersion)
	fc.Result = res
	return ec.marshalNApiVersion2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAPIVersionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_publicApiVersions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayName":
				return ec.fieldContext_ApiVersion_displayName(ctx, field)
			case "handle":
				return ec.fieldContext_ApiVersion_handle(ctx, field)
			case "supported":
				return ec.fieldContext_ApiVersion_supported(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiVersion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_search(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_search(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Search, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SearchResultItemConnection)
	fc.Result = res
	return ec.marshalNSearchResultItemConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItemConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_search(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SearchResultItemConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_SearchResultItemConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SearchResultItemConnection_pageInfo(ctx, field)
			case "productFilters":
				return ec.fieldContext_SearchResultItemConnection_productFilters(ctx, field)
			case "totalCount":
				return ec.fieldContext_SearchResultItemConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchResultItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_search_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_shop(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_shop(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Shop)
	fc.Result = res
	return ec.marshalNShop2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShop(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_shop(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "brand":
				return ec.fieldContext_Shop_brand(ctx, field)
			case "customerAccountUrl":
				return ec.fieldContext_Shop_customerAccountUrl(ctx, field)
			case "description":
				return ec.fieldContext_Shop_description(ctx, field)
			case "id":
				return ec.fieldContext_Shop_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Shop_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Shop_metafields(ctx, field)
			case "moneyFormat":
				return ec.fieldContext_Shop_moneyFormat(ctx, field)
			case "name":
				return ec.fieldContext_Shop_name(ctx, field)
			case "paymentSettings":
				return ec.fieldContext_Shop_paymentSettings(ctx, field)
			case "primaryDomain":
				return ec.fieldContext_Shop_primaryDomain(ctx, field)
			case "privacyPolicy":
				return ec.fieldContext_Shop_privacyPolicy(ctx, field)
			case "refundPolicy":
				return ec.fieldContext_Shop_refundPolicy(ctx, field)
			case "shippingPolicy":
				return ec.fieldContext_Shop_shippingPolicy(ctx, field)
			case "shipsToCountries":
				return ec.fieldContext_Shop_shipsToCountries(ctx, field)
			case "shopPayInstallmentsPricing":
				return ec.fieldContext_Shop_shopPayInstallmentsPricing(ctx, field)
			case "subscriptionPolicy":
				return ec.fieldContext_Shop_subscriptionPolicy(ctx, field)
			case "termsOfService":
				return ec.fieldContext_Shop_termsOfService(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Shop", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_shopPayInstallmentsPricing(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_shopPayInstallmentsPricing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShopPayInstallmentsPricing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayInstallmentsPricing)
	fc.Result = res
	return ec.marshalOShopPayInstallmentsPricing2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsPricing(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_shopPayInstallmentsPricing(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "financingPlans":
				return ec.fieldContext_ShopPayInstallmentsPricing_financingPlans(ctx, field)
			case "maxPrice":
				return ec.fieldContext_ShopPayInstallmentsPricing_maxPrice(ctx, field)
			case "minPrice":
				return ec.fieldContext_ShopPayInstallmentsPricing_minPrice(ctx, field)
			case "productVariantPricing":
				return ec.fieldContext_ShopPayInstallmentsPricing_productVariantPricing(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayInstallmentsPricing", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_sitemap(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_sitemap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sitemap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Sitemap)
	fc.Result = res
	return ec.marshalNSitemap2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_sitemap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pagesCount":
				return ec.fieldContext_Sitemap_pagesCount(ctx, field)
			case "resources":
				return ec.fieldContext_Sitemap_resources(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sitemap", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_sitemap_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _QueryRoot_urlRedirects(ctx context.Context, field graphql.CollectedField, obj *model.QueryRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryRoot_urlRedirects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URLRedirects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.URLRedirectConnection)
	fc.Result = res
	return ec.marshalNUrlRedirectConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirectConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryRoot_urlRedirects(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryRoot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UrlRedirectConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_UrlRedirectConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UrlRedirectConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UrlRedirectConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryRoot_urlRedirects_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SEO_description(ctx context.Context, field graphql.CollectedField, obj *model.Seo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SEO_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SEO_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SEO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SEO_title(ctx context.Context, field graphql.CollectedField, obj *model.Seo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SEO_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SEO_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SEO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScriptDiscountApplication_allocationMethod(ctx context.Context, field graphql.CollectedField, obj *model.ScriptDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScriptDiscountApplication_allocationMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllocationMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationAllocationMethod)
	fc.Result = res
	return ec.marshalNDiscountApplicationAllocationMethod2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationAllocationMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScriptDiscountApplication_allocationMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScriptDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationAllocationMethod does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScriptDiscountApplication_targetSelection(ctx context.Context, field graphql.CollectedField, obj *model.ScriptDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScriptDiscountApplication_targetSelection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetSelection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetSelection)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetSelection2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScriptDiscountApplication_targetSelection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScriptDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetSelection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScriptDiscountApplication_targetType(ctx context.Context, field graphql.CollectedField, obj *model.ScriptDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScriptDiscountApplication_targetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DiscountApplicationTargetType)
	fc.Result = res
	return ec.marshalNDiscountApplicationTargetType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScriptDiscountApplication_targetType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScriptDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscountApplicationTargetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScriptDiscountApplication_title(ctx context.Context, field graphql.CollectedField, obj *model.ScriptDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScriptDiscountApplication_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScriptDiscountApplication_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScriptDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScriptDiscountApplication_value(ctx context.Context, field graphql.CollectedField, obj *model.ScriptDiscountApplication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScriptDiscountApplication_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PricingValue)
	fc.Result = res
	return ec.marshalNPricingValue2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPricingValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScriptDiscountApplication_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScriptDiscountApplication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PricingValue does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchQuerySuggestion_styledText(ctx context.Context, field graphql.CollectedField, obj *model.SearchQuerySuggestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchQuerySuggestion_styledText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StyledText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchQuerySuggestion_styledText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchQuerySuggestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchQuerySuggestion_text(ctx context.Context, field graphql.CollectedField, obj *model.SearchQuerySuggestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchQuerySuggestion_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchQuerySuggestion_text(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchQuerySuggestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchQuerySuggestion_trackingParameters(ctx context.Context, field graphql.CollectedField, obj *model.SearchQuerySuggestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchQuerySuggestion_trackingParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrackingParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchQuerySuggestion_trackingParameters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchQuerySuggestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultItemConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.SearchResultItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultItemConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SearchResultItemEdge)
	fc.Result = res
	return ec.marshalNSearchResultItemEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItemEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultItemConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_SearchResultItemEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_SearchResultItemEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchResultItemEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultItemConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SearchResultItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultItemConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.SearchResultItem)
	fc.Result = res
	return ec.marshalNSearchResultItem2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultItemConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SearchResultItem does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.SearchResultItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultItemConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultItemConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultItemConnection_productFilters(ctx context.Context, field graphql.CollectedField, obj *model.SearchResultItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultItemConnection_productFilters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductFilters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Filter)
	fc.Result = res
	return ec.marshalNFilter2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultItemConnection_productFilters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Filter_id(ctx, field)
			case "label":
				return ec.fieldContext_Filter_label(ctx, field)
			case "presentation":
				return ec.fieldContext_Filter_presentation(ctx, field)
			case "type":
				return ec.fieldContext_Filter_type(ctx, field)
			case "values":
				return ec.fieldContext_Filter_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Filter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultItemConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.SearchResultItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultItemConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultItemConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultItemEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.SearchResultItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultItemEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultItemEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultItemEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.SearchResultItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultItemEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SearchResultItem)
	fc.Result = res
	return ec.marshalNSearchResultItem2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultItemEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SearchResultItem does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SelectedOption_name(ctx context.Context, field graphql.CollectedField, obj *model.SelectedOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SelectedOption_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SelectedOption_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SelectedOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SelectedOption_value(ctx context.Context, field graphql.CollectedField, obj *model.SelectedOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SelectedOption_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SelectedOption_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SelectedOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_billingPolicy(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_billingPolicy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.SellingPlanBillingPolicy)
	fc.Result = res
	return ec.marshalOSellingPlanBillingPolicy2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanBillingPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_billingPolicy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SellingPlanBillingPolicy does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_checkoutCharge(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_checkoutCharge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutCharge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SellingPlanCheckoutCharge)
	fc.Result = res
	return ec.marshalNSellingPlanCheckoutCharge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanCheckoutCharge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_checkoutCharge(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_SellingPlanCheckoutCharge_type(ctx, field)
			case "value":
				return ec.fieldContext_SellingPlanCheckoutCharge_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanCheckoutCharge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_deliveryPolicy(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_deliveryPolicy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.SellingPlanDeliveryPolicy)
	fc.Result = res
	return ec.marshalOSellingPlanDeliveryPolicy2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanDeliveryPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_deliveryPolicy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SellingPlanDeliveryPolicy does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_description(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_id(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_metafield(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SellingPlan_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_metafields(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SellingPlan_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_name(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_options(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SellingPlanOption)
	fc.Result = res
	return ec.marshalNSellingPlanOption2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_SellingPlanOption_name(ctx, field)
			case "value":
				return ec.fieldContext_SellingPlanOption_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_priceAdjustments(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_priceAdjustments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SellingPlanPriceAdjustment)
	fc.Result = res
	return ec.marshalNSellingPlanPriceAdjustment2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanPriceAdjustmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_priceAdjustments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adjustmentValue":
				return ec.fieldContext_SellingPlanPriceAdjustment_adjustmentValue(ctx, field)
			case "orderCount":
				return ec.fieldContext_SellingPlanPriceAdjustment_orderCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanPriceAdjustment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlan_recurringDeliveries(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlan_recurringDeliveries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecurringDeliveries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlan_recurringDeliveries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocation_checkoutChargeAmount(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocation_checkoutChargeAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutChargeAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocation_checkoutChargeAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocation_priceAdjustments(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocation_priceAdjustments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SellingPlanAllocationPriceAdjustment)
	fc.Result = res
	return ec.marshalNSellingPlanAllocationPriceAdjustment2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationPriceAdjustmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocation_priceAdjustments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "compareAtPrice":
				return ec.fieldContext_SellingPlanAllocationPriceAdjustment_compareAtPrice(ctx, field)
			case "perDeliveryPrice":
				return ec.fieldContext_SellingPlanAllocationPriceAdjustment_perDeliveryPrice(ctx, field)
			case "price":
				return ec.fieldContext_SellingPlanAllocationPriceAdjustment_price(ctx, field)
			case "unitPrice":
				return ec.fieldContext_SellingPlanAllocationPriceAdjustment_unitPrice(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanAllocationPriceAdjustment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocation_remainingBalanceChargeAmount(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocation_remainingBalanceChargeAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemainingBalanceChargeAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocation_remainingBalanceChargeAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocation_sellingPlan(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocation_sellingPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellingPlan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SellingPlan)
	fc.Result = res
	return ec.marshalNSellingPlan2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocation_sellingPlan(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "billingPolicy":
				return ec.fieldContext_SellingPlan_billingPolicy(ctx, field)
			case "checkoutCharge":
				return ec.fieldContext_SellingPlan_checkoutCharge(ctx, field)
			case "deliveryPolicy":
				return ec.fieldContext_SellingPlan_deliveryPolicy(ctx, field)
			case "description":
				return ec.fieldContext_SellingPlan_description(ctx, field)
			case "id":
				return ec.fieldContext_SellingPlan_id(ctx, field)
			case "metafield":
				return ec.fieldContext_SellingPlan_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_SellingPlan_metafields(ctx, field)
			case "name":
				return ec.fieldContext_SellingPlan_name(ctx, field)
			case "options":
				return ec.fieldContext_SellingPlan_options(ctx, field)
			case "priceAdjustments":
				return ec.fieldContext_SellingPlan_priceAdjustments(ctx, field)
			case "recurringDeliveries":
				return ec.fieldContext_SellingPlan_recurringDeliveries(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocationConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SellingPlanAllocationEdge)
	fc.Result = res
	return ec.marshalNSellingPlanAllocationEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocationConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_SellingPlanAllocationEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_SellingPlanAllocationEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanAllocationEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocationConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocationConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SellingPlanAllocation)
	fc.Result = res
	return ec.marshalNSellingPlanAllocation2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocationConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkoutChargeAmount":
				return ec.fieldContext_SellingPlanAllocation_checkoutChargeAmount(ctx, field)
			case "priceAdjustments":
				return ec.fieldContext_SellingPlanAllocation_priceAdjustments(ctx, field)
			case "remainingBalanceChargeAmount":
				return ec.fieldContext_SellingPlanAllocation_remainingBalanceChargeAmount(ctx, field)
			case "sellingPlan":
				return ec.fieldContext_SellingPlanAllocation_sellingPlan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanAllocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocationConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocationConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocationEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocationEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocationEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocationEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SellingPlanAllocation)
	fc.Result = res
	return ec.marshalNSellingPlanAllocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocationEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkoutChargeAmount":
				return ec.fieldContext_SellingPlanAllocation_checkoutChargeAmount(ctx, field)
			case "priceAdjustments":
				return ec.fieldContext_SellingPlanAllocation_priceAdjustments(ctx, field)
			case "remainingBalanceChargeAmount":
				return ec.fieldContext_SellingPlanAllocation_remainingBalanceChargeAmount(ctx, field)
			case "sellingPlan":
				return ec.fieldContext_SellingPlanAllocation_sellingPlan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanAllocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocationPriceAdjustment_compareAtPrice(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocationPriceAdjustment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocationPriceAdjustment_compareAtPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompareAtPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocationPriceAdjustment_compareAtPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocationPriceAdjustment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocationPriceAdjustment_perDeliveryPrice(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocationPriceAdjustment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocationPriceAdjustment_perDeliveryPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerDeliveryPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocationPriceAdjustment_perDeliveryPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocationPriceAdjustment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocationPriceAdjustment_price(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocationPriceAdjustment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocationPriceAdjustment_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocationPriceAdjustment_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocationPriceAdjustment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanAllocationPriceAdjustment_unitPrice(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanAllocationPriceAdjustment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanAllocationPriceAdjustment_unitPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanAllocationPriceAdjustment_unitPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanAllocationPriceAdjustment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanCheckoutCharge_type(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanCheckoutCharge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanCheckoutCharge_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SellingPlanCheckoutChargeType)
	fc.Result = res
	return ec.marshalNSellingPlanCheckoutChargeType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanCheckoutChargeType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanCheckoutCharge_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanCheckoutCharge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SellingPlanCheckoutChargeType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanCheckoutCharge_value(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanCheckoutCharge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanCheckoutCharge_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SellingPlanCheckoutChargeValue)
	fc.Result = res
	return ec.marshalNSellingPlanCheckoutChargeValue2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanCheckoutChargeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanCheckoutCharge_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanCheckoutCharge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SellingPlanCheckoutChargeValue does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanCheckoutChargePercentageValue_percentage(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanCheckoutChargePercentageValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanCheckoutChargePercentageValue_percentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanCheckoutChargePercentageValue_percentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanCheckoutChargePercentageValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SellingPlanEdge)
	fc.Result = res
	return ec.marshalNSellingPlanEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_SellingPlanEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_SellingPlanEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SellingPlan)
	fc.Result = res
	return ec.marshalNSellingPlan2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "billingPolicy":
				return ec.fieldContext_SellingPlan_billingPolicy(ctx, field)
			case "checkoutCharge":
				return ec.fieldContext_SellingPlan_checkoutCharge(ctx, field)
			case "deliveryPolicy":
				return ec.fieldContext_SellingPlan_deliveryPolicy(ctx, field)
			case "description":
				return ec.fieldContext_SellingPlan_description(ctx, field)
			case "id":
				return ec.fieldContext_SellingPlan_id(ctx, field)
			case "metafield":
				return ec.fieldContext_SellingPlan_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_SellingPlan_metafields(ctx, field)
			case "name":
				return ec.fieldContext_SellingPlan_name(ctx, field)
			case "options":
				return ec.fieldContext_SellingPlan_options(ctx, field)
			case "priceAdjustments":
				return ec.fieldContext_SellingPlan_priceAdjustments(ctx, field)
			case "recurringDeliveries":
				return ec.fieldContext_SellingPlan_recurringDeliveries(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SellingPlan)
	fc.Result = res
	return ec.marshalNSellingPlan2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "billingPolicy":
				return ec.fieldContext_SellingPlan_billingPolicy(ctx, field)
			case "checkoutCharge":
				return ec.fieldContext_SellingPlan_checkoutCharge(ctx, field)
			case "deliveryPolicy":
				return ec.fieldContext_SellingPlan_deliveryPolicy(ctx, field)
			case "description":
				return ec.fieldContext_SellingPlan_description(ctx, field)
			case "id":
				return ec.fieldContext_SellingPlan_id(ctx, field)
			case "metafield":
				return ec.fieldContext_SellingPlan_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_SellingPlan_metafields(ctx, field)
			case "name":
				return ec.fieldContext_SellingPlan_name(ctx, field)
			case "options":
				return ec.fieldContext_SellingPlan_options(ctx, field)
			case "priceAdjustments":
				return ec.fieldContext_SellingPlan_priceAdjustments(ctx, field)
			case "recurringDeliveries":
				return ec.fieldContext_SellingPlan_recurringDeliveries(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanFixedAmountPriceAdjustment_adjustmentAmount(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanFixedAmountPriceAdjustment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanFixedAmountPriceAdjustment_adjustmentAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdjustmentAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanFixedAmountPriceAdjustment_adjustmentAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanFixedAmountPriceAdjustment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanFixedPriceAdjustment_price(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanFixedPriceAdjustment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanFixedPriceAdjustment_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanFixedPriceAdjustment_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanFixedPriceAdjustment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroup_appName(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroup_appName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroup_appName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroup_name(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroup_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroup_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroup_options(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroup_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SellingPlanGroupOption)
	fc.Result = res
	return ec.marshalNSellingPlanGroupOption2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroup_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_SellingPlanGroupOption_name(ctx, field)
			case "values":
				return ec.fieldContext_SellingPlanGroupOption_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanGroupOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroup_sellingPlans(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroup_sellingPlans(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellingPlans, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SellingPlanConnection)
	fc.Result = res
	return ec.marshalNSellingPlanConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroup_sellingPlans(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SellingPlanConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_SellingPlanConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SellingPlanConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SellingPlanGroup_sellingPlans_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroupConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroupConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroupConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SellingPlanGroupEdge)
	fc.Result = res
	return ec.marshalNSellingPlanGroupEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroupConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroupConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_SellingPlanGroupEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_SellingPlanGroupEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanGroupEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroupConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroupConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroupConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SellingPlanGroup)
	fc.Result = res
	return ec.marshalNSellingPlanGroup2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroupConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroupConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appName":
				return ec.fieldContext_SellingPlanGroup_appName(ctx, field)
			case "name":
				return ec.fieldContext_SellingPlanGroup_name(ctx, field)
			case "options":
				return ec.fieldContext_SellingPlanGroup_options(ctx, field)
			case "sellingPlans":
				return ec.fieldContext_SellingPlanGroup_sellingPlans(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroupConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroupConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroupConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroupConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroupConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroupEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroupEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroupEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroupEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroupEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroupEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroupEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroupEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SellingPlanGroup)
	fc.Result = res
	return ec.marshalNSellingPlanGroup2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroupEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroupEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appName":
				return ec.fieldContext_SellingPlanGroup_appName(ctx, field)
			case "name":
				return ec.fieldContext_SellingPlanGroup_name(ctx, field)
			case "options":
				return ec.fieldContext_SellingPlanGroup_options(ctx, field)
			case "sellingPlans":
				return ec.fieldContext_SellingPlanGroup_sellingPlans(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SellingPlanGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroupOption_name(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroupOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroupOption_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroupOption_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroupOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanGroupOption_values(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanGroupOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanGroupOption_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanGroupOption_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanGroupOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanOption_name(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanOption_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanOption_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanOption_value(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanOption_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanOption_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanPercentagePriceAdjustment_adjustmentPercentage(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanPercentagePriceAdjustment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanPercentagePriceAdjustment_adjustmentPercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdjustmentPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanPercentagePriceAdjustment_adjustmentPercentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanPercentagePriceAdjustment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanPriceAdjustment_adjustmentValue(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanPriceAdjustment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanPriceAdjustment_adjustmentValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdjustmentValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SellingPlanPriceAdjustmentValue)
	fc.Result = res
	return ec.marshalNSellingPlanPriceAdjustmentValue2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanPriceAdjustmentValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanPriceAdjustment_adjustmentValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanPriceAdjustment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SellingPlanPriceAdjustmentValue does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanPriceAdjustment_orderCount(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanPriceAdjustment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanPriceAdjustment_orderCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanPriceAdjustment_orderCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanPriceAdjustment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanRecurringBillingPolicy_interval(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanRecurringBillingPolicy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanRecurringBillingPolicy_interval(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SellingPlanInterval)
	fc.Result = res
	return ec.marshalNSellingPlanInterval2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanInterval(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanRecurringBillingPolicy_interval(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanRecurringBillingPolicy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SellingPlanInterval does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanRecurringBillingPolicy_intervalCount(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanRecurringBillingPolicy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanRecurringBillingPolicy_intervalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntervalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanRecurringBillingPolicy_intervalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanRecurringBillingPolicy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanRecurringDeliveryPolicy_interval(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanRecurringDeliveryPolicy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanRecurringDeliveryPolicy_interval(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SellingPlanInterval)
	fc.Result = res
	return ec.marshalNSellingPlanInterval2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanInterval(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanRecurringDeliveryPolicy_interval(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanRecurringDeliveryPolicy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SellingPlanInterval does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SellingPlanRecurringDeliveryPolicy_intervalCount(ctx context.Context, field graphql.CollectedField, obj *model.SellingPlanRecurringDeliveryPolicy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SellingPlanRecurringDeliveryPolicy_intervalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntervalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SellingPlanRecurringDeliveryPolicy_intervalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SellingPlanRecurringDeliveryPolicy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShippingRate_handle(ctx context.Context, field graphql.CollectedField, obj *model.ShippingRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShippingRate_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShippingRate_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShippingRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShippingRate_price(ctx context.Context, field graphql.CollectedField, obj *model.ShippingRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShippingRate_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShippingRate_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShippingRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShippingRate_priceV2(ctx context.Context, field graphql.CollectedField, obj *model.ShippingRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShippingRate_priceV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShippingRate_priceV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShippingRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShippingRate_title(ctx context.Context, field graphql.CollectedField, obj *model.ShippingRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShippingRate_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShippingRate_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShippingRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_brand(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_brand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Brand)
	fc.Result = res
	return ec.marshalOBrand2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBrand(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_brand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "colors":
				return ec.fieldContext_Brand_colors(ctx, field)
			case "coverImage":
				return ec.fieldContext_Brand_coverImage(ctx, field)
			case "logo":
				return ec.fieldContext_Brand_logo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Brand_shortDescription(ctx, field)
			case "slogan":
				return ec.fieldContext_Brand_slogan(ctx, field)
			case "squareLogo":
				return ec.fieldContext_Brand_squareLogo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Brand", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_customerAccountUrl(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_customerAccountUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerAccountURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_customerAccountUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_description(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_id(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_metafield(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_metafield(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafield, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Metafield)
	fc.Result = res
	return ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_metafield(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Shop_metafield_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Shop_metafields(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_metafields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metafields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Metafield)
	fc.Result = res
	return ec.marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_metafields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Metafield_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Metafield_description(ctx, field)
			case "id":
				return ec.fieldContext_Metafield_id(ctx, field)
			case "key":
				return ec.fieldContext_Metafield_key(ctx, field)
			case "namespace":
				return ec.fieldContext_Metafield_namespace(ctx, field)
			case "parentResource":
				return ec.fieldContext_Metafield_parentResource(ctx, field)
			case "reference":
				return ec.fieldContext_Metafield_reference(ctx, field)
			case "references":
				return ec.fieldContext_Metafield_references(ctx, field)
			case "type":
				return ec.fieldContext_Metafield_type(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Metafield_updatedAt(ctx, field)
			case "value":
				return ec.fieldContext_Metafield_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metafield", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Shop_metafields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Shop_moneyFormat(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_moneyFormat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MoneyFormat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_moneyFormat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_name(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_paymentSettings(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_paymentSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentSettings)
	fc.Result = res
	return ec.marshalNPaymentSettings2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPaymentSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_paymentSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acceptedCardBrands":
				return ec.fieldContext_PaymentSettings_acceptedCardBrands(ctx, field)
			case "cardVaultUrl":
				return ec.fieldContext_PaymentSettings_cardVaultUrl(ctx, field)
			case "countryCode":
				return ec.fieldContext_PaymentSettings_countryCode(ctx, field)
			case "currencyCode":
				return ec.fieldContext_PaymentSettings_currencyCode(ctx, field)
			case "enabledPresentmentCurrencies":
				return ec.fieldContext_PaymentSettings_enabledPresentmentCurrencies(ctx, field)
			case "shopifyPaymentsAccountId":
				return ec.fieldContext_PaymentSettings_shopifyPaymentsAccountId(ctx, field)
			case "supportedDigitalWallets":
				return ec.fieldContext_PaymentSettings_supportedDigitalWallets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymentSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_primaryDomain(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_primaryDomain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryDomain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Domain)
	fc.Result = res
	return ec.marshalNDomain2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDomain(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_primaryDomain(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_Domain_host(ctx, field)
			case "sslEnabled":
				return ec.fieldContext_Domain_sslEnabled(ctx, field)
			case "url":
				return ec.fieldContext_Domain_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Domain", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_privacyPolicy(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_privacyPolicy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivacyPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPolicy)
	fc.Result = res
	return ec.marshalOShopPolicy2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_privacyPolicy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "body":
				return ec.fieldContext_ShopPolicy_body(ctx, field)
			case "handle":
				return ec.fieldContext_ShopPolicy_handle(ctx, field)
			case "id":
				return ec.fieldContext_ShopPolicy_id(ctx, field)
			case "title":
				return ec.fieldContext_ShopPolicy_title(ctx, field)
			case "url":
				return ec.fieldContext_ShopPolicy_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPolicy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_refundPolicy(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_refundPolicy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefundPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPolicy)
	fc.Result = res
	return ec.marshalOShopPolicy2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_refundPolicy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "body":
				return ec.fieldContext_ShopPolicy_body(ctx, field)
			case "handle":
				return ec.fieldContext_ShopPolicy_handle(ctx, field)
			case "id":
				return ec.fieldContext_ShopPolicy_id(ctx, field)
			case "title":
				return ec.fieldContext_ShopPolicy_title(ctx, field)
			case "url":
				return ec.fieldContext_ShopPolicy_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPolicy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_shippingPolicy(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_shippingPolicy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPolicy)
	fc.Result = res
	return ec.marshalOShopPolicy2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_shippingPolicy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "body":
				return ec.fieldContext_ShopPolicy_body(ctx, field)
			case "handle":
				return ec.fieldContext_ShopPolicy_handle(ctx, field)
			case "id":
				return ec.fieldContext_ShopPolicy_id(ctx, field)
			case "title":
				return ec.fieldContext_ShopPolicy_title(ctx, field)
			case "url":
				return ec.fieldContext_ShopPolicy_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPolicy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_shipsToCountries(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_shipsToCountries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipsToCountries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CountryCode)
	fc.Result = res
	return ec.marshalNCountryCode2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_shipsToCountries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CountryCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_shopPayInstallmentsPricing(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_shopPayInstallmentsPricing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShopPayInstallmentsPricing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayInstallmentsPricing)
	fc.Result = res
	return ec.marshalOShopPayInstallmentsPricing2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsPricing(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_shopPayInstallmentsPricing(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "financingPlans":
				return ec.fieldContext_ShopPayInstallmentsPricing_financingPlans(ctx, field)
			case "maxPrice":
				return ec.fieldContext_ShopPayInstallmentsPricing_maxPrice(ctx, field)
			case "minPrice":
				return ec.fieldContext_ShopPayInstallmentsPricing_minPrice(ctx, field)
			case "productVariantPricing":
				return ec.fieldContext_ShopPayInstallmentsPricing_productVariantPricing(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayInstallmentsPricing", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_subscriptionPolicy(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_subscriptionPolicy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPolicyWithDefault)
	fc.Result = res
	return ec.marshalOShopPolicyWithDefault2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPolicyWithDefault(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_subscriptionPolicy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "body":
				return ec.fieldContext_ShopPolicyWithDefault_body(ctx, field)
			case "handle":
				return ec.fieldContext_ShopPolicyWithDefault_handle(ctx, field)
			case "id":
				return ec.fieldContext_ShopPolicyWithDefault_id(ctx, field)
			case "title":
				return ec.fieldContext_ShopPolicyWithDefault_title(ctx, field)
			case "url":
				return ec.fieldContext_ShopPolicyWithDefault_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPolicyWithDefault", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Shop_termsOfService(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Shop_termsOfService(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TermsOfService, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPolicy)
	fc.Result = res
	return ec.marshalOShopPolicy2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Shop_termsOfService(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "body":
				return ec.fieldContext_ShopPolicy_body(ctx, field)
			case "handle":
				return ec.fieldContext_ShopPolicy_handle(ctx, field)
			case "id":
				return ec.fieldContext_ShopPolicy_id(ctx, field)
			case "title":
				return ec.fieldContext_ShopPolicy_title(ctx, field)
			case "url":
				return ec.fieldContext_ShopPolicy_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPolicy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlan_id(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsFinancingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsFinancingPlan_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsFinancingPlan_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsFinancingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlan_maxPrice(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsFinancingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsFinancingPlan_maxPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsFinancingPlan_maxPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsFinancingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlan_minPrice(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsFinancingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsFinancingPlan_minPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsFinancingPlan_minPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsFinancingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlan_terms(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsFinancingPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsFinancingPlan_terms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Terms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ShopPayInstallmentsFinancingPlanTerm)
	fc.Result = res
	return ec.marshalNShopPayInstallmentsFinancingPlanTerm2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlanTermᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsFinancingPlan_terms(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsFinancingPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "apr":
				return ec.fieldContext_ShopPayInstallmentsFinancingPlanTerm_apr(ctx, field)
			case "frequency":
				return ec.fieldContext_ShopPayInstallmentsFinancingPlanTerm_frequency(ctx, field)
			case "id":
				return ec.fieldContext_ShopPayInstallmentsFinancingPlanTerm_id(ctx, field)
			case "installmentsCount":
				return ec.fieldContext_ShopPayInstallmentsFinancingPlanTerm_installmentsCount(ctx, field)
			case "loanType":
				return ec.fieldContext_ShopPayInstallmentsFinancingPlanTerm_loanType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayInstallmentsFinancingPlanTerm", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlanTerm_apr(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsFinancingPlanTerm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsFinancingPlanTerm_apr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Apr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsFinancingPlanTerm_apr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsFinancingPlanTerm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlanTerm_frequency(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsFinancingPlanTerm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsFinancingPlanTerm_frequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Frequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ShopPayInstallmentsFinancingPlanFrequency)
	fc.Result = res
	return ec.marshalNShopPayInstallmentsFinancingPlanFrequency2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlanFrequency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsFinancingPlanTerm_frequency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsFinancingPlanTerm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ShopPayInstallmentsFinancingPlanFrequency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlanTerm_id(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsFinancingPlanTerm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsFinancingPlanTerm_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsFinancingPlanTerm_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsFinancingPlanTerm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlanTerm_installmentsCount(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsFinancingPlanTerm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsFinancingPlanTerm_installmentsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallmentsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Count)
	fc.Result = res
	return ec.marshalOCount2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsFinancingPlanTerm_installmentsCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsFinancingPlanTerm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_Count_count(ctx, field)
			case "precision":
				return ec.fieldContext_Count_precision(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Count", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlanTerm_loanType(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsFinancingPlanTerm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsFinancingPlanTerm_loanType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoanType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ShopPayInstallmentsLoan)
	fc.Result = res
	return ec.marshalNShopPayInstallmentsLoan2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsLoan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsFinancingPlanTerm_loanType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsFinancingPlanTerm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ShopPayInstallmentsLoan does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsPricing_financingPlans(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsPricing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsPricing_financingPlans(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinancingPlans, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ShopPayInstallmentsFinancingPlan)
	fc.Result = res
	return ec.marshalNShopPayInstallmentsFinancingPlan2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsPricing_financingPlans(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsPricing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ShopPayInstallmentsFinancingPlan_id(ctx, field)
			case "maxPrice":
				return ec.fieldContext_ShopPayInstallmentsFinancingPlan_maxPrice(ctx, field)
			case "minPrice":
				return ec.fieldContext_ShopPayInstallmentsFinancingPlan_minPrice(ctx, field)
			case "terms":
				return ec.fieldContext_ShopPayInstallmentsFinancingPlan_terms(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayInstallmentsFinancingPlan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsPricing_maxPrice(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsPricing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsPricing_maxPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsPricing_maxPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsPricing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsPricing_minPrice(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsPricing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsPricing_minPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsPricing_minPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsPricing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsPricing_productVariantPricing(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsPricing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsPricing_productVariantPricing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductVariantPricing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayInstallmentsProductVariantPricing)
	fc.Result = res
	return ec.marshalOShopPayInstallmentsProductVariantPricing2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsProductVariantPricing(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsPricing_productVariantPricing(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsPricing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "available":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_available(ctx, field)
			case "eligible":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_eligible(ctx, field)
			case "fullPrice":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_fullPrice(ctx, field)
			case "id":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_id(ctx, field)
			case "installmentsCount":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_installmentsCount(ctx, field)
			case "pricePerTerm":
				return ec.fieldContext_ShopPayInstallmentsProductVariantPricing_pricePerTerm(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayInstallmentsProductVariantPricing", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ShopPayInstallmentsPricing_productVariantPricing_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsProductVariantPricing_available(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsProductVariantPricing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsProductVariantPricing_available(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Available, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsProductVariantPricing_available(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsProductVariantPricing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsProductVariantPricing_eligible(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsProductVariantPricing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsProductVariantPricing_eligible(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Eligible, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsProductVariantPricing_eligible(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsProductVariantPricing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsProductVariantPricing_fullPrice(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsProductVariantPricing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsProductVariantPricing_fullPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsProductVariantPricing_fullPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsProductVariantPricing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsProductVariantPricing_id(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsProductVariantPricing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsProductVariantPricing_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsProductVariantPricing_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsProductVariantPricing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsProductVariantPricing_installmentsCount(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsProductVariantPricing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsProductVariantPricing_installmentsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallmentsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Count)
	fc.Result = res
	return ec.marshalOCount2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsProductVariantPricing_installmentsCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsProductVariantPricing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_Count_count(ctx, field)
			case "precision":
				return ec.fieldContext_Count_precision(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Count", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayInstallmentsProductVariantPricing_pricePerTerm(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayInstallmentsProductVariantPricing) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayInstallmentsProductVariantPricing_pricePerTerm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PricePerTerm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayInstallmentsProductVariantPricing_pricePerTerm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayInstallmentsProductVariantPricing",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_deliveryMethods(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_deliveryMethods(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryMethods, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ShopPayPaymentRequestDeliveryMethod)
	fc.Result = res
	return ec.marshalNShopPayPaymentRequestDeliveryMethod2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_deliveryMethods(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_amount(ctx, field)
			case "code":
				return ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_code(ctx, field)
			case "deliveryExpectationLabel":
				return ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_deliveryExpectationLabel(ctx, field)
			case "detail":
				return ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_detail(ctx, field)
			case "label":
				return ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_label(ctx, field)
			case "maxDeliveryDate":
				return ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_maxDeliveryDate(ctx, field)
			case "minDeliveryDate":
				return ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_minDeliveryDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestDeliveryMethod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_discountCodes(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_discountCodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountCodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_discountCodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_discounts(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_discounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ShopPayPaymentRequestDiscount)
	fc.Result = res
	return ec.marshalOShopPayPaymentRequestDiscount2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_discounts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_ShopPayPaymentRequestDiscount_amount(ctx, field)
			case "label":
				return ec.fieldContext_ShopPayPaymentRequestDiscount_label(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestDiscount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_lineItems(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_lineItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ShopPayPaymentRequestLineItem)
	fc.Result = res
	return ec.marshalNShopPayPaymentRequestLineItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestLineItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_lineItems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "finalItemPrice":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_finalItemPrice(ctx, field)
			case "finalLinePrice":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_finalLinePrice(ctx, field)
			case "image":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_image(ctx, field)
			case "itemDiscounts":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_itemDiscounts(ctx, field)
			case "label":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_label(ctx, field)
			case "lineDiscounts":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_lineDiscounts(ctx, field)
			case "originalItemPrice":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_originalItemPrice(ctx, field)
			case "originalLinePrice":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_originalLinePrice(ctx, field)
			case "quantity":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_quantity(ctx, field)
			case "requiresShipping":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_requiresShipping(ctx, field)
			case "sku":
				return ec.fieldContext_ShopPayPaymentRequestLineItem_sku(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_locale(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_locale(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_presentmentCurrency(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_presentmentCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PresentmentCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CurrencyCode)
	fc.Result = res
	return ec.marshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_presentmentCurrency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CurrencyCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_selectedDeliveryMethodType(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_selectedDeliveryMethodType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedDeliveryMethodType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ShopPayPaymentRequestDeliveryMethodType)
	fc.Result = res
	return ec.marshalNShopPayPaymentRequestDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_selectedDeliveryMethodType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ShopPayPaymentRequestDeliveryMethodType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_shippingAddress(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_shippingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayPaymentRequestContactField)
	fc.Result = res
	return ec.marshalOShopPayPaymentRequestContactField2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestContactField(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_shippingAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address1":
				return ec.fieldContext_ShopPayPaymentRequestContactField_address1(ctx, field)
			case "address2":
				return ec.fieldContext_ShopPayPaymentRequestContactField_address2(ctx, field)
			case "city":
				return ec.fieldContext_ShopPayPaymentRequestContactField_city(ctx, field)
			case "companyName":
				return ec.fieldContext_ShopPayPaymentRequestContactField_companyName(ctx, field)
			case "countryCode":
				return ec.fieldContext_ShopPayPaymentRequestContactField_countryCode(ctx, field)
			case "email":
				return ec.fieldContext_ShopPayPaymentRequestContactField_email(ctx, field)
			case "firstName":
				return ec.fieldContext_ShopPayPaymentRequestContactField_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_ShopPayPaymentRequestContactField_lastName(ctx, field)
			case "phone":
				return ec.fieldContext_ShopPayPaymentRequestContactField_phone(ctx, field)
			case "postalCode":
				return ec.fieldContext_ShopPayPaymentRequestContactField_postalCode(ctx, field)
			case "provinceCode":
				return ec.fieldContext_ShopPayPaymentRequestContactField_provinceCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestContactField", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_shippingLines(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_shippingLines(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingLines, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ShopPayPaymentRequestShippingLine)
	fc.Result = res
	return ec.marshalNShopPayPaymentRequestShippingLine2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestShippingLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_shippingLines(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_ShopPayPaymentRequestShippingLine_amount(ctx, field)
			case "code":
				return ec.fieldContext_ShopPayPaymentRequestShippingLine_code(ctx, field)
			case "label":
				return ec.fieldContext_ShopPayPaymentRequestShippingLine_label(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestShippingLine", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_subtotal(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_subtotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subtotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_subtotal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_total(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_totalShippingPrice(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_totalShippingPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalShippingPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayPaymentRequestTotalShippingPrice)
	fc.Result = res
	return ec.marshalOShopPayPaymentRequestTotalShippingPrice2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestTotalShippingPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_totalShippingPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "discounts":
				return ec.fieldContext_ShopPayPaymentRequestTotalShippingPrice_discounts(ctx, field)
			case "finalTotal":
				return ec.fieldContext_ShopPayPaymentRequestTotalShippingPrice_finalTotal(ctx, field)
			case "originalTotal":
				return ec.fieldContext_ShopPayPaymentRequestTotalShippingPrice_originalTotal(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestTotalShippingPrice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequest_totalTax(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequest_totalTax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequest_totalTax(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_address1(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_address1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_address1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_address2(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_address2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_address2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_city(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_companyName(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_companyName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_companyName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_countryCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_email(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_firstName(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_lastName(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_phone(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_postalCode(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_postalCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_postalCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestContactField_provinceCode(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestContactField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestContactField_provinceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestContactField_provinceCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestContactField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestDeliveryMethod_amount(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestDeliveryMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestDeliveryMethod_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestDeliveryMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestDeliveryMethod_code(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestDeliveryMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestDeliveryMethod_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestDeliveryMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestDeliveryMethod_deliveryExpectationLabel(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestDeliveryMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_deliveryExpectationLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryExpectationLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestDeliveryMethod_deliveryExpectationLabel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestDeliveryMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestDeliveryMethod_detail(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestDeliveryMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_detail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Detail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestDeliveryMethod_detail(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestDeliveryMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestDeliveryMethod_label(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestDeliveryMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestDeliveryMethod_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestDeliveryMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestDeliveryMethod_maxDeliveryDate(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestDeliveryMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_maxDeliveryDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDeliveryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOISO8601DateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestDeliveryMethod_maxDeliveryDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestDeliveryMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ISO8601DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestDeliveryMethod_minDeliveryDate(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestDeliveryMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestDeliveryMethod_minDeliveryDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinDeliveryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOISO8601DateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestDeliveryMethod_minDeliveryDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestDeliveryMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ISO8601DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestDiscount_amount(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestDiscount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestDiscount_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestDiscount_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestDiscount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestDiscount_label(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestDiscount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestDiscount_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestDiscount_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestDiscount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestImage_alt(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestImage_alt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestImage_alt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestImage_url(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestImage_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestImage_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_finalItemPrice(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_finalItemPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinalItemPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_finalItemPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_finalLinePrice(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_finalLinePrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinalLinePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_finalLinePrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_image(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayPaymentRequestImage)
	fc.Result = res
	return ec.marshalOShopPayPaymentRequestImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alt":
				return ec.fieldContext_ShopPayPaymentRequestImage_alt(ctx, field)
			case "url":
				return ec.fieldContext_ShopPayPaymentRequestImage_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_itemDiscounts(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_itemDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemDiscounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ShopPayPaymentRequestDiscount)
	fc.Result = res
	return ec.marshalOShopPayPaymentRequestDiscount2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_itemDiscounts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_ShopPayPaymentRequestDiscount_amount(ctx, field)
			case "label":
				return ec.fieldContext_ShopPayPaymentRequestDiscount_label(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestDiscount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_label(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_lineDiscounts(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_lineDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineDiscounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ShopPayPaymentRequestDiscount)
	fc.Result = res
	return ec.marshalOShopPayPaymentRequestDiscount2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_lineDiscounts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_ShopPayPaymentRequestDiscount_amount(ctx, field)
			case "label":
				return ec.fieldContext_ShopPayPaymentRequestDiscount_label(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestDiscount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_originalItemPrice(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_originalItemPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalItemPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_originalItemPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_originalLinePrice(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_originalLinePrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalLinePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_originalLinePrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_quantity(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_quantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_requiresShipping(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_requiresShipping(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiresShipping, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_requiresShipping(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestLineItem_sku(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestLineItem_sku(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sku, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestLineItem_sku(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestReceipt_paymentRequest(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestReceipt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestReceipt_paymentRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentRequest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayPaymentRequest)
	fc.Result = res
	return ec.marshalNShopPayPaymentRequest2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestReceipt_paymentRequest(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestReceipt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deliveryMethods":
				return ec.fieldContext_ShopPayPaymentRequest_deliveryMethods(ctx, field)
			case "discountCodes":
				return ec.fieldContext_ShopPayPaymentRequest_discountCodes(ctx, field)
			case "discounts":
				return ec.fieldContext_ShopPayPaymentRequest_discounts(ctx, field)
			case "lineItems":
				return ec.fieldContext_ShopPayPaymentRequest_lineItems(ctx, field)
			case "locale":
				return ec.fieldContext_ShopPayPaymentRequest_locale(ctx, field)
			case "presentmentCurrency":
				return ec.fieldContext_ShopPayPaymentRequest_presentmentCurrency(ctx, field)
			case "selectedDeliveryMethodType":
				return ec.fieldContext_ShopPayPaymentRequest_selectedDeliveryMethodType(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_ShopPayPaymentRequest_shippingAddress(ctx, field)
			case "shippingLines":
				return ec.fieldContext_ShopPayPaymentRequest_shippingLines(ctx, field)
			case "subtotal":
				return ec.fieldContext_ShopPayPaymentRequest_subtotal(ctx, field)
			case "total":
				return ec.fieldContext_ShopPayPaymentRequest_total(ctx, field)
			case "totalShippingPrice":
				return ec.fieldContext_ShopPayPaymentRequest_totalShippingPrice(ctx, field)
			case "totalTax":
				return ec.fieldContext_ShopPayPaymentRequest_totalTax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestReceipt_processingStatusType(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestReceipt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestReceipt_processingStatusType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingStatusType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestReceipt_processingStatusType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestReceipt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestReceipt_token(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestReceipt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestReceipt_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestReceipt_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestReceipt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestSession_checkoutUrl(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestSession_checkoutUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestSession_checkoutUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestSession_paymentRequest(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestSession_paymentRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentRequest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayPaymentRequest)
	fc.Result = res
	return ec.marshalNShopPayPaymentRequest2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestSession_paymentRequest(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deliveryMethods":
				return ec.fieldContext_ShopPayPaymentRequest_deliveryMethods(ctx, field)
			case "discountCodes":
				return ec.fieldContext_ShopPayPaymentRequest_discountCodes(ctx, field)
			case "discounts":
				return ec.fieldContext_ShopPayPaymentRequest_discounts(ctx, field)
			case "lineItems":
				return ec.fieldContext_ShopPayPaymentRequest_lineItems(ctx, field)
			case "locale":
				return ec.fieldContext_ShopPayPaymentRequest_locale(ctx, field)
			case "presentmentCurrency":
				return ec.fieldContext_ShopPayPaymentRequest_presentmentCurrency(ctx, field)
			case "selectedDeliveryMethodType":
				return ec.fieldContext_ShopPayPaymentRequest_selectedDeliveryMethodType(ctx, field)
			case "shippingAddress":
				return ec.fieldContext_ShopPayPaymentRequest_shippingAddress(ctx, field)
			case "shippingLines":
				return ec.fieldContext_ShopPayPaymentRequest_shippingLines(ctx, field)
			case "subtotal":
				return ec.fieldContext_ShopPayPaymentRequest_subtotal(ctx, field)
			case "total":
				return ec.fieldContext_ShopPayPaymentRequest_total(ctx, field)
			case "totalShippingPrice":
				return ec.fieldContext_ShopPayPaymentRequest_totalShippingPrice(ctx, field)
			case "totalTax":
				return ec.fieldContext_ShopPayPaymentRequest_totalTax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestSession_sourceIdentifier(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestSession_sourceIdentifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestSession_sourceIdentifier(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestSession_token(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestSession_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestSession_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestSessionCreatePayload_shopPayPaymentRequestSession(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestSessionCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestSessionCreatePayload_shopPayPaymentRequestSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShopPayPaymentRequestSession, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayPaymentRequestSession)
	fc.Result = res
	return ec.marshalOShopPayPaymentRequestSession2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestSessionCreatePayload_shopPayPaymentRequestSession(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestSessionCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "checkoutUrl":
				return ec.fieldContext_ShopPayPaymentRequestSession_checkoutUrl(ctx, field)
			case "paymentRequest":
				return ec.fieldContext_ShopPayPaymentRequestSession_paymentRequest(ctx, field)
			case "sourceIdentifier":
				return ec.fieldContext_ShopPayPaymentRequestSession_sourceIdentifier(ctx, field)
			case "token":
				return ec.fieldContext_ShopPayPaymentRequestSession_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestSession", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestSessionCreatePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestSessionCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestSessionCreatePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserErrorsShopPayPaymentRequestSessionUserErrors)
	fc.Result = res
	return ec.marshalNUserErrorsShopPayPaymentRequestSessionUserErrors2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorsShopPayPaymentRequestSessionUserErrorsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestSessionCreatePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestSessionCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_code(ctx, field)
			case "field":
				return ec.fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_field(ctx, field)
			case "message":
				return ec.fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserErrorsShopPayPaymentRequestSessionUserErrors", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestSessionSubmitPayload_paymentRequestReceipt(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestSessionSubmitPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestSessionSubmitPayload_paymentRequestReceipt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentRequestReceipt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopPayPaymentRequestReceipt)
	fc.Result = res
	return ec.marshalOShopPayPaymentRequestReceipt2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestReceipt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestSessionSubmitPayload_paymentRequestReceipt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestSessionSubmitPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paymentRequest":
				return ec.fieldContext_ShopPayPaymentRequestReceipt_paymentRequest(ctx, field)
			case "processingStatusType":
				return ec.fieldContext_ShopPayPaymentRequestReceipt_processingStatusType(ctx, field)
			case "token":
				return ec.fieldContext_ShopPayPaymentRequestReceipt_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestReceipt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestSessionSubmitPayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestSessionSubmitPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestSessionSubmitPayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserErrorsShopPayPaymentRequestSessionUserErrors)
	fc.Result = res
	return ec.marshalNUserErrorsShopPayPaymentRequestSessionUserErrors2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorsShopPayPaymentRequestSessionUserErrorsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestSessionSubmitPayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestSessionSubmitPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_code(ctx, field)
			case "field":
				return ec.fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_field(ctx, field)
			case "message":
				return ec.fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserErrorsShopPayPaymentRequestSessionUserErrors", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestShippingLine_amount(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestShippingLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestShippingLine_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestShippingLine_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestShippingLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestShippingLine_code(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestShippingLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestShippingLine_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestShippingLine_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestShippingLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestShippingLine_label(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestShippingLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestShippingLine_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestShippingLine_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestShippingLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestTotalShippingPrice_discounts(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestTotalShippingPrice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestTotalShippingPrice_discounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ShopPayPaymentRequestDiscount)
	fc.Result = res
	return ec.marshalNShopPayPaymentRequestDiscount2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestTotalShippingPrice_discounts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestTotalShippingPrice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_ShopPayPaymentRequestDiscount_amount(ctx, field)
			case "label":
				return ec.fieldContext_ShopPayPaymentRequestDiscount_label(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShopPayPaymentRequestDiscount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestTotalShippingPrice_finalTotal(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestTotalShippingPrice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestTotalShippingPrice_finalTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinalTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestTotalShippingPrice_finalTotal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestTotalShippingPrice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPayPaymentRequestTotalShippingPrice_originalTotal(ctx context.Context, field graphql.CollectedField, obj *model.ShopPayPaymentRequestTotalShippingPrice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPayPaymentRequestTotalShippingPrice_originalTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPayPaymentRequestTotalShippingPrice_originalTotal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPayPaymentRequestTotalShippingPrice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPolicy_body(ctx context.Context, field graphql.CollectedField, obj *model.ShopPolicy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPolicy_body(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPolicy_body(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPolicy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPolicy_handle(ctx context.Context, field graphql.CollectedField, obj *model.ShopPolicy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPolicy_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPolicy_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPolicy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPolicy_id(ctx context.Context, field graphql.CollectedField, obj *model.ShopPolicy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPolicy_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPolicy_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPolicy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPolicy_title(ctx context.Context, field graphql.CollectedField, obj *model.ShopPolicy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPolicy_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPolicy_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPolicy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPolicy_url(ctx context.Context, field graphql.CollectedField, obj *model.ShopPolicy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPolicy_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPolicy_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPolicy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPolicyWithDefault_body(ctx context.Context, field graphql.CollectedField, obj *model.ShopPolicyWithDefault) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPolicyWithDefault_body(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPolicyWithDefault_body(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPolicyWithDefault",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPolicyWithDefault_handle(ctx context.Context, field graphql.CollectedField, obj *model.ShopPolicyWithDefault) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPolicyWithDefault_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPolicyWithDefault_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPolicyWithDefault",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPolicyWithDefault_id(ctx context.Context, field graphql.CollectedField, obj *model.ShopPolicyWithDefault) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPolicyWithDefault_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPolicyWithDefault_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPolicyWithDefault",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPolicyWithDefault_title(ctx context.Context, field graphql.CollectedField, obj *model.ShopPolicyWithDefault) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPolicyWithDefault_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPolicyWithDefault_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPolicyWithDefault",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShopPolicyWithDefault_url(ctx context.Context, field graphql.CollectedField, obj *model.ShopPolicyWithDefault) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShopPolicyWithDefault_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShopPolicyWithDefault_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShopPolicyWithDefault",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sitemap_pagesCount(ctx context.Context, field graphql.CollectedField, obj *model.Sitemap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Sitemap_pagesCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PagesCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Count)
	fc.Result = res
	return ec.marshalOCount2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Sitemap_pagesCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sitemap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_Count_count(ctx, field)
			case "precision":
				return ec.fieldContext_Count_precision(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Count", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sitemap_resources(ctx context.Context, field graphql.CollectedField, obj *model.Sitemap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Sitemap_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedSitemapResources)
	fc.Result = res
	return ec.marshalOPaginatedSitemapResources2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPaginatedSitemapResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Sitemap_resources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sitemap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PaginatedSitemapResources_hasNextPage(ctx, field)
			case "items":
				return ec.fieldContext_PaginatedSitemapResources_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedSitemapResources", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Sitemap_resources_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SitemapImage_alt(ctx context.Context, field graphql.CollectedField, obj *model.SitemapImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapImage_alt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapImage_alt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SitemapImage_filepath(ctx context.Context, field graphql.CollectedField, obj *model.SitemapImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapImage_filepath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filepath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapImage_filepath(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SitemapImage_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.SitemapImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapImage_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapImage_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SitemapResource_handle(ctx context.Context, field graphql.CollectedField, obj *model.SitemapResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapResource_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapResource_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SitemapResource_image(ctx context.Context, field graphql.CollectedField, obj *model.SitemapResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapResource_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SitemapImage)
	fc.Result = res
	return ec.marshalOSitemapImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemapImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapResource_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alt":
				return ec.fieldContext_SitemapImage_alt(ctx, field)
			case "filepath":
				return ec.fieldContext_SitemapImage_filepath(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SitemapImage_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SitemapImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SitemapResource_title(ctx context.Context, field graphql.CollectedField, obj *model.SitemapResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapResource_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapResource_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SitemapResource_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.SitemapResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapResource_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapResource_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SitemapResourceMetaobject_handle(ctx context.Context, field graphql.CollectedField, obj *model.SitemapResourceMetaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapResourceMetaobject_handle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapResourceMetaobject_handle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapResourceMetaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SitemapResourceMetaobject_onlineStoreUrlHandle(ctx context.Context, field graphql.CollectedField, obj *model.SitemapResourceMetaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapResourceMetaobject_onlineStoreUrlHandle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnlineStoreURLHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapResourceMetaobject_onlineStoreUrlHandle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapResourceMetaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SitemapResourceMetaobject_type(ctx context.Context, field graphql.CollectedField, obj *model.SitemapResourceMetaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapResourceMetaobject_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapResourceMetaobject_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapResourceMetaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SitemapResourceMetaobject_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.SitemapResourceMetaobject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SitemapResourceMetaobject_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SitemapResourceMetaobject_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SitemapResourceMetaobject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoreAvailability_available(ctx context.Context, field graphql.CollectedField, obj *model.StoreAvailability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoreAvailability_available(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Available, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoreAvailability_available(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoreAvailability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoreAvailability_location(ctx context.Context, field graphql.CollectedField, obj *model.StoreAvailability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoreAvailability_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoreAvailability_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoreAvailability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "metafield":
				return ec.fieldContext_Location_metafield(ctx, field)
			case "metafields":
				return ec.fieldContext_Location_metafields(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoreAvailability_pickUpTime(ctx context.Context, field graphql.CollectedField, obj *model.StoreAvailability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoreAvailability_pickUpTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PickUpTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoreAvailability_pickUpTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoreAvailability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoreAvailability_quantityAvailable(ctx context.Context, field graphql.CollectedField, obj *model.StoreAvailability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoreAvailability_quantityAvailable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityAvailable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoreAvailability_quantityAvailable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoreAvailability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoreAvailabilityConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.StoreAvailabilityConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoreAvailabilityConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.StoreAvailabilityEdge)
	fc.Result = res
	return ec.marshalNStoreAvailabilityEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailabilityEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoreAvailabilityConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoreAvailabilityConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_StoreAvailabilityEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_StoreAvailabilityEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StoreAvailabilityEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoreAvailabilityConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.StoreAvailabilityConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoreAvailabilityConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.StoreAvailability)
	fc.Result = res
	return ec.marshalNStoreAvailability2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailabilityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoreAvailabilityConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoreAvailabilityConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "available":
				return ec.fieldContext_StoreAvailability_available(ctx, field)
			case "location":
				return ec.fieldContext_StoreAvailability_location(ctx, field)
			case "pickUpTime":
				return ec.fieldContext_StoreAvailability_pickUpTime(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_StoreAvailability_quantityAvailable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StoreAvailability", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoreAvailabilityConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.StoreAvailabilityConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoreAvailabilityConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoreAvailabilityConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoreAvailabilityConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoreAvailabilityEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.StoreAvailabilityEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoreAvailabilityEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoreAvailabilityEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoreAvailabilityEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoreAvailabilityEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.StoreAvailabilityEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoreAvailabilityEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StoreAvailability)
	fc.Result = res
	return ec.marshalNStoreAvailability2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailability(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoreAvailabilityEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoreAvailabilityEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "available":
				return ec.fieldContext_StoreAvailability_available(ctx, field)
			case "location":
				return ec.fieldContext_StoreAvailability_location(ctx, field)
			case "pickUpTime":
				return ec.fieldContext_StoreAvailability_pickUpTime(ctx, field)
			case "quantityAvailable":
				return ec.fieldContext_StoreAvailability_quantityAvailable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StoreAvailability", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StringConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.StringConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StringConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.StringEdge)
	fc.Result = res
	return ec.marshalNStringEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStringEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StringConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StringConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_StringEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_StringEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StringConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.StringConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StringConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StringConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StringConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StringConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.StringConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StringConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StringConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StringConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StringEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.StringEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StringEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StringEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StringEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StringEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.StringEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StringEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StringEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StringEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubmissionError_code(ctx context.Context, field graphql.CollectedField, obj *model.SubmissionError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubmissionError_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SubmissionErrorCode)
	fc.Result = res
	return ec.marshalNSubmissionErrorCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSubmissionErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubmissionError_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubmissionError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SubmissionErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubmissionError_message(ctx context.Context, field graphql.CollectedField, obj *model.SubmissionError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubmissionError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubmissionError_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubmissionError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubmitAlreadyAccepted_attemptId(ctx context.Context, field graphql.CollectedField, obj *model.SubmitAlreadyAccepted) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubmitAlreadyAccepted_attemptId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttemptID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubmitAlreadyAccepted_attemptId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubmitAlreadyAccepted",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubmitFailed_checkoutUrl(ctx context.Context, field graphql.CollectedField, obj *model.SubmitFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubmitFailed_checkoutUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckoutURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURL2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubmitFailed_checkoutUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubmitFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubmitFailed_errors(ctx context.Context, field graphql.CollectedField, obj *model.SubmitFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubmitFailed_errors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SubmissionError)
	fc.Result = res
	return ec.marshalNSubmissionError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSubmissionErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubmitFailed_errors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubmitFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_SubmissionError_code(ctx, field)
			case "message":
				return ec.fieldContext_SubmissionError_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubmissionError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubmitSuccess_attemptId(ctx context.Context, field graphql.CollectedField, obj *model.SubmitSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubmitSuccess_attemptId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttemptID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubmitSuccess_attemptId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubmitSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubmitSuccess_redirectUrl(ctx context.Context, field graphql.CollectedField, obj *model.SubmitSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubmitSuccess_redirectUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedirectURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNURL2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubmitSuccess_redirectUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubmitSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubmitThrottled_pollAfter(ctx context.Context, field graphql.CollectedField, obj *model.SubmitThrottled) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubmitThrottled_pollAfter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PollAfter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubmitThrottled_pollAfter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubmitThrottled",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Swatch_color(ctx context.Context, field graphql.CollectedField, obj *model.Swatch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Swatch_color(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOColor2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Swatch_color(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Swatch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Color does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Swatch_image(ctx context.Context, field graphql.CollectedField, obj *model.Swatch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Swatch_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MediaImage)
	fc.Result = res
	return ec.marshalOMediaImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Swatch_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Swatch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alt":
				return ec.fieldContext_MediaImage_alt(ctx, field)
			case "id":
				return ec.fieldContext_MediaImage_id(ctx, field)
			case "image":
				return ec.fieldContext_MediaImage_image(ctx, field)
			case "mediaContentType":
				return ec.fieldContext_MediaImage_mediaContentType(ctx, field)
			case "presentation":
				return ec.fieldContext_MediaImage_presentation(ctx, field)
			case "previewImage":
				return ec.fieldContext_MediaImage_previewImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaxonomyCategory_ancestors(ctx context.Context, field graphql.CollectedField, obj *model.TaxonomyCategory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaxonomyCategory_ancestors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ancestors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TaxonomyCategory)
	fc.Result = res
	return ec.marshalNTaxonomyCategory2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTaxonomyCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaxonomyCategory_ancestors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaxonomyCategory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ancestors":
				return ec.fieldContext_TaxonomyCategory_ancestors(ctx, field)
			case "id":
				return ec.fieldContext_TaxonomyCategory_id(ctx, field)
			case "name":
				return ec.fieldContext_TaxonomyCategory_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaxonomyCategory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaxonomyCategory_id(ctx context.Context, field graphql.CollectedField, obj *model.TaxonomyCategory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaxonomyCategory_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaxonomyCategory_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaxonomyCategory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaxonomyCategory_name(ctx context.Context, field graphql.CollectedField, obj *model.TaxonomyCategory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaxonomyCategory_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaxonomyCategory_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaxonomyCategory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_amount(ctx context.Context, field graphql.CollectedField, obj *model.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_amountV2(ctx context.Context, field graphql.CollectedField, obj *model.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_amountV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MoneyV2)
	fc.Result = res
	return ec.marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_amountV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_MoneyV2_amount(ctx, field)
			case "currencyCode":
				return ec.fieldContext_MoneyV2_currencyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyV2", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_kind(ctx context.Context, field graphql.CollectedField, obj *model.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TransactionKind)
	fc.Result = res
	return ec.marshalNTransactionKind2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransactionKind(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TransactionKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_status(ctx context.Context, field graphql.CollectedField, obj *model.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TransactionStatus)
	fc.Result = res
	return ec.marshalNTransactionStatus2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransactionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TransactionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_statusV2(ctx context.Context, field graphql.CollectedField, obj *model.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_statusV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusV2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TransactionStatus)
	fc.Result = res
	return ec.marshalOTransactionStatus2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransactionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_statusV2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TransactionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_test(ctx context.Context, field graphql.CollectedField, obj *model.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_test(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Test, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_test(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UnitPriceMeasurement_measuredType(ctx context.Context, field graphql.CollectedField, obj *model.UnitPriceMeasurement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UnitPriceMeasurement_measuredType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeasuredType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UnitPriceMeasurementMeasuredType)
	fc.Result = res
	return ec.marshalOUnitPriceMeasurementMeasuredType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitPriceMeasurementMeasuredType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UnitPriceMeasurement_measuredType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UnitPriceMeasurement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UnitPriceMeasurementMeasuredType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UnitPriceMeasurement_quantityUnit(ctx context.Context, field graphql.CollectedField, obj *model.UnitPriceMeasurement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UnitPriceMeasurement_quantityUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UnitPriceMeasurementMeasuredUnit)
	fc.Result = res
	return ec.marshalOUnitPriceMeasurementMeasuredUnit2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitPriceMeasurementMeasuredUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UnitPriceMeasurement_quantityUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UnitPriceMeasurement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UnitPriceMeasurementMeasuredUnit does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UnitPriceMeasurement_quantityValue(ctx context.Context, field graphql.CollectedField, obj *model.UnitPriceMeasurement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UnitPriceMeasurement_quantityValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UnitPriceMeasurement_quantityValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UnitPriceMeasurement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UnitPriceMeasurement_referenceUnit(ctx context.Context, field graphql.CollectedField, obj *model.UnitPriceMeasurement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UnitPriceMeasurement_referenceUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferenceUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UnitPriceMeasurementMeasuredUnit)
	fc.Result = res
	return ec.marshalOUnitPriceMeasurementMeasuredUnit2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitPriceMeasurementMeasuredUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UnitPriceMeasurement_referenceUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UnitPriceMeasurement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UnitPriceMeasurementMeasuredUnit does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UnitPriceMeasurement_referenceValue(ctx context.Context, field graphql.CollectedField, obj *model.UnitPriceMeasurement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UnitPriceMeasurement_referenceValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferenceValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UnitPriceMeasurement_referenceValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UnitPriceMeasurement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UrlRedirect_id(ctx context.Context, field graphql.CollectedField, obj *model.URLRedirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UrlRedirect_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UrlRedirect_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UrlRedirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UrlRedirect_path(ctx context.Context, field graphql.CollectedField, obj *model.URLRedirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UrlRedirect_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UrlRedirect_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UrlRedirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UrlRedirect_target(ctx context.Context, field graphql.CollectedField, obj *model.URLRedirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UrlRedirect_target(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Target, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UrlRedirect_target(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UrlRedirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UrlRedirectConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.URLRedirectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UrlRedirectConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.URLRedirectEdge)
	fc.Result = res
	return ec.marshalNUrlRedirectEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirectEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UrlRedirectConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UrlRedirectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_UrlRedirectEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_UrlRedirectEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UrlRedirectEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UrlRedirectConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.URLRedirectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UrlRedirectConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.URLRedirect)
	fc.Result = res
	return ec.marshalNUrlRedirect2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UrlRedirectConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UrlRedirectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UrlRedirect_id(ctx, field)
			case "path":
				return ec.fieldContext_UrlRedirect_path(ctx, field)
			case "target":
				return ec.fieldContext_UrlRedirect_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UrlRedirect", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UrlRedirectConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.URLRedirectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UrlRedirectConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UrlRedirectConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UrlRedirectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UrlRedirectEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.URLRedirectEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UrlRedirectEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UrlRedirectEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UrlRedirectEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UrlRedirectEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.URLRedirectEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UrlRedirectEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.URLRedirect)
	fc.Result = res
	return ec.marshalNUrlRedirect2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirect(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UrlRedirectEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UrlRedirectEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UrlRedirect_id(ctx, field)
			case "path":
				return ec.fieldContext_UrlRedirect_path(ctx, field)
			case "target":
				return ec.fieldContext_UrlRedirect_target(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UrlRedirect", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserError_field(ctx context.Context, field graphql.CollectedField, obj *model.UserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserError_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserError_field(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserError_message(ctx context.Context, field graphql.CollectedField, obj *model.UserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserError_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserErrorsShopPayPaymentRequestSessionUserErrors_code(ctx context.Context, field graphql.CollectedField, obj *model.UserErrorsShopPayPaymentRequestSessionUserErrors) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserErrorsShopPayPaymentRequestSessionUserErrorsCode)
	fc.Result = res
	return ec.marshalOUserErrorsShopPayPaymentRequestSessionUserErrorsCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorsShopPayPaymentRequestSessionUserErrorsCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserErrorsShopPayPaymentRequestSessionUserErrors",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserErrorsShopPayPaymentRequestSessionUserErrorsCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserErrorsShopPayPaymentRequestSessionUserErrors_field(ctx context.Context, field graphql.CollectedField, obj *model.UserErrorsShopPayPaymentRequestSessionUserErrors) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_field(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserErrorsShopPayPaymentRequestSessionUserErrors",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserErrorsShopPayPaymentRequestSessionUserErrors_message(ctx context.Context, field graphql.CollectedField, obj *model.UserErrorsShopPayPaymentRequestSessionUserErrors) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserErrorsShopPayPaymentRequestSessionUserErrors_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserErrorsShopPayPaymentRequestSessionUserErrors",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Video_alt(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Video_alt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Video_alt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Video",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Video_id(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Video_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Video_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Video",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Video_mediaContentType(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Video_mediaContentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MediaContentType)
	fc.Result = res
	return ec.marshalNMediaContentType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaContentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Video_mediaContentType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Video",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MediaContentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Video_presentation(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Video_presentation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Presentation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MediaPresentation)
	fc.Result = res
	return ec.marshalOMediaPresentation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaPresentation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Video_presentation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Video",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "asJson":
				return ec.fieldContext_MediaPresentation_asJson(ctx, field)
			case "id":
				return ec.fieldContext_MediaPresentation_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaPresentation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Video_previewImage(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Video_previewImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Video_previewImage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Video",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "altText":
				return ec.fieldContext_Image_altText(ctx, field)
			case "height":
				return ec.fieldContext_Image_height(ctx, field)
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "originalSrc":
				return ec.fieldContext_Image_originalSrc(ctx, field)
			case "src":
				return ec.fieldContext_Image_src(ctx, field)
			case "thumbhash":
				return ec.fieldContext_Image_thumbhash(ctx, field)
			case "transformedSrc":
				return ec.fieldContext_Image_transformedSrc(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "width":
				return ec.fieldContext_Image_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Video_sources(ctx context.Context, field graphql.CollectedField, obj *model.Video) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Video_sources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VideoSource)
	fc.Result = res
	return ec.marshalNVideoSource2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐVideoSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Video_sources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Video",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "format":
				return ec.fieldContext_VideoSource_format(ctx, field)
			case "height":
				return ec.fieldContext_VideoSource_height(ctx, field)
			case "mimeType":
				return ec.fieldContext_VideoSource_mimeType(ctx, field)
			case "url":
				return ec.fieldContext_VideoSource_url(ctx, field)
			case "width":
				return ec.fieldContext_VideoSource_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VideoSource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoSource_format(ctx context.Context, field graphql.CollectedField, obj *model.VideoSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoSource_format(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Format, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoSource_format(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoSource_height(ctx context.Context, field graphql.CollectedField, obj *model.VideoSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoSource_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoSource_height(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoSource_mimeType(ctx context.Context, field graphql.CollectedField, obj *model.VideoSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoSource_mimeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoSource_mimeType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoSource_url(ctx context.Context, field graphql.CollectedField, obj *model.VideoSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoSource_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoSource_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoSource_width(ctx context.Context, field graphql.CollectedField, obj *model.VideoSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoSource_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoSource_width(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputApplePayWalletContentInput(ctx context.Context, obj any) (model.ApplePayWalletContentInput, error) {
	var it model.ApplePayWalletContentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"billingAddress", "data", "header", "lastDigits", "signature", "version"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "billingAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingAddress"))
			data, err := ec.unmarshalNMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingAddress = data
		case "data":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Data = data
		case "header":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("header"))
			data, err := ec.unmarshalNApplePayWalletHeaderInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐApplePayWalletHeaderInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Header = data
		case "lastDigits":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastDigits"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastDigits = data
		case "signature":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signature"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Signature = data
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApplePayWalletHeaderInput(ctx context.Context, obj any) (model.ApplePayWalletHeaderInput, error) {
	var it model.ApplePayWalletHeaderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"applicationData", "ephemeralPublicKey", "publicKeyHash", "transactionId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "applicationData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applicationData"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplicationData = data
		case "ephemeralPublicKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ephemeralPublicKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EphemeralPublicKey = data
		case "publicKeyHash":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicKeyHash"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PublicKeyHash = data
		case "transactionId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transactionId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAttributeInput(ctx context.Context, obj any) (model.AttributeInput, error) {
	var it model.AttributeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBuyerInput(ctx context.Context, obj any) (model.BuyerInput, error) {
	var it model.BuyerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyLocationId", "customerAccessToken"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyLocationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyLocationId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyLocationID = data
		case "customerAccessToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerAccessToken = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartAddressInput(ctx context.Context, obj any) (model.CartAddressInput, error) {
	var it model.CartAddressInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"copyFromCustomerAddressId", "deliveryAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "copyFromCustomerAddressId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("copyFromCustomerAddressId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CopyFromCustomerAddressID = data
		case "deliveryAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryAddress"))
			data, err := ec.unmarshalOCartDeliveryAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryAddress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartBuyerIdentityInput(ctx context.Context, obj any) (model.CartBuyerIdentityInput, error) {
	var it model.CartBuyerIdentityInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyLocationId", "countryCode", "customerAccessToken", "email", "phone", "preferences"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyLocationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyLocationId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyLocationID = data
		case "countryCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryCode"))
			data, err := ec.unmarshalOCountryCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryCode = data
		case "customerAccessToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAccessToken"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerAccessToken = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "preferences":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preferences"))
			data, err := ec.unmarshalOCartPreferencesInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPreferencesInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Preferences = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartDeliveryAddressInput(ctx context.Context, obj any) (model.CartDeliveryAddressInput, error) {
	var it model.CartDeliveryAddressInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"address1", "address2", "city", "company", "countryCode", "firstName", "lastName", "phone", "provinceCode", "zip"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address1":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address1"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address1 = data
		case "address2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address2"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address2 = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "company":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Company = data
		case "countryCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryCode"))
			data, err := ec.unmarshalOCountryCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryCode = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "provinceCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceCode = data
		case "zip":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Zip = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartDeliveryCoordinatesPreferenceInput(ctx context.Context, obj any) (model.CartDeliveryCoordinatesPreferenceInput, error) {
	var it model.CartDeliveryCoordinatesPreferenceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"countryCode", "latitude", "longitude"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "countryCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryCode"))
			data, err := ec.unmarshalNCountryCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryCode = data
		case "latitude":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Latitude = data
		case "longitude":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Longitude = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartDeliveryInput(ctx context.Context, obj any) (model.CartDeliveryInput, error) {
	var it model.CartDeliveryInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"addresses"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "addresses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addresses"))
			data, err := ec.unmarshalOCartSelectableAddressInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Addresses = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartDeliveryPreferenceInput(ctx context.Context, obj any) (model.CartDeliveryPreferenceInput, error) {
	var it model.CartDeliveryPreferenceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"coordinates", "deliveryMethod", "pickupHandle"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "coordinates":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinates"))
			data, err := ec.unmarshalOCartDeliveryCoordinatesPreferenceInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryCoordinatesPreferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Coordinates = data
		case "deliveryMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryMethod"))
			data, err := ec.unmarshalOPreferenceDeliveryMethodType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryMethod = data
		case "pickupHandle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pickupHandle"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PickupHandle = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartDirectPaymentMethodInput(ctx context.Context, obj any) (model.CartDirectPaymentMethodInput, error) {
	var it model.CartDirectPaymentMethodInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["acceptedSubscriptionTerms"]; !present {
		asMap["acceptedSubscriptionTerms"] = false
	}

	fieldsInOrder := [...]string{"acceptedSubscriptionTerms", "billingAddress", "cardSource", "sessionId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "acceptedSubscriptionTerms":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptedSubscriptionTerms"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptedSubscriptionTerms = data
		case "billingAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingAddress"))
			data, err := ec.unmarshalNMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingAddress = data
		case "cardSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardSource"))
			data, err := ec.unmarshalOCartCardSource2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCardSource(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardSource = data
		case "sessionId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SessionID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartFreePaymentMethodInput(ctx context.Context, obj any) (model.CartFreePaymentMethodInput, error) {
	var it model.CartFreePaymentMethodInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"billingAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "billingAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingAddress"))
			data, err := ec.unmarshalNMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingAddress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartInput(ctx context.Context, obj any) (model.CartInput, error) {
	var it model.CartInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"attributes", "buyerIdentity", "delivery", "discountCodes", "giftCardCodes", "lines", "metafields", "note"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "attributes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attributes"))
			data, err := ec.unmarshalOAttributeInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Attributes = data
		case "buyerIdentity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerIdentity"))
			data, err := ec.unmarshalOCartBuyerIdentityInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartBuyerIdentityInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuyerIdentity = data
		case "delivery":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delivery"))
			data, err := ec.unmarshalOCartDeliveryInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Delivery = data
		case "discountCodes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discountCodes"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscountCodes = data
		case "giftCardCodes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("giftCardCodes"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GiftCardCodes = data
		case "lines":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lines"))
			data, err := ec.unmarshalOCartLineInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Lines = data
		case "metafields":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metafields"))
			data, err := ec.unmarshalOCartInputMetafieldInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartInputMetafieldInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Metafields = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartInputMetafieldInput(ctx context.Context, obj any) (model.CartInputMetafieldInput, error) {
	var it model.CartInputMetafieldInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "type", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartLineInput(ctx context.Context, obj any) (model.CartLineInput, error) {
	var it model.CartLineInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["quantity"]; !present {
		asMap["quantity"] = 1
	}

	fieldsInOrder := [...]string{"attributes", "merchandiseId", "quantity", "sellingPlanId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "attributes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attributes"))
			data, err := ec.unmarshalOAttributeInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Attributes = data
		case "merchandiseId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchandiseId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchandiseID = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "sellingPlanId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellingPlanId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SellingPlanID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartLineUpdateInput(ctx context.Context, obj any) (model.CartLineUpdateInput, error) {
	var it model.CartLineUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"attributes", "id", "merchandiseId", "quantity", "sellingPlanId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "attributes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attributes"))
			data, err := ec.unmarshalOAttributeInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Attributes = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "merchandiseId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchandiseId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchandiseID = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "sellingPlanId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellingPlanId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SellingPlanID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartMetafieldDeleteInput(ctx context.Context, obj any) (model.CartMetafieldDeleteInput, error) {
	var it model.CartMetafieldDeleteInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "ownerId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "ownerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartMetafieldsSetInput(ctx context.Context, obj any) (model.CartMetafieldsSetInput, error) {
	var it model.CartMetafieldsSetInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "ownerId", "type", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "ownerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerID = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartPaymentInput(ctx context.Context, obj any) (model.CartPaymentInput, error) {
	var it model.CartPaymentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"amount", "directPaymentMethod", "freePaymentMethod", "sourceIdentifier", "walletPaymentMethod"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "directPaymentMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directPaymentMethod"))
			data, err := ec.unmarshalOCartDirectPaymentMethodInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDirectPaymentMethodInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirectPaymentMethod = data
		case "freePaymentMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freePaymentMethod"))
			data, err := ec.unmarshalOCartFreePaymentMethodInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartFreePaymentMethodInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.FreePaymentMethod = data
		case "sourceIdentifier":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceIdentifier"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceIdentifier = data
		case "walletPaymentMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletPaymentMethod"))
			data, err := ec.unmarshalOCartWalletPaymentMethodInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWalletPaymentMethodInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.WalletPaymentMethod = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartPreferencesInput(ctx context.Context, obj any) (model.CartPreferencesInput, error) {
	var it model.CartPreferencesInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"delivery", "wallet"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "delivery":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delivery"))
			data, err := ec.unmarshalOCartDeliveryPreferenceInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryPreferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Delivery = data
		case "wallet":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallet"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Wallet = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartSelectableAddressInput(ctx context.Context, obj any) (model.CartSelectableAddressInput, error) {
	var it model.CartSelectableAddressInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["validationStrategy"]; !present {
		asMap["validationStrategy"] = "COUNTRY_CODE_ONLY"
	}

	fieldsInOrder := [...]string{"address", "oneTimeUse", "selected", "validationStrategy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalNCartAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "oneTimeUse":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeUse"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OneTimeUse = data
		case "selected":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selected"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Selected = data
		case "validationStrategy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("validationStrategy"))
			data, err := ec.unmarshalODeliveryAddressValidationStrategy2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryAddressValidationStrategy(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValidationStrategy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartSelectableAddressUpdateInput(ctx context.Context, obj any) (model.CartSelectableAddressUpdateInput, error) {
	var it model.CartSelectableAddressUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["validationStrategy"]; !present {
		asMap["validationStrategy"] = "COUNTRY_CODE_ONLY"
	}

	fieldsInOrder := [...]string{"address", "id", "oneTimeUse", "selected", "validationStrategy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOCartAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "oneTimeUse":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeUse"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OneTimeUse = data
		case "selected":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selected"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Selected = data
		case "validationStrategy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("validationStrategy"))
			data, err := ec.unmarshalODeliveryAddressValidationStrategy2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryAddressValidationStrategy(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValidationStrategy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartSelectedDeliveryOptionInput(ctx context.Context, obj any) (model.CartSelectedDeliveryOptionInput, error) {
	var it model.CartSelectedDeliveryOptionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"deliveryGroupId", "deliveryOptionHandle"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "deliveryGroupId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryGroupId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryGroupID = data
		case "deliveryOptionHandle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryOptionHandle"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryOptionHandle = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartWalletPaymentMethodInput(ctx context.Context, obj any) (model.CartWalletPaymentMethodInput, error) {
	var it model.CartWalletPaymentMethodInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"applePayWalletContent", "shopPayWalletContent"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "applePayWalletContent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applePayWalletContent"))
			data, err := ec.unmarshalOApplePayWalletContentInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐApplePayWalletContentInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplePayWalletContent = data
		case "shopPayWalletContent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shopPayWalletContent"))
			data, err := ec.unmarshalOShopPayWalletContentInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayWalletContentInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShopPayWalletContent = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCategoryFilter(ctx context.Context, obj any) (model.CategoryFilter, error) {
	var it model.CategoryFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckoutAttributesUpdateV2Input(ctx context.Context, obj any) (model.CheckoutAttributesUpdateV2Input, error) {
	var it model.CheckoutAttributesUpdateV2Input
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["allowPartialAddresses"]; !present {
		asMap["allowPartialAddresses"] = false
	}

	fieldsInOrder := [...]string{"allowPartialAddresses", "customAttributes", "note"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "allowPartialAddresses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowPartialAddresses"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowPartialAddresses = data
		case "customAttributes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customAttributes"))
			data, err := ec.unmarshalOAttributeInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomAttributes = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckoutBuyerIdentityInput(ctx context.Context, obj any) (model.CheckoutBuyerIdentityInput, error) {
	var it model.CheckoutBuyerIdentityInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"countryCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "countryCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryCode"))
			data, err := ec.unmarshalNCountryCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckoutCreateInput(ctx context.Context, obj any) (model.CheckoutCreateInput, error) {
	var it model.CheckoutCreateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"allowPartialAddresses", "buyerIdentity", "customAttributes", "email", "lineItems", "note", "shippingAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "allowPartialAddresses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowPartialAddresses"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowPartialAddresses = data
		case "buyerIdentity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerIdentity"))
			data, err := ec.unmarshalOCheckoutBuyerIdentityInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutBuyerIdentityInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuyerIdentity = data
		case "customAttributes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customAttributes"))
			data, err := ec.unmarshalOAttributeInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomAttributes = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "lineItems":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lineItems"))
			data, err := ec.unmarshalOCheckoutLineItemInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LineItems = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "shippingAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shippingAddress"))
			data, err := ec.unmarshalOMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShippingAddress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckoutLineItemInput(ctx context.Context, obj any) (model.CheckoutLineItemInput, error) {
	var it model.CheckoutLineItemInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"customAttributes", "quantity", "variantId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "customAttributes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customAttributes"))
			data, err := ec.unmarshalOAttributeInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomAttributes = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "variantId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.VariantID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckoutLineItemUpdateInput(ctx context.Context, obj any) (model.CheckoutLineItemUpdateInput, error) {
	var it model.CheckoutLineItemUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"customAttributes", "id", "quantity", "variantId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "customAttributes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customAttributes"))
			data, err := ec.unmarshalOAttributeInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomAttributes = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "variantId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.VariantID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreditCardPaymentInputV2(ctx context.Context, obj any) (model.CreditCardPaymentInputV2, error) {
	var it model.CreditCardPaymentInputV2
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["test"]; !present {
		asMap["test"] = false
	}

	fieldsInOrder := [...]string{"billingAddress", "idempotencyKey", "paymentAmount", "test", "vaultId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "billingAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingAddress"))
			data, err := ec.unmarshalNMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingAddress = data
		case "idempotencyKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idempotencyKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IdempotencyKey = data
		case "paymentAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentAmount"))
			data, err := ec.unmarshalNMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentAmount = data
		case "test":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("test"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Test = data
		case "vaultId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaultId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaultID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerAccessTokenCreateInput(ctx context.Context, obj any) (model.CustomerAccessTokenCreateInput, error) {
	var it model.CustomerAccessTokenCreateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerActivateInput(ctx context.Context, obj any) (model.CustomerActivateInput, error) {
	var it model.CustomerActivateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"activationToken", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "activationToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activationToken"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivationToken = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerCreateInput(ctx context.Context, obj any) (model.CustomerCreateInput, error) {
	var it model.CustomerCreateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"acceptsMarketing", "email", "firstName", "lastName", "password", "phone"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "acceptsMarketing":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptsMarketing"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptsMarketing = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerResetInput(ctx context.Context, obj any) (model.CustomerResetInput, error) {
	var it model.CustomerResetInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"password", "resetToken"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "resetToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resetToken"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ResetToken = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerUpdateInput(ctx context.Context, obj any) (model.CustomerUpdateInput, error) {
	var it model.CustomerUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"acceptsMarketing", "email", "firstName", "lastName", "password", "phone"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "acceptsMarketing":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptsMarketing"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptsMarketing = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeliveryAddressInput(ctx context.Context, obj any) (model.DeliveryAddressInput, error) {
	var it model.DeliveryAddressInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["deliveryAddressValidationStrategy"]; !present {
		asMap["deliveryAddressValidationStrategy"] = "COUNTRY_CODE_ONLY"
	}
	if _, present := asMap["oneTimeUse"]; !present {
		asMap["oneTimeUse"] = false
	}

	fieldsInOrder := [...]string{"customerAddressId", "deliveryAddress", "deliveryAddressValidationStrategy", "oneTimeUse"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "customerAddressId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerAddressId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerAddressID = data
		case "deliveryAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryAddress"))
			data, err := ec.unmarshalOMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryAddress = data
		case "deliveryAddressValidationStrategy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryAddressValidationStrategy"))
			data, err := ec.unmarshalODeliveryAddressValidationStrategy2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryAddressValidationStrategy(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryAddressValidationStrategy = data
		case "oneTimeUse":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeUse"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OneTimeUse = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGeoCoordinateInput(ctx context.Context, obj any) (model.GeoCoordinateInput, error) {
	var it model.GeoCoordinateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"latitude", "longitude"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "latitude":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Latitude = data
		case "longitude":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Longitude = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHasMetafieldsIdentifier(ctx context.Context, obj any) (model.HasMetafieldsIdentifier, error) {
	var it model.HasMetafieldsIdentifier
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "namespace"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "namespace":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Namespace = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageTransformInput(ctx context.Context, obj any) (model.ImageTransformInput, error) {
	var it model.ImageTransformInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["scale"]; !present {
		asMap["scale"] = 1
	}

	fieldsInOrder := [...]string{"crop", "maxHeight", "maxWidth", "preferredContentType", "scale"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "crop":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("crop"))
			data, err := ec.unmarshalOCropRegion2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCropRegion(ctx, v)
			if err != nil {
				return it, err
			}
			it.Crop = data
		case "maxHeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxHeight"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxHeight = data
		case "maxWidth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxWidth"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxWidth = data
		case "preferredContentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preferredContentType"))
			data, err := ec.unmarshalOImageContentType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageContentType(ctx, v)
			if err != nil {
				return it, err
			}
			it.PreferredContentType = data
		case "scale":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scale"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Scale = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMailingAddressInput(ctx context.Context, obj any) (model.MailingAddressInput, error) {
	var it model.MailingAddressInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"address1", "address2", "city", "company", "country", "firstName", "lastName", "phone", "province", "zip"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address1":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address1"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address1 = data
		case "address2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address2"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address2 = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "company":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Company = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "province":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Province = data
		case "zip":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Zip = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMetafieldFilter(ctx context.Context, obj any) (model.MetafieldFilter, error) {
	var it model.MetafieldFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "namespace", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "namespace":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Namespace = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMetaobjectHandleInput(ctx context.Context, obj any) (model.MetaobjectHandleInput, error) {
	var it model.MetaobjectHandleInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"handle", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "handle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Handle = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMoneyInput(ctx context.Context, obj any) (model.MoneyInput, error) {
	var it model.MoneyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"amount", "currencyCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNDecimal2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "currencyCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currencyCode"))
			data, err := ec.unmarshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrencyCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPriceRangeFilter(ctx context.Context, obj any) (model.PriceRangeFilter, error) {
	var it model.PriceRangeFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["min"]; !present {
		asMap["min"] = 0.000000
	}

	fieldsInOrder := [...]string{"max", "min"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "max":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Max = data
		case "min":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Min = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductFilter(ctx context.Context, obj any) (model.ProductFilter, error) {
	var it model.ProductFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"available", "category", "price", "productMetafield", "productType", "productVendor", "tag", "taxonomyMetafield", "variantMetafield", "variantOption"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "available":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("available"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Available = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOCategoryFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCategoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOPriceRangeFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPriceRangeFilter(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "productMetafield":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productMetafield"))
			data, err := ec.unmarshalOMetafieldFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldFilter(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductMetafield = data
		case "productType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductType = data
		case "productVendor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productVendor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductVendor = data
		case "tag":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tag = data
		case "taxonomyMetafield":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxonomyMetafield"))
			data, err := ec.unmarshalOTaxonomyMetafieldFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTaxonomyMetafieldFilter(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxonomyMetafield = data
		case "variantMetafield":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantMetafield"))
			data, err := ec.unmarshalOMetafieldFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldFilter(ctx, v)
			if err != nil {
				return it, err
			}
			it.VariantMetafield = data
		case "variantOption":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantOption"))
			data, err := ec.unmarshalOVariantOptionFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐVariantOptionFilter(ctx, v)
			if err != nil {
				return it, err
			}
			it.VariantOption = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSelectedOptionInput(ctx context.Context, obj any) (model.SelectedOptionInput, error) {
	var it model.SelectedOptionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShopPayPaymentRequestDeliveryMethodInput(ctx context.Context, obj any) (model.ShopPayPaymentRequestDeliveryMethodInput, error) {
	var it model.ShopPayPaymentRequestDeliveryMethodInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"amount", "code", "deliveryExpectationLabel", "detail", "label", "maxDeliveryDate", "minDeliveryDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "deliveryExpectationLabel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryExpectationLabel"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryExpectationLabel = data
		case "detail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Detail = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "maxDeliveryDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxDeliveryDate"))
			data, err := ec.unmarshalOISO8601DateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxDeliveryDate = data
		case "minDeliveryDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minDeliveryDate"))
			data, err := ec.unmarshalOISO8601DateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinDeliveryDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShopPayPaymentRequestDiscountInput(ctx context.Context, obj any) (model.ShopPayPaymentRequestDiscountInput, error) {
	var it model.ShopPayPaymentRequestDiscountInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"amount", "label"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShopPayPaymentRequestImageInput(ctx context.Context, obj any) (model.ShopPayPaymentRequestImageInput, error) {
	var it model.ShopPayPaymentRequestImageInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"alt", "url"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "alt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alt"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alt = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShopPayPaymentRequestInput(ctx context.Context, obj any) (model.ShopPayPaymentRequestInput, error) {
	var it model.ShopPayPaymentRequestInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"deliveryMethods", "discountCodes", "discounts", "lineItems", "locale", "paymentMethod", "presentmentCurrency", "selectedDeliveryMethodType", "shippingLines", "subtotal", "total", "totalShippingPrice", "totalTax"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "deliveryMethods":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryMethods"))
			data, err := ec.unmarshalOShopPayPaymentRequestDeliveryMethodInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryMethods = data
		case "discountCodes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discountCodes"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscountCodes = data
		case "discounts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discounts"))
			data, err := ec.unmarshalOShopPayPaymentRequestDiscountInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Discounts = data
		case "lineItems":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lineItems"))
			data, err := ec.unmarshalOShopPayPaymentRequestLineItemInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestLineItemInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LineItems = data
		case "locale":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Locale = data
		case "paymentMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentMethod = data
		case "presentmentCurrency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("presentmentCurrency"))
			data, err := ec.unmarshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx, v)
			if err != nil {
				return it, err
			}
			it.PresentmentCurrency = data
		case "selectedDeliveryMethodType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selectedDeliveryMethodType"))
			data, err := ec.unmarshalOShopPayPaymentRequestDeliveryMethodType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SelectedDeliveryMethodType = data
		case "shippingLines":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shippingLines"))
			data, err := ec.unmarshalOShopPayPaymentRequestShippingLineInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestShippingLineInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShippingLines = data
		case "subtotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subtotal"))
			data, err := ec.unmarshalNMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Subtotal = data
		case "total":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total"))
			data, err := ec.unmarshalNMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Total = data
		case "totalShippingPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalShippingPrice"))
			data, err := ec.unmarshalOShopPayPaymentRequestTotalShippingPriceInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestTotalShippingPriceInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalShippingPrice = data
		case "totalTax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalTax"))
			data, err := ec.unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTax = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShopPayPaymentRequestLineItemInput(ctx context.Context, obj any) (model.ShopPayPaymentRequestLineItemInput, error) {
	var it model.ShopPayPaymentRequestLineItemInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"finalItemPrice", "finalLinePrice", "image", "itemDiscounts", "label", "lineDiscounts", "originalItemPrice", "originalLinePrice", "quantity", "requiresShipping", "sku"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "finalItemPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finalItemPrice"))
			data, err := ec.unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinalItemPrice = data
		case "finalLinePrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finalLinePrice"))
			data, err := ec.unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinalLinePrice = data
		case "image":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			data, err := ec.unmarshalOShopPayPaymentRequestImageInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestImageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Image = data
		case "itemDiscounts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemDiscounts"))
			data, err := ec.unmarshalOShopPayPaymentRequestDiscountInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemDiscounts = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "lineDiscounts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lineDiscounts"))
			data, err := ec.unmarshalOShopPayPaymentRequestDiscountInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LineDiscounts = data
		case "originalItemPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("originalItemPrice"))
			data, err := ec.unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.OriginalItemPrice = data
		case "originalLinePrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("originalLinePrice"))
			data, err := ec.unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.OriginalLinePrice = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "requiresShipping":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiresShipping"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiresShipping = data
		case "sku":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sku"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sku = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShopPayPaymentRequestShippingLineInput(ctx context.Context, obj any) (model.ShopPayPaymentRequestShippingLineInput, error) {
	var it model.ShopPayPaymentRequestShippingLineInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"amount", "code", "label"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShopPayPaymentRequestTotalShippingPriceInput(ctx context.Context, obj any) (model.ShopPayPaymentRequestTotalShippingPriceInput, error) {
	var it model.ShopPayPaymentRequestTotalShippingPriceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"discounts", "finalTotal", "originalTotal"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "discounts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discounts"))
			data, err := ec.unmarshalOShopPayPaymentRequestDiscountInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Discounts = data
		case "finalTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finalTotal"))
			data, err := ec.unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinalTotal = data
		case "originalTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("originalTotal"))
			data, err := ec.unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.OriginalTotal = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShopPayWalletContentInput(ctx context.Context, obj any) (model.ShopPayWalletContentInput, error) {
	var it model.ShopPayWalletContentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"billingAddress", "sessionToken"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "billingAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingAddress"))
			data, err := ec.unmarshalNMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingAddress = data
		case "sessionToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionToken"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SessionToken = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaxonomyMetafieldFilter(ctx context.Context, obj any) (model.TaxonomyMetafieldFilter, error) {
	var it model.TaxonomyMetafieldFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "namespace", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "namespace":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Namespace = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTokenizedPaymentInputV3(ctx context.Context, obj any) (model.TokenizedPaymentInputV3, error) {
	var it model.TokenizedPaymentInputV3
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["test"]; !present {
		asMap["test"] = false
	}

	fieldsInOrder := [...]string{"billingAddress", "idempotencyKey", "identifier", "paymentAmount", "paymentData", "test", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "billingAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingAddress"))
			data, err := ec.unmarshalNMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingAddress = data
		case "idempotencyKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idempotencyKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IdempotencyKey = data
		case "identifier":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Identifier = data
		case "paymentAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentAmount"))
			data, err := ec.unmarshalNMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentAmount = data
		case "paymentData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentData"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentData = data
		case "test":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("test"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Test = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNPaymentTokenType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPaymentTokenType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVariantOptionFilter(ctx context.Context, obj any) (model.VariantOptionFilter, error) {
	var it model.VariantOptionFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _BaseCartLine(ctx context.Context, sel ast.SelectionSet, obj model.BaseCartLine) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.ComponentizableCartLine:
		return ec._ComponentizableCartLine(ctx, sel, &obj)
	case *model.ComponentizableCartLine:
		if obj == nil {
			return graphql.Null
		}
		return ec._ComponentizableCartLine(ctx, sel, obj)
	case model.CartLine:
		return ec._CartLine(ctx, sel, &obj)
	case *model.CartLine:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartLine(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CartAddress(ctx context.Context, sel ast.SelectionSet, obj model.CartAddress) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CartDeliveryAddress:
		return ec._CartDeliveryAddress(ctx, sel, &obj)
	case *model.CartDeliveryAddress:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartDeliveryAddress(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CartCompletionAction(ctx context.Context, sel ast.SelectionSet, obj model.CartCompletionAction) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CompletePaymentChallenge:
		return ec._CompletePaymentChallenge(ctx, sel, &obj)
	case *model.CompletePaymentChallenge:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompletePaymentChallenge(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CartCompletionAttemptResult(ctx context.Context, sel ast.SelectionSet, obj model.CartCompletionAttemptResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CartCompletionSuccess:
		return ec._CartCompletionSuccess(ctx, sel, &obj)
	case *model.CartCompletionSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartCompletionSuccess(ctx, sel, obj)
	case model.CartCompletionProcessing:
		return ec._CartCompletionProcessing(ctx, sel, &obj)
	case *model.CartCompletionProcessing:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartCompletionProcessing(ctx, sel, obj)
	case model.CartCompletionFailed:
		return ec._CartCompletionFailed(ctx, sel, &obj)
	case *model.CartCompletionFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartCompletionFailed(ctx, sel, obj)
	case model.CartCompletionActionRequired:
		return ec._CartCompletionActionRequired(ctx, sel, &obj)
	case *model.CartCompletionActionRequired:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartCompletionActionRequired(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CartDiscountAllocation(ctx context.Context, sel ast.SelectionSet, obj model.CartDiscountAllocation) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CartCustomDiscountAllocation:
		return ec._CartCustomDiscountAllocation(ctx, sel, &obj)
	case *model.CartCustomDiscountAllocation:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartCustomDiscountAllocation(ctx, sel, obj)
	case model.CartCodeDiscountAllocation:
		return ec._CartCodeDiscountAllocation(ctx, sel, &obj)
	case *model.CartCodeDiscountAllocation:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartCodeDiscountAllocation(ctx, sel, obj)
	case model.CartAutomaticDiscountAllocation:
		return ec._CartAutomaticDiscountAllocation(ctx, sel, &obj)
	case *model.CartAutomaticDiscountAllocation:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartAutomaticDiscountAllocation(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CartPrepareForCompletionResult(ctx context.Context, sel ast.SelectionSet, obj model.CartPrepareForCompletionResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CartThrottled:
		return ec._CartThrottled(ctx, sel, &obj)
	case *model.CartThrottled:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartThrottled(ctx, sel, obj)
	case model.CartStatusReady:
		return ec._CartStatusReady(ctx, sel, &obj)
	case *model.CartStatusReady:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartStatusReady(ctx, sel, obj)
	case model.CartStatusNotReady:
		return ec._CartStatusNotReady(ctx, sel, &obj)
	case *model.CartStatusNotReady:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartStatusNotReady(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CartSubmitForCompletionResult(ctx context.Context, sel ast.SelectionSet, obj model.CartSubmitForCompletionResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.SubmitThrottled:
		return ec._SubmitThrottled(ctx, sel, &obj)
	case *model.SubmitThrottled:
		if obj == nil {
			return graphql.Null
		}
		return ec._SubmitThrottled(ctx, sel, obj)
	case model.SubmitSuccess:
		return ec._SubmitSuccess(ctx, sel, &obj)
	case *model.SubmitSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._SubmitSuccess(ctx, sel, obj)
	case model.SubmitFailed:
		return ec._SubmitFailed(ctx, sel, &obj)
	case *model.SubmitFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._SubmitFailed(ctx, sel, obj)
	case model.SubmitAlreadyAccepted:
		return ec._SubmitAlreadyAccepted(ctx, sel, &obj)
	case *model.SubmitAlreadyAccepted:
		if obj == nil {
			return graphql.Null
		}
		return ec._SubmitAlreadyAccepted(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeliveryAddress(ctx context.Context, sel ast.SelectionSet, obj model.DeliveryAddress) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.MailingAddress:
		return ec._MailingAddress(ctx, sel, &obj)
	case *model.MailingAddress:
		if obj == nil {
			return graphql.Null
		}
		return ec._MailingAddress(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DiscountApplication(ctx context.Context, sel ast.SelectionSet, obj model.DiscountApplication) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.ScriptDiscountApplication:
		return ec._ScriptDiscountApplication(ctx, sel, &obj)
	case *model.ScriptDiscountApplication:
		if obj == nil {
			return graphql.Null
		}
		return ec._ScriptDiscountApplication(ctx, sel, obj)
	case model.ManualDiscountApplication:
		return ec._ManualDiscountApplication(ctx, sel, &obj)
	case *model.ManualDiscountApplication:
		if obj == nil {
			return graphql.Null
		}
		return ec._ManualDiscountApplication(ctx, sel, obj)
	case model.DiscountCodeApplication:
		return ec._DiscountCodeApplication(ctx, sel, &obj)
	case *model.DiscountCodeApplication:
		if obj == nil {
			return graphql.Null
		}
		return ec._DiscountCodeApplication(ctx, sel, obj)
	case model.AutomaticDiscountApplication:
		return ec._AutomaticDiscountApplication(ctx, sel, &obj)
	case *model.AutomaticDiscountApplication:
		if obj == nil {
			return graphql.Null
		}
		return ec._AutomaticDiscountApplication(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DisplayableError(ctx context.Context, sel ast.SelectionSet, obj model.DisplayableError) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UserErrorsShopPayPaymentRequestSessionUserErrors:
		return ec._UserErrorsShopPayPaymentRequestSessionUserErrors(ctx, sel, &obj)
	case *model.UserErrorsShopPayPaymentRequestSessionUserErrors:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserErrorsShopPayPaymentRequestSessionUserErrors(ctx, sel, obj)
	case model.UserError:
		return ec._UserError(ctx, sel, &obj)
	case *model.UserError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserError(ctx, sel, obj)
	case model.MetafieldsSetUserError:
		return ec._MetafieldsSetUserError(ctx, sel, &obj)
	case *model.MetafieldsSetUserError:
		if obj == nil {
			return graphql.Null
		}
		return ec._MetafieldsSetUserError(ctx, sel, obj)
	case model.MetafieldDeleteUserError:
		return ec._MetafieldDeleteUserError(ctx, sel, &obj)
	case *model.MetafieldDeleteUserError:
		if obj == nil {
			return graphql.Null
		}
		return ec._MetafieldDeleteUserError(ctx, sel, obj)
	case model.CustomerUserError:
		return ec._CustomerUserError(ctx, sel, &obj)
	case *model.CustomerUserError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CustomerUserError(ctx, sel, obj)
	case model.CheckoutUserError:
		return ec._CheckoutUserError(ctx, sel, &obj)
	case *model.CheckoutUserError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CheckoutUserError(ctx, sel, obj)
	case model.CartUserError:
		return ec._CartUserError(ctx, sel, &obj)
	case *model.CartUserError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartUserError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _HasMetafields(ctx context.Context, sel ast.SelectionSet, obj model.HasMetafields) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.Page:
		return ec._Page(ctx, sel, &obj)
	case *model.Page:
		if obj == nil {
			return graphql.Null
		}
		return ec._Page(ctx, sel, obj)
	case model.Collection:
		return ec._Collection(ctx, sel, &obj)
	case *model.Collection:
		if obj == nil {
			return graphql.Null
		}
		return ec._Collection(ctx, sel, obj)
	case model.Article:
		return ec._Article(ctx, sel, &obj)
	case *model.Article:
		if obj == nil {
			return graphql.Null
		}
		return ec._Article(ctx, sel, obj)
	case model.Blog:
		return ec._Blog(ctx, sel, &obj)
	case *model.Blog:
		if obj == nil {
			return graphql.Null
		}
		return ec._Blog(ctx, sel, obj)
	case model.Shop:
		return ec._Shop(ctx, sel, &obj)
	case *model.Shop:
		if obj == nil {
			return graphql.Null
		}
		return ec._Shop(ctx, sel, obj)
	case model.ProductVariant:
		return ec._ProductVariant(ctx, sel, &obj)
	case *model.ProductVariant:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductVariant(ctx, sel, obj)
	case model.Order:
		return ec._Order(ctx, sel, &obj)
	case *model.Order:
		if obj == nil {
			return graphql.Null
		}
		return ec._Order(ctx, sel, obj)
	case model.Market:
		return ec._Market(ctx, sel, &obj)
	case *model.Market:
		if obj == nil {
			return graphql.Null
		}
		return ec._Market(ctx, sel, obj)
	case model.Location:
		return ec._Location(ctx, sel, &obj)
	case *model.Location:
		if obj == nil {
			return graphql.Null
		}
		return ec._Location(ctx, sel, obj)
	case model.CompanyLocation:
		return ec._CompanyLocation(ctx, sel, &obj)
	case *model.CompanyLocation:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompanyLocation(ctx, sel, obj)
	case model.Company:
		return ec._Company(ctx, sel, &obj)
	case *model.Company:
		if obj == nil {
			return graphql.Null
		}
		return ec._Company(ctx, sel, obj)
	case model.Cart:
		return ec._Cart(ctx, sel, &obj)
	case *model.Cart:
		if obj == nil {
			return graphql.Null
		}
		return ec._Cart(ctx, sel, obj)
	case model.SellingPlan:
		return ec._SellingPlan(ctx, sel, &obj)
	case *model.SellingPlan:
		if obj == nil {
			return graphql.Null
		}
		return ec._SellingPlan(ctx, sel, obj)
	case model.Customer:
		return ec._Customer(ctx, sel, &obj)
	case *model.Customer:
		if obj == nil {
			return graphql.Null
		}
		return ec._Customer(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Media(ctx context.Context, sel ast.SelectionSet, obj model.Media) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Video:
		return ec._Video(ctx, sel, &obj)
	case *model.Video:
		if obj == nil {
			return graphql.Null
		}
		return ec._Video(ctx, sel, obj)
	case model.Model3d:
		return ec._Model3d(ctx, sel, &obj)
	case *model.Model3d:
		if obj == nil {
			return graphql.Null
		}
		return ec._Model3d(ctx, sel, obj)
	case model.MediaImage:
		return ec._MediaImage(ctx, sel, &obj)
	case *model.MediaImage:
		if obj == nil {
			return graphql.Null
		}
		return ec._MediaImage(ctx, sel, obj)
	case model.ExternalVideo:
		return ec._ExternalVideo(ctx, sel, &obj)
	case *model.ExternalVideo:
		if obj == nil {
			return graphql.Null
		}
		return ec._ExternalVideo(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _MenuItemResource(ctx context.Context, sel ast.SelectionSet, obj model.MenuItemResource) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.Page:
		return ec._Page(ctx, sel, &obj)
	case *model.Page:
		if obj == nil {
			return graphql.Null
		}
		return ec._Page(ctx, sel, obj)
	case model.Collection:
		return ec._Collection(ctx, sel, &obj)
	case *model.Collection:
		if obj == nil {
			return graphql.Null
		}
		return ec._Collection(ctx, sel, obj)
	case model.Article:
		return ec._Article(ctx, sel, &obj)
	case *model.Article:
		if obj == nil {
			return graphql.Null
		}
		return ec._Article(ctx, sel, obj)
	case model.Blog:
		return ec._Blog(ctx, sel, &obj)
	case *model.Blog:
		if obj == nil {
			return graphql.Null
		}
		return ec._Blog(ctx, sel, obj)
	case model.Metaobject:
		return ec._Metaobject(ctx, sel, &obj)
	case *model.Metaobject:
		if obj == nil {
			return graphql.Null
		}
		return ec._Metaobject(ctx, sel, obj)
	case model.ShopPolicy:
		return ec._ShopPolicy(ctx, sel, &obj)
	case *model.ShopPolicy:
		if obj == nil {
			return graphql.Null
		}
		return ec._ShopPolicy(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Merchandise(ctx context.Context, sel ast.SelectionSet, obj model.Merchandise) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.ProductVariant:
		return ec._ProductVariant(ctx, sel, &obj)
	case *model.ProductVariant:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductVariant(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _MetafieldParentResource(ctx context.Context, sel ast.SelectionSet, obj model.MetafieldParentResource) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.Page:
		return ec._Page(ctx, sel, &obj)
	case *model.Page:
		if obj == nil {
			return graphql.Null
		}
		return ec._Page(ctx, sel, obj)
	case model.Collection:
		return ec._Collection(ctx, sel, &obj)
	case *model.Collection:
		if obj == nil {
			return graphql.Null
		}
		return ec._Collection(ctx, sel, obj)
	case model.Article:
		return ec._Article(ctx, sel, &obj)
	case *model.Article:
		if obj == nil {
			return graphql.Null
		}
		return ec._Article(ctx, sel, obj)
	case model.Blog:
		return ec._Blog(ctx, sel, &obj)
	case *model.Blog:
		if obj == nil {
			return graphql.Null
		}
		return ec._Blog(ctx, sel, obj)
	case model.Shop:
		return ec._Shop(ctx, sel, &obj)
	case *model.Shop:
		if obj == nil {
			return graphql.Null
		}
		return ec._Shop(ctx, sel, obj)
	case model.ProductVariant:
		return ec._ProductVariant(ctx, sel, &obj)
	case *model.ProductVariant:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductVariant(ctx, sel, obj)
	case model.Order:
		return ec._Order(ctx, sel, &obj)
	case *model.Order:
		if obj == nil {
			return graphql.Null
		}
		return ec._Order(ctx, sel, obj)
	case model.Market:
		return ec._Market(ctx, sel, &obj)
	case *model.Market:
		if obj == nil {
			return graphql.Null
		}
		return ec._Market(ctx, sel, obj)
	case model.Location:
		return ec._Location(ctx, sel, &obj)
	case *model.Location:
		if obj == nil {
			return graphql.Null
		}
		return ec._Location(ctx, sel, obj)
	case model.CompanyLocation:
		return ec._CompanyLocation(ctx, sel, &obj)
	case *model.CompanyLocation:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompanyLocation(ctx, sel, obj)
	case model.Company:
		return ec._Company(ctx, sel, &obj)
	case *model.Company:
		if obj == nil {
			return graphql.Null
		}
		return ec._Company(ctx, sel, obj)
	case model.Cart:
		return ec._Cart(ctx, sel, &obj)
	case *model.Cart:
		if obj == nil {
			return graphql.Null
		}
		return ec._Cart(ctx, sel, obj)
	case model.SellingPlan:
		return ec._SellingPlan(ctx, sel, &obj)
	case *model.SellingPlan:
		if obj == nil {
			return graphql.Null
		}
		return ec._SellingPlan(ctx, sel, obj)
	case model.Customer:
		return ec._Customer(ctx, sel, &obj)
	case *model.Customer:
		if obj == nil {
			return graphql.Null
		}
		return ec._Customer(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _MetafieldReference(ctx context.Context, sel ast.SelectionSet, obj model.MetafieldReference) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.Page:
		return ec._Page(ctx, sel, &obj)
	case *model.Page:
		if obj == nil {
			return graphql.Null
		}
		return ec._Page(ctx, sel, obj)
	case model.Collection:
		return ec._Collection(ctx, sel, &obj)
	case *model.Collection:
		if obj == nil {
			return graphql.Null
		}
		return ec._Collection(ctx, sel, obj)
	case model.Video:
		return ec._Video(ctx, sel, &obj)
	case *model.Video:
		if obj == nil {
			return graphql.Null
		}
		return ec._Video(ctx, sel, obj)
	case model.ProductVariant:
		return ec._ProductVariant(ctx, sel, &obj)
	case *model.ProductVariant:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductVariant(ctx, sel, obj)
	case model.Model3d:
		return ec._Model3d(ctx, sel, &obj)
	case *model.Model3d:
		if obj == nil {
			return graphql.Null
		}
		return ec._Model3d(ctx, sel, obj)
	case model.Metaobject:
		return ec._Metaobject(ctx, sel, &obj)
	case *model.Metaobject:
		if obj == nil {
			return graphql.Null
		}
		return ec._Metaobject(ctx, sel, obj)
	case model.MediaImage:
		return ec._MediaImage(ctx, sel, &obj)
	case *model.MediaImage:
		if obj == nil {
			return graphql.Null
		}
		return ec._MediaImage(ctx, sel, obj)
	case model.GenericFile:
		return ec._GenericFile(ctx, sel, &obj)
	case *model.GenericFile:
		if obj == nil {
			return graphql.Null
		}
		return ec._GenericFile(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj model.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.Page:
		return ec._Page(ctx, sel, &obj)
	case *model.Page:
		if obj == nil {
			return graphql.Null
		}
		return ec._Page(ctx, sel, obj)
	case model.Collection:
		return ec._Collection(ctx, sel, &obj)
	case *model.Collection:
		if obj == nil {
			return graphql.Null
		}
		return ec._Collection(ctx, sel, obj)
	case model.Article:
		return ec._Article(ctx, sel, &obj)
	case *model.Article:
		if obj == nil {
			return graphql.Null
		}
		return ec._Article(ctx, sel, obj)
	case model.Blog:
		return ec._Blog(ctx, sel, &obj)
	case *model.Blog:
		if obj == nil {
			return graphql.Null
		}
		return ec._Blog(ctx, sel, obj)
	case model.Video:
		return ec._Video(ctx, sel, &obj)
	case *model.Video:
		if obj == nil {
			return graphql.Null
		}
		return ec._Video(ctx, sel, obj)
	case model.Shop:
		return ec._Shop(ctx, sel, &obj)
	case *model.Shop:
		if obj == nil {
			return graphql.Null
		}
		return ec._Shop(ctx, sel, obj)
	case model.ProductVariant:
		return ec._ProductVariant(ctx, sel, &obj)
	case *model.ProductVariant:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductVariant(ctx, sel, obj)
	case model.Order:
		return ec._Order(ctx, sel, &obj)
	case *model.Order:
		if obj == nil {
			return graphql.Null
		}
		return ec._Order(ctx, sel, obj)
	case model.Model3d:
		return ec._Model3d(ctx, sel, &obj)
	case *model.Model3d:
		if obj == nil {
			return graphql.Null
		}
		return ec._Model3d(ctx, sel, obj)
	case model.Metaobject:
		return ec._Metaobject(ctx, sel, &obj)
	case *model.Metaobject:
		if obj == nil {
			return graphql.Null
		}
		return ec._Metaobject(ctx, sel, obj)
	case model.MediaImage:
		return ec._MediaImage(ctx, sel, &obj)
	case *model.MediaImage:
		if obj == nil {
			return graphql.Null
		}
		return ec._MediaImage(ctx, sel, obj)
	case model.Market:
		return ec._Market(ctx, sel, &obj)
	case *model.Market:
		if obj == nil {
			return graphql.Null
		}
		return ec._Market(ctx, sel, obj)
	case model.Location:
		return ec._Location(ctx, sel, &obj)
	case *model.Location:
		if obj == nil {
			return graphql.Null
		}
		return ec._Location(ctx, sel, obj)
	case model.ExternalVideo:
		return ec._ExternalVideo(ctx, sel, &obj)
	case *model.ExternalVideo:
		if obj == nil {
			return graphql.Null
		}
		return ec._ExternalVideo(ctx, sel, obj)
	case model.ComponentizableCartLine:
		return ec._ComponentizableCartLine(ctx, sel, &obj)
	case *model.ComponentizableCartLine:
		if obj == nil {
			return graphql.Null
		}
		return ec._ComponentizableCartLine(ctx, sel, obj)
	case model.CompanyLocation:
		return ec._CompanyLocation(ctx, sel, &obj)
	case *model.CompanyLocation:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompanyLocation(ctx, sel, obj)
	case model.Company:
		return ec._Company(ctx, sel, &obj)
	case *model.Company:
		if obj == nil {
			return graphql.Null
		}
		return ec._Company(ctx, sel, obj)
	case model.CartLine:
		return ec._CartLine(ctx, sel, &obj)
	case *model.CartLine:
		if obj == nil {
			return graphql.Null
		}
		return ec._CartLine(ctx, sel, obj)
	case model.Cart:
		return ec._Cart(ctx, sel, &obj)
	case *model.Cart:
		if obj == nil {
			return graphql.Null
		}
		return ec._Cart(ctx, sel, obj)
	case model.URLRedirect:
		return ec._UrlRedirect(ctx, sel, &obj)
	case *model.URLRedirect:
		if obj == nil {
			return graphql.Null
		}
		return ec._UrlRedirect(ctx, sel, obj)
	case model.TaxonomyCategory:
		return ec._TaxonomyCategory(ctx, sel, &obj)
	case *model.TaxonomyCategory:
		if obj == nil {
			return graphql.Null
		}
		return ec._TaxonomyCategory(ctx, sel, obj)
	case model.ShopPolicy:
		return ec._ShopPolicy(ctx, sel, &obj)
	case *model.ShopPolicy:
		if obj == nil {
			return graphql.Null
		}
		return ec._ShopPolicy(ctx, sel, obj)
	case model.ShopPayInstallmentsProductVariantPricing:
		return ec._ShopPayInstallmentsProductVariantPricing(ctx, sel, &obj)
	case *model.ShopPayInstallmentsProductVariantPricing:
		if obj == nil {
			return graphql.Null
		}
		return ec._ShopPayInstallmentsProductVariantPricing(ctx, sel, obj)
	case model.ShopPayInstallmentsFinancingPlanTerm:
		return ec._ShopPayInstallmentsFinancingPlanTerm(ctx, sel, &obj)
	case *model.ShopPayInstallmentsFinancingPlanTerm:
		if obj == nil {
			return graphql.Null
		}
		return ec._ShopPayInstallmentsFinancingPlanTerm(ctx, sel, obj)
	case model.ShopPayInstallmentsFinancingPlan:
		return ec._ShopPayInstallmentsFinancingPlan(ctx, sel, &obj)
	case *model.ShopPayInstallmentsFinancingPlan:
		if obj == nil {
			return graphql.Null
		}
		return ec._ShopPayInstallmentsFinancingPlan(ctx, sel, obj)
	case model.ProductOptionValue:
		return ec._ProductOptionValue(ctx, sel, &obj)
	case *model.ProductOptionValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductOptionValue(ctx, sel, obj)
	case model.ProductOption:
		return ec._ProductOption(ctx, sel, &obj)
	case *model.ProductOption:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductOption(ctx, sel, obj)
	case model.Payment:
		return ec._Payment(ctx, sel, &obj)
	case *model.Payment:
		if obj == nil {
			return graphql.Null
		}
		return ec._Payment(ctx, sel, obj)
	case model.Metafield:
		return ec._Metafield(ctx, sel, &obj)
	case *model.Metafield:
		if obj == nil {
			return graphql.Null
		}
		return ec._Metafield(ctx, sel, obj)
	case model.MenuItem:
		return ec._MenuItem(ctx, sel, &obj)
	case *model.MenuItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._MenuItem(ctx, sel, obj)
	case model.Menu:
		return ec._Menu(ctx, sel, &obj)
	case *model.Menu:
		if obj == nil {
			return graphql.Null
		}
		return ec._Menu(ctx, sel, obj)
	case model.MediaPresentation:
		return ec._MediaPresentation(ctx, sel, &obj)
	case *model.MediaPresentation:
		if obj == nil {
			return graphql.Null
		}
		return ec._MediaPresentation(ctx, sel, obj)
	case model.MailingAddress:
		return ec._MailingAddress(ctx, sel, &obj)
	case *model.MailingAddress:
		if obj == nil {
			return graphql.Null
		}
		return ec._MailingAddress(ctx, sel, obj)
	case model.GenericFile:
		return ec._GenericFile(ctx, sel, &obj)
	case *model.GenericFile:
		if obj == nil {
			return graphql.Null
		}
		return ec._GenericFile(ctx, sel, obj)
	case model.CompanyContact:
		return ec._CompanyContact(ctx, sel, &obj)
	case *model.CompanyContact:
		if obj == nil {
			return graphql.Null
		}
		return ec._CompanyContact(ctx, sel, obj)
	case model.Comment:
		return ec._Comment(ctx, sel, &obj)
	case *model.Comment:
		if obj == nil {
			return graphql.Null
		}
		return ec._Comment(ctx, sel, obj)
	case model.CheckoutLineItem:
		return ec._CheckoutLineItem(ctx, sel, &obj)
	case *model.CheckoutLineItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._CheckoutLineItem(ctx, sel, obj)
	case model.Checkout:
		return ec._Checkout(ctx, sel, &obj)
	case *model.Checkout:
		if obj == nil {
			return graphql.Null
		}
		return ec._Checkout(ctx, sel, obj)
	case model.AppliedGiftCard:
		return ec._AppliedGiftCard(ctx, sel, &obj)
	case *model.AppliedGiftCard:
		if obj == nil {
			return graphql.Null
		}
		return ec._AppliedGiftCard(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _OnlineStorePublishable(ctx context.Context, sel ast.SelectionSet, obj model.OnlineStorePublishable) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.Page:
		return ec._Page(ctx, sel, &obj)
	case *model.Page:
		if obj == nil {
			return graphql.Null
		}
		return ec._Page(ctx, sel, obj)
	case model.Collection:
		return ec._Collection(ctx, sel, &obj)
	case *model.Collection:
		if obj == nil {
			return graphql.Null
		}
		return ec._Collection(ctx, sel, obj)
	case model.Article:
		return ec._Article(ctx, sel, &obj)
	case *model.Article:
		if obj == nil {
			return graphql.Null
		}
		return ec._Article(ctx, sel, obj)
	case model.Blog:
		return ec._Blog(ctx, sel, &obj)
	case *model.Blog:
		if obj == nil {
			return graphql.Null
		}
		return ec._Blog(ctx, sel, obj)
	case model.Metaobject:
		return ec._Metaobject(ctx, sel, &obj)
	case *model.Metaobject:
		if obj == nil {
			return graphql.Null
		}
		return ec._Metaobject(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _PricingValue(ctx context.Context, sel ast.SelectionSet, obj model.PricingValue) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.PricingPercentageValue:
		return ec._PricingPercentageValue(ctx, sel, &obj)
	case *model.PricingPercentageValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._PricingPercentageValue(ctx, sel, obj)
	case model.MoneyV2:
		return ec._MoneyV2(ctx, sel, &obj)
	case *model.MoneyV2:
		if obj == nil {
			return graphql.Null
		}
		return ec._MoneyV2(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _SearchResultItem(ctx context.Context, sel ast.SelectionSet, obj model.SearchResultItem) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.Page:
		return ec._Page(ctx, sel, &obj)
	case *model.Page:
		if obj == nil {
			return graphql.Null
		}
		return ec._Page(ctx, sel, obj)
	case model.Article:
		return ec._Article(ctx, sel, &obj)
	case *model.Article:
		if obj == nil {
			return graphql.Null
		}
		return ec._Article(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _SellingPlanBillingPolicy(ctx context.Context, sel ast.SelectionSet, obj model.SellingPlanBillingPolicy) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.SellingPlanRecurringBillingPolicy:
		return ec._SellingPlanRecurringBillingPolicy(ctx, sel, &obj)
	case *model.SellingPlanRecurringBillingPolicy:
		if obj == nil {
			return graphql.Null
		}
		return ec._SellingPlanRecurringBillingPolicy(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _SellingPlanCheckoutChargeValue(ctx context.Context, sel ast.SelectionSet, obj model.SellingPlanCheckoutChargeValue) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.SellingPlanCheckoutChargePercentageValue:
		return ec._SellingPlanCheckoutChargePercentageValue(ctx, sel, &obj)
	case *model.SellingPlanCheckoutChargePercentageValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._SellingPlanCheckoutChargePercentageValue(ctx, sel, obj)
	case model.MoneyV2:
		return ec._MoneyV2(ctx, sel, &obj)
	case *model.MoneyV2:
		if obj == nil {
			return graphql.Null
		}
		return ec._MoneyV2(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _SellingPlanDeliveryPolicy(ctx context.Context, sel ast.SelectionSet, obj model.SellingPlanDeliveryPolicy) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.SellingPlanRecurringDeliveryPolicy:
		return ec._SellingPlanRecurringDeliveryPolicy(ctx, sel, &obj)
	case *model.SellingPlanRecurringDeliveryPolicy:
		if obj == nil {
			return graphql.Null
		}
		return ec._SellingPlanRecurringDeliveryPolicy(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _SellingPlanPriceAdjustmentValue(ctx context.Context, sel ast.SelectionSet, obj model.SellingPlanPriceAdjustmentValue) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.SellingPlanPercentagePriceAdjustment:
		return ec._SellingPlanPercentagePriceAdjustment(ctx, sel, &obj)
	case *model.SellingPlanPercentagePriceAdjustment:
		if obj == nil {
			return graphql.Null
		}
		return ec._SellingPlanPercentagePriceAdjustment(ctx, sel, obj)
	case model.SellingPlanFixedPriceAdjustment:
		return ec._SellingPlanFixedPriceAdjustment(ctx, sel, &obj)
	case *model.SellingPlanFixedPriceAdjustment:
		if obj == nil {
			return graphql.Null
		}
		return ec._SellingPlanFixedPriceAdjustment(ctx, sel, obj)
	case model.SellingPlanFixedAmountPriceAdjustment:
		return ec._SellingPlanFixedAmountPriceAdjustment(ctx, sel, &obj)
	case *model.SellingPlanFixedAmountPriceAdjustment:
		if obj == nil {
			return graphql.Null
		}
		return ec._SellingPlanFixedAmountPriceAdjustment(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _SitemapResourceInterface(ctx context.Context, sel ast.SelectionSet, obj model.SitemapResourceInterface) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.SitemapResourceMetaobject:
		return ec._SitemapResourceMetaobject(ctx, sel, &obj)
	case *model.SitemapResourceMetaobject:
		if obj == nil {
			return graphql.Null
		}
		return ec._SitemapResourceMetaobject(ctx, sel, obj)
	case model.SitemapResource:
		return ec._SitemapResource(ctx, sel, &obj)
	case *model.SitemapResource:
		if obj == nil {
			return graphql.Null
		}
		return ec._SitemapResource(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Trackable(ctx context.Context, sel ast.SelectionSet, obj model.Trackable) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.Page:
		return ec._Page(ctx, sel, &obj)
	case *model.Page:
		if obj == nil {
			return graphql.Null
		}
		return ec._Page(ctx, sel, obj)
	case model.Collection:
		return ec._Collection(ctx, sel, &obj)
	case *model.Collection:
		if obj == nil {
			return graphql.Null
		}
		return ec._Collection(ctx, sel, obj)
	case model.Article:
		return ec._Article(ctx, sel, &obj)
	case *model.Article:
		if obj == nil {
			return graphql.Null
		}
		return ec._Article(ctx, sel, obj)
	case model.SearchQuerySuggestion:
		return ec._SearchQuerySuggestion(ctx, sel, &obj)
	case *model.SearchQuerySuggestion:
		if obj == nil {
			return graphql.Null
		}
		return ec._SearchQuerySuggestion(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var apiVersionImplementors = []string{"ApiVersion"}

func (ec *executionContext) _ApiVersion(ctx context.Context, sel ast.SelectionSet, obj *model.APIVersion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiVersionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiVersion")
		case "displayName":
			out.Values[i] = ec._ApiVersion_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "handle":
			out.Values[i] = ec._ApiVersion_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "supported":
			out.Values[i] = ec._ApiVersion_supported(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var appliedGiftCardImplementors = []string{"AppliedGiftCard", "Node"}

func (ec *executionContext) _AppliedGiftCard(ctx context.Context, sel ast.SelectionSet, obj *model.AppliedGiftCard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appliedGiftCardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppliedGiftCard")
		case "amountUsed":
			out.Values[i] = ec._AppliedGiftCard_amountUsed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amountUsedV2":
			out.Values[i] = ec._AppliedGiftCard_amountUsedV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "balance":
			out.Values[i] = ec._AppliedGiftCard_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "balanceV2":
			out.Values[i] = ec._AppliedGiftCard_balanceV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._AppliedGiftCard_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastCharacters":
			out.Values[i] = ec._AppliedGiftCard_lastCharacters(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "presentmentAmountUsed":
			out.Values[i] = ec._AppliedGiftCard_presentmentAmountUsed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var articleImplementors = []string{"Article", "MenuItemResource", "MetafieldParentResource", "SearchResultItem", "HasMetafields", "Node", "OnlineStorePublishable", "Trackable"}

func (ec *executionContext) _Article(ctx context.Context, sel ast.SelectionSet, obj *model.Article) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Article")
		case "author":
			out.Values[i] = ec._Article_author(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authorV2":
			out.Values[i] = ec._Article_authorV2(ctx, field, obj)
		case "blog":
			out.Values[i] = ec._Article_blog(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "comments":
			out.Values[i] = ec._Article_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._Article_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contentHtml":
			out.Values[i] = ec._Article_contentHtml(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "excerpt":
			out.Values[i] = ec._Article_excerpt(ctx, field, obj)
		case "excerptHtml":
			out.Values[i] = ec._Article_excerptHtml(ctx, field, obj)
		case "handle":
			out.Values[i] = ec._Article_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Article_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image":
			out.Values[i] = ec._Article_image(ctx, field, obj)
		case "metafield":
			out.Values[i] = ec._Article_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Article_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "onlineStoreUrl":
			out.Values[i] = ec._Article_onlineStoreUrl(ctx, field, obj)
		case "publishedAt":
			out.Values[i] = ec._Article_publishedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "seo":
			out.Values[i] = ec._Article_seo(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._Article_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Article_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "trackingParameters":
			out.Values[i] = ec._Article_trackingParameters(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var articleAuthorImplementors = []string{"ArticleAuthor"}

func (ec *executionContext) _ArticleAuthor(ctx context.Context, sel ast.SelectionSet, obj *model.ArticleAuthor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleAuthorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticleAuthor")
		case "bio":
			out.Values[i] = ec._ArticleAuthor_bio(ctx, field, obj)
		case "email":
			out.Values[i] = ec._ArticleAuthor_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstName":
			out.Values[i] = ec._ArticleAuthor_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastName":
			out.Values[i] = ec._ArticleAuthor_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._ArticleAuthor_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var articleConnectionImplementors = []string{"ArticleConnection"}

func (ec *executionContext) _ArticleConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ArticleConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticleConnection")
		case "edges":
			out.Values[i] = ec._ArticleConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ArticleConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ArticleConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var articleEdgeImplementors = []string{"ArticleEdge"}

func (ec *executionContext) _ArticleEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ArticleEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticleEdge")
		case "cursor":
			out.Values[i] = ec._ArticleEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._ArticleEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var attributeImplementors = []string{"Attribute"}

func (ec *executionContext) _Attribute(ctx context.Context, sel ast.SelectionSet, obj *model.Attribute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attributeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attribute")
		case "key":
			out.Values[i] = ec._Attribute_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Attribute_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var automaticDiscountApplicationImplementors = []string{"AutomaticDiscountApplication", "DiscountApplication"}

func (ec *executionContext) _AutomaticDiscountApplication(ctx context.Context, sel ast.SelectionSet, obj *model.AutomaticDiscountApplication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, automaticDiscountApplicationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AutomaticDiscountApplication")
		case "allocationMethod":
			out.Values[i] = ec._AutomaticDiscountApplication_allocationMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetSelection":
			out.Values[i] = ec._AutomaticDiscountApplication_targetSelection(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetType":
			out.Values[i] = ec._AutomaticDiscountApplication_targetType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._AutomaticDiscountApplication_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._AutomaticDiscountApplication_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var availableShippingRatesImplementors = []string{"AvailableShippingRates"}

func (ec *executionContext) _AvailableShippingRates(ctx context.Context, sel ast.SelectionSet, obj *model.AvailableShippingRates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, availableShippingRatesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AvailableShippingRates")
		case "ready":
			out.Values[i] = ec._AvailableShippingRates_ready(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shippingRates":
			out.Values[i] = ec._AvailableShippingRates_shippingRates(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var baseCartLineConnectionImplementors = []string{"BaseCartLineConnection"}

func (ec *executionContext) _BaseCartLineConnection(ctx context.Context, sel ast.SelectionSet, obj *model.BaseCartLineConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, baseCartLineConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BaseCartLineConnection")
		case "edges":
			out.Values[i] = ec._BaseCartLineConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._BaseCartLineConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._BaseCartLineConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var baseCartLineEdgeImplementors = []string{"BaseCartLineEdge"}

func (ec *executionContext) _BaseCartLineEdge(ctx context.Context, sel ast.SelectionSet, obj *model.BaseCartLineEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, baseCartLineEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BaseCartLineEdge")
		case "cursor":
			out.Values[i] = ec._BaseCartLineEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._BaseCartLineEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var blogImplementors = []string{"Blog", "MenuItemResource", "MetafieldParentResource", "HasMetafields", "Node", "OnlineStorePublishable"}

func (ec *executionContext) _Blog(ctx context.Context, sel ast.SelectionSet, obj *model.Blog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Blog")
		case "articleByHandle":
			out.Values[i] = ec._Blog_articleByHandle(ctx, field, obj)
		case "articles":
			out.Values[i] = ec._Blog_articles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authors":
			out.Values[i] = ec._Blog_authors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "handle":
			out.Values[i] = ec._Blog_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Blog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metafield":
			out.Values[i] = ec._Blog_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Blog_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "onlineStoreUrl":
			out.Values[i] = ec._Blog_onlineStoreUrl(ctx, field, obj)
		case "seo":
			out.Values[i] = ec._Blog_seo(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Blog_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var blogConnectionImplementors = []string{"BlogConnection"}

func (ec *executionContext) _BlogConnection(ctx context.Context, sel ast.SelectionSet, obj *model.BlogConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blogConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlogConnection")
		case "edges":
			out.Values[i] = ec._BlogConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._BlogConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._BlogConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var blogEdgeImplementors = []string{"BlogEdge"}

func (ec *executionContext) _BlogEdge(ctx context.Context, sel ast.SelectionSet, obj *model.BlogEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blogEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlogEdge")
		case "cursor":
			out.Values[i] = ec._BlogEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._BlogEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var brandImplementors = []string{"Brand"}

func (ec *executionContext) _Brand(ctx context.Context, sel ast.SelectionSet, obj *model.Brand) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, brandImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Brand")
		case "colors":
			out.Values[i] = ec._Brand_colors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "coverImage":
			out.Values[i] = ec._Brand_coverImage(ctx, field, obj)
		case "logo":
			out.Values[i] = ec._Brand_logo(ctx, field, obj)
		case "shortDescription":
			out.Values[i] = ec._Brand_shortDescription(ctx, field, obj)
		case "slogan":
			out.Values[i] = ec._Brand_slogan(ctx, field, obj)
		case "squareLogo":
			out.Values[i] = ec._Brand_squareLogo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var brandColorGroupImplementors = []string{"BrandColorGroup"}

func (ec *executionContext) _BrandColorGroup(ctx context.Context, sel ast.SelectionSet, obj *model.BrandColorGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, brandColorGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BrandColorGroup")
		case "background":
			out.Values[i] = ec._BrandColorGroup_background(ctx, field, obj)
		case "foreground":
			out.Values[i] = ec._BrandColorGroup_foreground(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var brandColorsImplementors = []string{"BrandColors"}

func (ec *executionContext) _BrandColors(ctx context.Context, sel ast.SelectionSet, obj *model.BrandColors) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, brandColorsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BrandColors")
		case "primary":
			out.Values[i] = ec._BrandColors_primary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "secondary":
			out.Values[i] = ec._BrandColors_secondary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartImplementors = []string{"Cart", "MetafieldParentResource", "HasMetafields", "Node"}

func (ec *executionContext) _Cart(ctx context.Context, sel ast.SelectionSet, obj *model.Cart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Cart")
		case "appliedGiftCards":
			out.Values[i] = ec._Cart_appliedGiftCards(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attribute":
			out.Values[i] = ec._Cart_attribute(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._Cart_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "buyerIdentity":
			out.Values[i] = ec._Cart_buyerIdentity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "checkoutUrl":
			out.Values[i] = ec._Cart_checkoutUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cost":
			out.Values[i] = ec._Cart_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Cart_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "delivery":
			out.Values[i] = ec._Cart_delivery(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryGroups":
			out.Values[i] = ec._Cart_deliveryGroups(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountAllocations":
			out.Values[i] = ec._Cart_discountAllocations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountCodes":
			out.Values[i] = ec._Cart_discountCodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "estimatedCost":
			out.Values[i] = ec._Cart_estimatedCost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Cart_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lines":
			out.Values[i] = ec._Cart_lines(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metafield":
			out.Values[i] = ec._Cart_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Cart_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "note":
			out.Values[i] = ec._Cart_note(ctx, field, obj)
		case "totalQuantity":
			out.Values[i] = ec._Cart_totalQuantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Cart_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartAttributesUpdatePayloadImplementors = []string{"CartAttributesUpdatePayload"}

func (ec *executionContext) _CartAttributesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartAttributesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartAttributesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartAttributesUpdatePayload")
		case "cart":
			out.Values[i] = ec._CartAttributesUpdatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartAttributesUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartAttributesUpdatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartAutomaticDiscountAllocationImplementors = []string{"CartAutomaticDiscountAllocation", "CartDiscountAllocation"}

func (ec *executionContext) _CartAutomaticDiscountAllocation(ctx context.Context, sel ast.SelectionSet, obj *model.CartAutomaticDiscountAllocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartAutomaticDiscountAllocationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartAutomaticDiscountAllocation")
		case "discountApplication":
			out.Values[i] = ec._CartAutomaticDiscountAllocation_discountApplication(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountedAmount":
			out.Values[i] = ec._CartAutomaticDiscountAllocation_discountedAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetType":
			out.Values[i] = ec._CartAutomaticDiscountAllocation_targetType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._CartAutomaticDiscountAllocation_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartBillingAddressUpdatePayloadImplementors = []string{"CartBillingAddressUpdatePayload"}

func (ec *executionContext) _CartBillingAddressUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartBillingAddressUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartBillingAddressUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartBillingAddressUpdatePayload")
		case "cart":
			out.Values[i] = ec._CartBillingAddressUpdatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartBillingAddressUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartBillingAddressUpdatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartBuyerIdentityImplementors = []string{"CartBuyerIdentity"}

func (ec *executionContext) _CartBuyerIdentity(ctx context.Context, sel ast.SelectionSet, obj *model.CartBuyerIdentity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartBuyerIdentityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartBuyerIdentity")
		case "countryCode":
			out.Values[i] = ec._CartBuyerIdentity_countryCode(ctx, field, obj)
		case "customer":
			out.Values[i] = ec._CartBuyerIdentity_customer(ctx, field, obj)
		case "deliveryAddressPreferences":
			out.Values[i] = ec._CartBuyerIdentity_deliveryAddressPreferences(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._CartBuyerIdentity_email(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._CartBuyerIdentity_phone(ctx, field, obj)
		case "preferences":
			out.Values[i] = ec._CartBuyerIdentity_preferences(ctx, field, obj)
		case "purchasingCompany":
			out.Values[i] = ec._CartBuyerIdentity_purchasingCompany(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartBuyerIdentityUpdatePayloadImplementors = []string{"CartBuyerIdentityUpdatePayload"}

func (ec *executionContext) _CartBuyerIdentityUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartBuyerIdentityUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartBuyerIdentityUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartBuyerIdentityUpdatePayload")
		case "cart":
			out.Values[i] = ec._CartBuyerIdentityUpdatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartBuyerIdentityUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartBuyerIdentityUpdatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartCodeDiscountAllocationImplementors = []string{"CartCodeDiscountAllocation", "CartDiscountAllocation"}

func (ec *executionContext) _CartCodeDiscountAllocation(ctx context.Context, sel ast.SelectionSet, obj *model.CartCodeDiscountAllocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartCodeDiscountAllocationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartCodeDiscountAllocation")
		case "code":
			out.Values[i] = ec._CartCodeDiscountAllocation_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountApplication":
			out.Values[i] = ec._CartCodeDiscountAllocation_discountApplication(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountedAmount":
			out.Values[i] = ec._CartCodeDiscountAllocation_discountedAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetType":
			out.Values[i] = ec._CartCodeDiscountAllocation_targetType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartCompletionActionRequiredImplementors = []string{"CartCompletionActionRequired", "CartCompletionAttemptResult"}

func (ec *executionContext) _CartCompletionActionRequired(ctx context.Context, sel ast.SelectionSet, obj *model.CartCompletionActionRequired) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartCompletionActionRequiredImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartCompletionActionRequired")
		case "action":
			out.Values[i] = ec._CartCompletionActionRequired_action(ctx, field, obj)
		case "id":
			out.Values[i] = ec._CartCompletionActionRequired_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartCompletionFailedImplementors = []string{"CartCompletionFailed", "CartCompletionAttemptResult"}

func (ec *executionContext) _CartCompletionFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CartCompletionFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartCompletionFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartCompletionFailed")
		case "errors":
			out.Values[i] = ec._CartCompletionFailed_errors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._CartCompletionFailed_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartCompletionProcessingImplementors = []string{"CartCompletionProcessing", "CartCompletionAttemptResult"}

func (ec *executionContext) _CartCompletionProcessing(ctx context.Context, sel ast.SelectionSet, obj *model.CartCompletionProcessing) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartCompletionProcessingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartCompletionProcessing")
		case "id":
			out.Values[i] = ec._CartCompletionProcessing_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pollDelay":
			out.Values[i] = ec._CartCompletionProcessing_pollDelay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartCompletionSuccessImplementors = []string{"CartCompletionSuccess", "CartCompletionAttemptResult"}

func (ec *executionContext) _CartCompletionSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CartCompletionSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartCompletionSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartCompletionSuccess")
		case "completedAt":
			out.Values[i] = ec._CartCompletionSuccess_completedAt(ctx, field, obj)
		case "id":
			out.Values[i] = ec._CartCompletionSuccess_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "orderId":
			out.Values[i] = ec._CartCompletionSuccess_orderId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "orderUrl":
			out.Values[i] = ec._CartCompletionSuccess_orderUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartCostImplementors = []string{"CartCost"}

func (ec *executionContext) _CartCost(ctx context.Context, sel ast.SelectionSet, obj *model.CartCost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartCostImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartCost")
		case "checkoutChargeAmount":
			out.Values[i] = ec._CartCost_checkoutChargeAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subtotalAmount":
			out.Values[i] = ec._CartCost_subtotalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subtotalAmountEstimated":
			out.Values[i] = ec._CartCost_subtotalAmountEstimated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._CartCost_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmountEstimated":
			out.Values[i] = ec._CartCost_totalAmountEstimated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalDutyAmount":
			out.Values[i] = ec._CartCost_totalDutyAmount(ctx, field, obj)
		case "totalDutyAmountEstimated":
			out.Values[i] = ec._CartCost_totalDutyAmountEstimated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalTaxAmount":
			out.Values[i] = ec._CartCost_totalTaxAmount(ctx, field, obj)
		case "totalTaxAmountEstimated":
			out.Values[i] = ec._CartCost_totalTaxAmountEstimated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartCreatePayloadImplementors = []string{"CartCreatePayload"}

func (ec *executionContext) _CartCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartCreatePayload")
		case "cart":
			out.Values[i] = ec._CartCreatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartCreatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartCreatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartCustomDiscountAllocationImplementors = []string{"CartCustomDiscountAllocation", "CartDiscountAllocation"}

func (ec *executionContext) _CartCustomDiscountAllocation(ctx context.Context, sel ast.SelectionSet, obj *model.CartCustomDiscountAllocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartCustomDiscountAllocationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartCustomDiscountAllocation")
		case "discountApplication":
			out.Values[i] = ec._CartCustomDiscountAllocation_discountApplication(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountedAmount":
			out.Values[i] = ec._CartCustomDiscountAllocation_discountedAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetType":
			out.Values[i] = ec._CartCustomDiscountAllocation_targetType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._CartCustomDiscountAllocation_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryImplementors = []string{"CartDelivery"}

func (ec *executionContext) _CartDelivery(ctx context.Context, sel ast.SelectionSet, obj *model.CartDelivery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDelivery")
		case "addresses":
			out.Values[i] = ec._CartDelivery_addresses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryAddressImplementors = []string{"CartDeliveryAddress", "CartAddress"}

func (ec *executionContext) _CartDeliveryAddress(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryAddressImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryAddress")
		case "address1":
			out.Values[i] = ec._CartDeliveryAddress_address1(ctx, field, obj)
		case "address2":
			out.Values[i] = ec._CartDeliveryAddress_address2(ctx, field, obj)
		case "city":
			out.Values[i] = ec._CartDeliveryAddress_city(ctx, field, obj)
		case "company":
			out.Values[i] = ec._CartDeliveryAddress_company(ctx, field, obj)
		case "countryCode":
			out.Values[i] = ec._CartDeliveryAddress_countryCode(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._CartDeliveryAddress_firstName(ctx, field, obj)
		case "formatted":
			out.Values[i] = ec._CartDeliveryAddress_formatted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "formattedArea":
			out.Values[i] = ec._CartDeliveryAddress_formattedArea(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._CartDeliveryAddress_lastName(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._CartDeliveryAddress_latitude(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._CartDeliveryAddress_longitude(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CartDeliveryAddress_name(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._CartDeliveryAddress_phone(ctx, field, obj)
		case "provinceCode":
			out.Values[i] = ec._CartDeliveryAddress_provinceCode(ctx, field, obj)
		case "zip":
			out.Values[i] = ec._CartDeliveryAddress_zip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryAddressesAddPayloadImplementors = []string{"CartDeliveryAddressesAddPayload"}

func (ec *executionContext) _CartDeliveryAddressesAddPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryAddressesAddPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryAddressesAddPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryAddressesAddPayload")
		case "cart":
			out.Values[i] = ec._CartDeliveryAddressesAddPayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartDeliveryAddressesAddPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartDeliveryAddressesAddPayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryAddressesRemovePayloadImplementors = []string{"CartDeliveryAddressesRemovePayload"}

func (ec *executionContext) _CartDeliveryAddressesRemovePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryAddressesRemovePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryAddressesRemovePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryAddressesRemovePayload")
		case "cart":
			out.Values[i] = ec._CartDeliveryAddressesRemovePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartDeliveryAddressesRemovePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartDeliveryAddressesRemovePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryAddressesReplacePayloadImplementors = []string{"CartDeliveryAddressesReplacePayload"}

func (ec *executionContext) _CartDeliveryAddressesReplacePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryAddressesReplacePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryAddressesReplacePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryAddressesReplacePayload")
		case "cart":
			out.Values[i] = ec._CartDeliveryAddressesReplacePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartDeliveryAddressesReplacePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartDeliveryAddressesReplacePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryAddressesUpdatePayloadImplementors = []string{"CartDeliveryAddressesUpdatePayload"}

func (ec *executionContext) _CartDeliveryAddressesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryAddressesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryAddressesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryAddressesUpdatePayload")
		case "cart":
			out.Values[i] = ec._CartDeliveryAddressesUpdatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartDeliveryAddressesUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartDeliveryAddressesUpdatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryCoordinatesPreferenceImplementors = []string{"CartDeliveryCoordinatesPreference"}

func (ec *executionContext) _CartDeliveryCoordinatesPreference(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryCoordinatesPreference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryCoordinatesPreferenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryCoordinatesPreference")
		case "countryCode":
			out.Values[i] = ec._CartDeliveryCoordinatesPreference_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "latitude":
			out.Values[i] = ec._CartDeliveryCoordinatesPreference_latitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "longitude":
			out.Values[i] = ec._CartDeliveryCoordinatesPreference_longitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryGroupImplementors = []string{"CartDeliveryGroup"}

func (ec *executionContext) _CartDeliveryGroup(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryGroup")
		case "cartLines":
			out.Values[i] = ec._CartDeliveryGroup_cartLines(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryAddress":
			out.Values[i] = ec._CartDeliveryGroup_deliveryAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryOptions":
			out.Values[i] = ec._CartDeliveryGroup_deliveryOptions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "groupType":
			out.Values[i] = ec._CartDeliveryGroup_groupType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._CartDeliveryGroup_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selectedDeliveryOption":
			out.Values[i] = ec._CartDeliveryGroup_selectedDeliveryOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryGroupConnectionImplementors = []string{"CartDeliveryGroupConnection"}

func (ec *executionContext) _CartDeliveryGroupConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryGroupConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryGroupConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryGroupConnection")
		case "edges":
			out.Values[i] = ec._CartDeliveryGroupConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._CartDeliveryGroupConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CartDeliveryGroupConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryGroupEdgeImplementors = []string{"CartDeliveryGroupEdge"}

func (ec *executionContext) _CartDeliveryGroupEdge(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryGroupEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryGroupEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryGroupEdge")
		case "cursor":
			out.Values[i] = ec._CartDeliveryGroupEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._CartDeliveryGroupEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryOptionImplementors = []string{"CartDeliveryOption"}

func (ec *executionContext) _CartDeliveryOption(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryOption")
		case "code":
			out.Values[i] = ec._CartDeliveryOption_code(ctx, field, obj)
		case "deliveryMethodType":
			out.Values[i] = ec._CartDeliveryOption_deliveryMethodType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._CartDeliveryOption_description(ctx, field, obj)
		case "estimatedCost":
			out.Values[i] = ec._CartDeliveryOption_estimatedCost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "handle":
			out.Values[i] = ec._CartDeliveryOption_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._CartDeliveryOption_title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDeliveryPreferenceImplementors = []string{"CartDeliveryPreference"}

func (ec *executionContext) _CartDeliveryPreference(ctx context.Context, sel ast.SelectionSet, obj *model.CartDeliveryPreference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDeliveryPreferenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDeliveryPreference")
		case "coordinates":
			out.Values[i] = ec._CartDeliveryPreference_coordinates(ctx, field, obj)
		case "deliveryMethod":
			out.Values[i] = ec._CartDeliveryPreference_deliveryMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pickupHandle":
			out.Values[i] = ec._CartDeliveryPreference_pickupHandle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDiscountApplicationImplementors = []string{"CartDiscountApplication"}

func (ec *executionContext) _CartDiscountApplication(ctx context.Context, sel ast.SelectionSet, obj *model.CartDiscountApplication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDiscountApplicationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDiscountApplication")
		case "allocationMethod":
			out.Values[i] = ec._CartDiscountApplication_allocationMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetSelection":
			out.Values[i] = ec._CartDiscountApplication_targetSelection(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetType":
			out.Values[i] = ec._CartDiscountApplication_targetType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._CartDiscountApplication_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDiscountCodeImplementors = []string{"CartDiscountCode"}

func (ec *executionContext) _CartDiscountCode(ctx context.Context, sel ast.SelectionSet, obj *model.CartDiscountCode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDiscountCodeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDiscountCode")
		case "applicable":
			out.Values[i] = ec._CartDiscountCode_applicable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._CartDiscountCode_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartDiscountCodesUpdatePayloadImplementors = []string{"CartDiscountCodesUpdatePayload"}

func (ec *executionContext) _CartDiscountCodesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartDiscountCodesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDiscountCodesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDiscountCodesUpdatePayload")
		case "cart":
			out.Values[i] = ec._CartDiscountCodesUpdatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartDiscountCodesUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartDiscountCodesUpdatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartEstimatedCostImplementors = []string{"CartEstimatedCost"}

func (ec *executionContext) _CartEstimatedCost(ctx context.Context, sel ast.SelectionSet, obj *model.CartEstimatedCost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartEstimatedCostImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartEstimatedCost")
		case "checkoutChargeAmount":
			out.Values[i] = ec._CartEstimatedCost_checkoutChargeAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subtotalAmount":
			out.Values[i] = ec._CartEstimatedCost_subtotalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._CartEstimatedCost_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalDutyAmount":
			out.Values[i] = ec._CartEstimatedCost_totalDutyAmount(ctx, field, obj)
		case "totalTaxAmount":
			out.Values[i] = ec._CartEstimatedCost_totalTaxAmount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartGiftCardCodesRemovePayloadImplementors = []string{"CartGiftCardCodesRemovePayload"}

func (ec *executionContext) _CartGiftCardCodesRemovePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartGiftCardCodesRemovePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartGiftCardCodesRemovePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartGiftCardCodesRemovePayload")
		case "cart":
			out.Values[i] = ec._CartGiftCardCodesRemovePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartGiftCardCodesRemovePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartGiftCardCodesRemovePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartGiftCardCodesUpdatePayloadImplementors = []string{"CartGiftCardCodesUpdatePayload"}

func (ec *executionContext) _CartGiftCardCodesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartGiftCardCodesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartGiftCardCodesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartGiftCardCodesUpdatePayload")
		case "cart":
			out.Values[i] = ec._CartGiftCardCodesUpdatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartGiftCardCodesUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartGiftCardCodesUpdatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartLineImplementors = []string{"CartLine", "BaseCartLine", "Node"}

func (ec *executionContext) _CartLine(ctx context.Context, sel ast.SelectionSet, obj *model.CartLine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartLineImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartLine")
		case "attribute":
			out.Values[i] = ec._CartLine_attribute(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._CartLine_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cost":
			out.Values[i] = ec._CartLine_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountAllocations":
			out.Values[i] = ec._CartLine_discountAllocations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "estimatedCost":
			out.Values[i] = ec._CartLine_estimatedCost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._CartLine_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchandise":
			out.Values[i] = ec._CartLine_merchandise(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "quantity":
			out.Values[i] = ec._CartLine_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sellingPlanAllocation":
			out.Values[i] = ec._CartLine_sellingPlanAllocation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartLineCostImplementors = []string{"CartLineCost"}

func (ec *executionContext) _CartLineCost(ctx context.Context, sel ast.SelectionSet, obj *model.CartLineCost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartLineCostImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartLineCost")
		case "amountPerQuantity":
			out.Values[i] = ec._CartLineCost_amountPerQuantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "compareAtAmountPerQuantity":
			out.Values[i] = ec._CartLineCost_compareAtAmountPerQuantity(ctx, field, obj)
		case "subtotalAmount":
			out.Values[i] = ec._CartLineCost_subtotalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._CartLineCost_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartLineEstimatedCostImplementors = []string{"CartLineEstimatedCost"}

func (ec *executionContext) _CartLineEstimatedCost(ctx context.Context, sel ast.SelectionSet, obj *model.CartLineEstimatedCost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartLineEstimatedCostImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartLineEstimatedCost")
		case "amount":
			out.Values[i] = ec._CartLineEstimatedCost_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "compareAtAmount":
			out.Values[i] = ec._CartLineEstimatedCost_compareAtAmount(ctx, field, obj)
		case "subtotalAmount":
			out.Values[i] = ec._CartLineEstimatedCost_subtotalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._CartLineEstimatedCost_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartLinesAddPayloadImplementors = []string{"CartLinesAddPayload"}

func (ec *executionContext) _CartLinesAddPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartLinesAddPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartLinesAddPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartLinesAddPayload")
		case "cart":
			out.Values[i] = ec._CartLinesAddPayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartLinesAddPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartLinesAddPayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartLinesRemovePayloadImplementors = []string{"CartLinesRemovePayload"}

func (ec *executionContext) _CartLinesRemovePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartLinesRemovePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartLinesRemovePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartLinesRemovePayload")
		case "cart":
			out.Values[i] = ec._CartLinesRemovePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartLinesRemovePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartLinesRemovePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartLinesUpdatePayloadImplementors = []string{"CartLinesUpdatePayload"}

func (ec *executionContext) _CartLinesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartLinesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartLinesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartLinesUpdatePayload")
		case "cart":
			out.Values[i] = ec._CartLinesUpdatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartLinesUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartLinesUpdatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartMetafieldDeletePayloadImplementors = []string{"CartMetafieldDeletePayload"}

func (ec *executionContext) _CartMetafieldDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartMetafieldDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartMetafieldDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartMetafieldDeletePayload")
		case "deletedId":
			out.Values[i] = ec._CartMetafieldDeletePayload_deletedId(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartMetafieldDeletePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartMetafieldsSetPayloadImplementors = []string{"CartMetafieldsSetPayload"}

func (ec *executionContext) _CartMetafieldsSetPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartMetafieldsSetPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartMetafieldsSetPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartMetafieldsSetPayload")
		case "metafields":
			out.Values[i] = ec._CartMetafieldsSetPayload_metafields(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartMetafieldsSetPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartNoteUpdatePayloadImplementors = []string{"CartNoteUpdatePayload"}

func (ec *executionContext) _CartNoteUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartNoteUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartNoteUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartNoteUpdatePayload")
		case "cart":
			out.Values[i] = ec._CartNoteUpdatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartNoteUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartNoteUpdatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartOperationErrorImplementors = []string{"CartOperationError"}

func (ec *executionContext) _CartOperationError(ctx context.Context, sel ast.SelectionSet, obj *model.CartOperationError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartOperationErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartOperationError")
		case "code":
			out.Values[i] = ec._CartOperationError_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CartOperationError_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartPaymentUpdatePayloadImplementors = []string{"CartPaymentUpdatePayload"}

func (ec *executionContext) _CartPaymentUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartPaymentUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartPaymentUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartPaymentUpdatePayload")
		case "cart":
			out.Values[i] = ec._CartPaymentUpdatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartPaymentUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartPaymentUpdatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartPreferencesImplementors = []string{"CartPreferences"}

func (ec *executionContext) _CartPreferences(ctx context.Context, sel ast.SelectionSet, obj *model.CartPreferences) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartPreferencesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartPreferences")
		case "delivery":
			out.Values[i] = ec._CartPreferences_delivery(ctx, field, obj)
		case "wallet":
			out.Values[i] = ec._CartPreferences_wallet(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartPrepareForCompletionPayloadImplementors = []string{"CartPrepareForCompletionPayload"}

func (ec *executionContext) _CartPrepareForCompletionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartPrepareForCompletionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartPrepareForCompletionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartPrepareForCompletionPayload")
		case "result":
			out.Values[i] = ec._CartPrepareForCompletionPayload_result(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartPrepareForCompletionPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartRemovePersonalDataPayloadImplementors = []string{"CartRemovePersonalDataPayload"}

func (ec *executionContext) _CartRemovePersonalDataPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartRemovePersonalDataPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartRemovePersonalDataPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartRemovePersonalDataPayload")
		case "cart":
			out.Values[i] = ec._CartRemovePersonalDataPayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartRemovePersonalDataPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartRemovePersonalDataPayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartSelectableAddressImplementors = []string{"CartSelectableAddress"}

func (ec *executionContext) _CartSelectableAddress(ctx context.Context, sel ast.SelectionSet, obj *model.CartSelectableAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartSelectableAddressImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartSelectableAddress")
		case "address":
			out.Values[i] = ec._CartSelectableAddress_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._CartSelectableAddress_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oneTimeUse":
			out.Values[i] = ec._CartSelectableAddress_oneTimeUse(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selected":
			out.Values[i] = ec._CartSelectableAddress_selected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartSelectedDeliveryOptionsUpdatePayloadImplementors = []string{"CartSelectedDeliveryOptionsUpdatePayload"}

func (ec *executionContext) _CartSelectedDeliveryOptionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartSelectedDeliveryOptionsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartSelectedDeliveryOptionsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartSelectedDeliveryOptionsUpdatePayload")
		case "cart":
			out.Values[i] = ec._CartSelectedDeliveryOptionsUpdatePayload_cart(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartSelectedDeliveryOptionsUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warnings":
			out.Values[i] = ec._CartSelectedDeliveryOptionsUpdatePayload_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartStatusNotReadyImplementors = []string{"CartStatusNotReady", "CartPrepareForCompletionResult"}

func (ec *executionContext) _CartStatusNotReady(ctx context.Context, sel ast.SelectionSet, obj *model.CartStatusNotReady) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartStatusNotReadyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartStatusNotReady")
		case "cart":
			out.Values[i] = ec._CartStatusNotReady_cart(ctx, field, obj)
		case "errors":
			out.Values[i] = ec._CartStatusNotReady_errors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartStatusReadyImplementors = []string{"CartStatusReady", "CartPrepareForCompletionResult"}

func (ec *executionContext) _CartStatusReady(ctx context.Context, sel ast.SelectionSet, obj *model.CartStatusReady) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartStatusReadyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartStatusReady")
		case "cart":
			out.Values[i] = ec._CartStatusReady_cart(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartSubmitForCompletionPayloadImplementors = []string{"CartSubmitForCompletionPayload"}

func (ec *executionContext) _CartSubmitForCompletionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CartSubmitForCompletionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartSubmitForCompletionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartSubmitForCompletionPayload")
		case "result":
			out.Values[i] = ec._CartSubmitForCompletionPayload_result(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CartSubmitForCompletionPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartThrottledImplementors = []string{"CartThrottled", "CartPrepareForCompletionResult"}

func (ec *executionContext) _CartThrottled(ctx context.Context, sel ast.SelectionSet, obj *model.CartThrottled) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartThrottledImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartThrottled")
		case "cart":
			out.Values[i] = ec._CartThrottled_cart(ctx, field, obj)
		case "pollAfter":
			out.Values[i] = ec._CartThrottled_pollAfter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartUserErrorImplementors = []string{"CartUserError", "DisplayableError"}

func (ec *executionContext) _CartUserError(ctx context.Context, sel ast.SelectionSet, obj *model.CartUserError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartUserErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartUserError")
		case "code":
			out.Values[i] = ec._CartUserError_code(ctx, field, obj)
		case "field":
			out.Values[i] = ec._CartUserError_field(ctx, field, obj)
		case "message":
			out.Values[i] = ec._CartUserError_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cartWarningImplementors = []string{"CartWarning"}

func (ec *executionContext) _CartWarning(ctx context.Context, sel ast.SelectionSet, obj *model.CartWarning) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartWarningImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartWarning")
		case "code":
			out.Values[i] = ec._CartWarning_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CartWarning_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "target":
			out.Values[i] = ec._CartWarning_target(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutImplementors = []string{"Checkout", "Node"}

func (ec *executionContext) _Checkout(ctx context.Context, sel ast.SelectionSet, obj *model.Checkout) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Checkout")
		case "appliedGiftCards":
			out.Values[i] = ec._Checkout_appliedGiftCards(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "availableShippingRates":
			out.Values[i] = ec._Checkout_availableShippingRates(ctx, field, obj)
		case "buyerIdentity":
			out.Values[i] = ec._Checkout_buyerIdentity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completedAt":
			out.Values[i] = ec._Checkout_completedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Checkout_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currencyCode":
			out.Values[i] = ec._Checkout_currencyCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customAttributes":
			out.Values[i] = ec._Checkout_customAttributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountApplications":
			out.Values[i] = ec._Checkout_discountApplications(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._Checkout_email(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Checkout_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lineItems":
			out.Values[i] = ec._Checkout_lineItems(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lineItemsSubtotalPrice":
			out.Values[i] = ec._Checkout_lineItemsSubtotalPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "note":
			out.Values[i] = ec._Checkout_note(ctx, field, obj)
		case "order":
			out.Values[i] = ec._Checkout_order(ctx, field, obj)
		case "orderStatusUrl":
			out.Values[i] = ec._Checkout_orderStatusUrl(ctx, field, obj)
		case "paymentDue":
			out.Values[i] = ec._Checkout_paymentDue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paymentDueV2":
			out.Values[i] = ec._Checkout_paymentDueV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ready":
			out.Values[i] = ec._Checkout_ready(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiresShipping":
			out.Values[i] = ec._Checkout_requiresShipping(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shippingAddress":
			out.Values[i] = ec._Checkout_shippingAddress(ctx, field, obj)
		case "shippingDiscountAllocations":
			out.Values[i] = ec._Checkout_shippingDiscountAllocations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shippingLine":
			out.Values[i] = ec._Checkout_shippingLine(ctx, field, obj)
		case "subtotalPrice":
			out.Values[i] = ec._Checkout_subtotalPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subtotalPriceV2":
			out.Values[i] = ec._Checkout_subtotalPriceV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taxExempt":
			out.Values[i] = ec._Checkout_taxExempt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taxesIncluded":
			out.Values[i] = ec._Checkout_taxesIncluded(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalDuties":
			out.Values[i] = ec._Checkout_totalDuties(ctx, field, obj)
		case "totalPrice":
			out.Values[i] = ec._Checkout_totalPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPriceV2":
			out.Values[i] = ec._Checkout_totalPriceV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalTax":
			out.Values[i] = ec._Checkout_totalTax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalTaxV2":
			out.Values[i] = ec._Checkout_totalTaxV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Checkout_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "webUrl":
			out.Values[i] = ec._Checkout_webUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutAttributesUpdateV2PayloadImplementors = []string{"CheckoutAttributesUpdateV2Payload"}

func (ec *executionContext) _CheckoutAttributesUpdateV2Payload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutAttributesUpdateV2Payload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutAttributesUpdateV2PayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutAttributesUpdateV2Payload")
		case "checkout":
			out.Values[i] = ec._CheckoutAttributesUpdateV2Payload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutAttributesUpdateV2Payload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutAttributesUpdateV2Payload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutBuyerIdentityImplementors = []string{"CheckoutBuyerIdentity"}

func (ec *executionContext) _CheckoutBuyerIdentity(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutBuyerIdentity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutBuyerIdentityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutBuyerIdentity")
		case "countryCode":
			out.Values[i] = ec._CheckoutBuyerIdentity_countryCode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutCompleteFreePayloadImplementors = []string{"CheckoutCompleteFreePayload"}

func (ec *executionContext) _CheckoutCompleteFreePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutCompleteFreePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutCompleteFreePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutCompleteFreePayload")
		case "checkout":
			out.Values[i] = ec._CheckoutCompleteFreePayload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutCompleteFreePayload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutCompleteFreePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutCompleteWithCreditCardV2PayloadImplementors = []string{"CheckoutCompleteWithCreditCardV2Payload"}

func (ec *executionContext) _CheckoutCompleteWithCreditCardV2Payload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutCompleteWithCreditCardV2Payload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutCompleteWithCreditCardV2PayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutCompleteWithCreditCardV2Payload")
		case "checkout":
			out.Values[i] = ec._CheckoutCompleteWithCreditCardV2Payload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutCompleteWithCreditCardV2Payload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "payment":
			out.Values[i] = ec._CheckoutCompleteWithCreditCardV2Payload_payment(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CheckoutCompleteWithCreditCardV2Payload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutCompleteWithTokenizedPaymentV3PayloadImplementors = []string{"CheckoutCompleteWithTokenizedPaymentV3Payload"}

func (ec *executionContext) _CheckoutCompleteWithTokenizedPaymentV3Payload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutCompleteWithTokenizedPaymentV3Payload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutCompleteWithTokenizedPaymentV3PayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutCompleteWithTokenizedPaymentV3Payload")
		case "checkout":
			out.Values[i] = ec._CheckoutCompleteWithTokenizedPaymentV3Payload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutCompleteWithTokenizedPaymentV3Payload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "payment":
			out.Values[i] = ec._CheckoutCompleteWithTokenizedPaymentV3Payload_payment(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CheckoutCompleteWithTokenizedPaymentV3Payload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutCreatePayloadImplementors = []string{"CheckoutCreatePayload"}

func (ec *executionContext) _CheckoutCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutCreatePayload")
		case "checkout":
			out.Values[i] = ec._CheckoutCreatePayload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutCreatePayload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queueToken":
			out.Values[i] = ec._CheckoutCreatePayload_queueToken(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CheckoutCreatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutCustomerAssociateV2PayloadImplementors = []string{"CheckoutCustomerAssociateV2Payload"}

func (ec *executionContext) _CheckoutCustomerAssociateV2Payload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutCustomerAssociateV2Payload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutCustomerAssociateV2PayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutCustomerAssociateV2Payload")
		case "checkout":
			out.Values[i] = ec._CheckoutCustomerAssociateV2Payload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutCustomerAssociateV2Payload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customer":
			out.Values[i] = ec._CheckoutCustomerAssociateV2Payload_customer(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CheckoutCustomerAssociateV2Payload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutCustomerDisassociateV2PayloadImplementors = []string{"CheckoutCustomerDisassociateV2Payload"}

func (ec *executionContext) _CheckoutCustomerDisassociateV2Payload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutCustomerDisassociateV2Payload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutCustomerDisassociateV2PayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutCustomerDisassociateV2Payload")
		case "checkout":
			out.Values[i] = ec._CheckoutCustomerDisassociateV2Payload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutCustomerDisassociateV2Payload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutCustomerDisassociateV2Payload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutDiscountCodeApplyV2PayloadImplementors = []string{"CheckoutDiscountCodeApplyV2Payload"}

func (ec *executionContext) _CheckoutDiscountCodeApplyV2Payload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutDiscountCodeApplyV2Payload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutDiscountCodeApplyV2PayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutDiscountCodeApplyV2Payload")
		case "checkout":
			out.Values[i] = ec._CheckoutDiscountCodeApplyV2Payload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutDiscountCodeApplyV2Payload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutDiscountCodeApplyV2Payload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutDiscountCodeRemovePayloadImplementors = []string{"CheckoutDiscountCodeRemovePayload"}

func (ec *executionContext) _CheckoutDiscountCodeRemovePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutDiscountCodeRemovePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutDiscountCodeRemovePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutDiscountCodeRemovePayload")
		case "checkout":
			out.Values[i] = ec._CheckoutDiscountCodeRemovePayload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutDiscountCodeRemovePayload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutDiscountCodeRemovePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutEmailUpdateV2PayloadImplementors = []string{"CheckoutEmailUpdateV2Payload"}

func (ec *executionContext) _CheckoutEmailUpdateV2Payload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutEmailUpdateV2Payload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutEmailUpdateV2PayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutEmailUpdateV2Payload")
		case "checkout":
			out.Values[i] = ec._CheckoutEmailUpdateV2Payload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutEmailUpdateV2Payload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutEmailUpdateV2Payload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutGiftCardRemoveV2PayloadImplementors = []string{"CheckoutGiftCardRemoveV2Payload"}

func (ec *executionContext) _CheckoutGiftCardRemoveV2Payload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutGiftCardRemoveV2Payload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutGiftCardRemoveV2PayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutGiftCardRemoveV2Payload")
		case "checkout":
			out.Values[i] = ec._CheckoutGiftCardRemoveV2Payload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutGiftCardRemoveV2Payload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutGiftCardRemoveV2Payload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutGiftCardsAppendPayloadImplementors = []string{"CheckoutGiftCardsAppendPayload"}

func (ec *executionContext) _CheckoutGiftCardsAppendPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutGiftCardsAppendPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutGiftCardsAppendPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutGiftCardsAppendPayload")
		case "checkout":
			out.Values[i] = ec._CheckoutGiftCardsAppendPayload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutGiftCardsAppendPayload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutGiftCardsAppendPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutLineItemImplementors = []string{"CheckoutLineItem", "Node"}

func (ec *executionContext) _CheckoutLineItem(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutLineItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutLineItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutLineItem")
		case "customAttributes":
			out.Values[i] = ec._CheckoutLineItem_customAttributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountAllocations":
			out.Values[i] = ec._CheckoutLineItem_discountAllocations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._CheckoutLineItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "quantity":
			out.Values[i] = ec._CheckoutLineItem_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._CheckoutLineItem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unitPrice":
			out.Values[i] = ec._CheckoutLineItem_unitPrice(ctx, field, obj)
		case "variant":
			out.Values[i] = ec._CheckoutLineItem_variant(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutLineItemConnectionImplementors = []string{"CheckoutLineItemConnection"}

func (ec *executionContext) _CheckoutLineItemConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutLineItemConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutLineItemConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutLineItemConnection")
		case "edges":
			out.Values[i] = ec._CheckoutLineItemConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._CheckoutLineItemConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CheckoutLineItemConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutLineItemEdgeImplementors = []string{"CheckoutLineItemEdge"}

func (ec *executionContext) _CheckoutLineItemEdge(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutLineItemEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutLineItemEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutLineItemEdge")
		case "cursor":
			out.Values[i] = ec._CheckoutLineItemEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._CheckoutLineItemEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutLineItemsAddPayloadImplementors = []string{"CheckoutLineItemsAddPayload"}

func (ec *executionContext) _CheckoutLineItemsAddPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutLineItemsAddPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutLineItemsAddPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutLineItemsAddPayload")
		case "checkout":
			out.Values[i] = ec._CheckoutLineItemsAddPayload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutLineItemsAddPayload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutLineItemsAddPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutLineItemsRemovePayloadImplementors = []string{"CheckoutLineItemsRemovePayload"}

func (ec *executionContext) _CheckoutLineItemsRemovePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutLineItemsRemovePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutLineItemsRemovePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutLineItemsRemovePayload")
		case "checkout":
			out.Values[i] = ec._CheckoutLineItemsRemovePayload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutLineItemsRemovePayload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutLineItemsRemovePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutLineItemsReplacePayloadImplementors = []string{"CheckoutLineItemsReplacePayload"}

func (ec *executionContext) _CheckoutLineItemsReplacePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutLineItemsReplacePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutLineItemsReplacePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutLineItemsReplacePayload")
		case "checkout":
			out.Values[i] = ec._CheckoutLineItemsReplacePayload_checkout(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CheckoutLineItemsReplacePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutLineItemsUpdatePayloadImplementors = []string{"CheckoutLineItemsUpdatePayload"}

func (ec *executionContext) _CheckoutLineItemsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutLineItemsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutLineItemsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutLineItemsUpdatePayload")
		case "checkout":
			out.Values[i] = ec._CheckoutLineItemsUpdatePayload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutLineItemsUpdatePayload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutLineItemsUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutShippingAddressUpdateV2PayloadImplementors = []string{"CheckoutShippingAddressUpdateV2Payload"}

func (ec *executionContext) _CheckoutShippingAddressUpdateV2Payload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutShippingAddressUpdateV2Payload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutShippingAddressUpdateV2PayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutShippingAddressUpdateV2Payload")
		case "checkout":
			out.Values[i] = ec._CheckoutShippingAddressUpdateV2Payload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutShippingAddressUpdateV2Payload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutShippingAddressUpdateV2Payload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutShippingLineUpdatePayloadImplementors = []string{"CheckoutShippingLineUpdatePayload"}

func (ec *executionContext) _CheckoutShippingLineUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutShippingLineUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutShippingLineUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutShippingLineUpdatePayload")
		case "checkout":
			out.Values[i] = ec._CheckoutShippingLineUpdatePayload_checkout(ctx, field, obj)
		case "checkoutUserErrors":
			out.Values[i] = ec._CheckoutShippingLineUpdatePayload_checkoutUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CheckoutShippingLineUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkoutUserErrorImplementors = []string{"CheckoutUserError", "DisplayableError"}

func (ec *executionContext) _CheckoutUserError(ctx context.Context, sel ast.SelectionSet, obj *model.CheckoutUserError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkoutUserErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutUserError")
		case "code":
			out.Values[i] = ec._CheckoutUserError_code(ctx, field, obj)
		case "field":
			out.Values[i] = ec._CheckoutUserError_field(ctx, field, obj)
		case "message":
			out.Values[i] = ec._CheckoutUserError_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var collectionImplementors = []string{"Collection", "MenuItemResource", "MetafieldParentResource", "MetafieldReference", "HasMetafields", "Node", "OnlineStorePublishable", "Trackable"}

func (ec *executionContext) _Collection(ctx context.Context, sel ast.SelectionSet, obj *model.Collection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, collectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Collection")
		case "description":
			out.Values[i] = ec._Collection_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "descriptionHtml":
			out.Values[i] = ec._Collection_descriptionHtml(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "handle":
			out.Values[i] = ec._Collection_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Collection_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image":
			out.Values[i] = ec._Collection_image(ctx, field, obj)
		case "metafield":
			out.Values[i] = ec._Collection_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Collection_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "onlineStoreUrl":
			out.Values[i] = ec._Collection_onlineStoreUrl(ctx, field, obj)
		case "products":
			out.Values[i] = ec._Collection_products(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "seo":
			out.Values[i] = ec._Collection_seo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Collection_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "trackingParameters":
			out.Values[i] = ec._Collection_trackingParameters(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Collection_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var collectionConnectionImplementors = []string{"CollectionConnection"}

func (ec *executionContext) _CollectionConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CollectionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, collectionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CollectionConnection")
		case "edges":
			out.Values[i] = ec._CollectionConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._CollectionConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CollectionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CollectionConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var collectionEdgeImplementors = []string{"CollectionEdge"}

func (ec *executionContext) _CollectionEdge(ctx context.Context, sel ast.SelectionSet, obj *model.CollectionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, collectionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CollectionEdge")
		case "cursor":
			out.Values[i] = ec._CollectionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._CollectionEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commentImplementors = []string{"Comment", "Node"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *model.Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "author":
			out.Values[i] = ec._Comment_author(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._Comment_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contentHtml":
			out.Values[i] = ec._Comment_contentHtml(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Comment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commentAuthorImplementors = []string{"CommentAuthor"}

func (ec *executionContext) _CommentAuthor(ctx context.Context, sel ast.SelectionSet, obj *model.CommentAuthor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentAuthorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentAuthor")
		case "email":
			out.Values[i] = ec._CommentAuthor_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._CommentAuthor_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commentConnectionImplementors = []string{"CommentConnection"}

func (ec *executionContext) _CommentConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CommentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentConnection")
		case "edges":
			out.Values[i] = ec._CommentConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._CommentConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CommentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commentEdgeImplementors = []string{"CommentEdge"}

func (ec *executionContext) _CommentEdge(ctx context.Context, sel ast.SelectionSet, obj *model.CommentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentEdge")
		case "cursor":
			out.Values[i] = ec._CommentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._CommentEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyImplementors = []string{"Company", "MetafieldParentResource", "HasMetafields", "Node"}

func (ec *executionContext) _Company(ctx context.Context, sel ast.SelectionSet, obj *model.Company) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Company")
		case "createdAt":
			out.Values[i] = ec._Company_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "externalId":
			out.Values[i] = ec._Company_externalId(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Company_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metafield":
			out.Values[i] = ec._Company_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Company_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Company_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Company_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyContactImplementors = []string{"CompanyContact", "Node"}

func (ec *executionContext) _CompanyContact(ctx context.Context, sel ast.SelectionSet, obj *model.CompanyContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyContactImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyContact")
		case "createdAt":
			out.Values[i] = ec._CompanyContact_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._CompanyContact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locale":
			out.Values[i] = ec._CompanyContact_locale(ctx, field, obj)
		case "title":
			out.Values[i] = ec._CompanyContact_title(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._CompanyContact_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyLocationImplementors = []string{"CompanyLocation", "MetafieldParentResource", "HasMetafields", "Node"}

func (ec *executionContext) _CompanyLocation(ctx context.Context, sel ast.SelectionSet, obj *model.CompanyLocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyLocationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyLocation")
		case "createdAt":
			out.Values[i] = ec._CompanyLocation_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "externalId":
			out.Values[i] = ec._CompanyLocation_externalId(ctx, field, obj)
		case "id":
			out.Values[i] = ec._CompanyLocation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locale":
			out.Values[i] = ec._CompanyLocation_locale(ctx, field, obj)
		case "metafield":
			out.Values[i] = ec._CompanyLocation_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._CompanyLocation_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._CompanyLocation_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._CompanyLocation_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var completePaymentChallengeImplementors = []string{"CompletePaymentChallenge", "CartCompletionAction"}

func (ec *executionContext) _CompletePaymentChallenge(ctx context.Context, sel ast.SelectionSet, obj *model.CompletePaymentChallenge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, completePaymentChallengeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompletePaymentChallenge")
		case "redirectUrl":
			out.Values[i] = ec._CompletePaymentChallenge_redirectUrl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var completionErrorImplementors = []string{"CompletionError"}

func (ec *executionContext) _CompletionError(ctx context.Context, sel ast.SelectionSet, obj *model.CompletionError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, completionErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompletionError")
		case "code":
			out.Values[i] = ec._CompletionError_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CompletionError_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var componentizableCartLineImplementors = []string{"ComponentizableCartLine", "BaseCartLine", "Node"}

func (ec *executionContext) _ComponentizableCartLine(ctx context.Context, sel ast.SelectionSet, obj *model.ComponentizableCartLine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentizableCartLineImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponentizableCartLine")
		case "attribute":
			out.Values[i] = ec._ComponentizableCartLine_attribute(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._ComponentizableCartLine_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cost":
			out.Values[i] = ec._ComponentizableCartLine_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountAllocations":
			out.Values[i] = ec._ComponentizableCartLine_discountAllocations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "estimatedCost":
			out.Values[i] = ec._ComponentizableCartLine_estimatedCost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._ComponentizableCartLine_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lineComponents":
			out.Values[i] = ec._ComponentizableCartLine_lineComponents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchandise":
			out.Values[i] = ec._ComponentizableCartLine_merchandise(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "quantity":
			out.Values[i] = ec._ComponentizableCartLine_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sellingPlanAllocation":
			out.Values[i] = ec._ComponentizableCartLine_sellingPlanAllocation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var countImplementors = []string{"Count"}

func (ec *executionContext) _Count(ctx context.Context, sel ast.SelectionSet, obj *model.Count) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Count")
		case "count":
			out.Values[i] = ec._Count_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "precision":
			out.Values[i] = ec._Count_precision(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var countryImplementors = []string{"Country"}

func (ec *executionContext) _Country(ctx context.Context, sel ast.SelectionSet, obj *model.Country) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Country")
		case "availableLanguages":
			out.Values[i] = ec._Country_availableLanguages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currency":
			out.Values[i] = ec._Country_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultLanguage":
			out.Values[i] = ec._Country_defaultLanguage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isoCode":
			out.Values[i] = ec._Country_isoCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "market":
			out.Values[i] = ec._Country_market(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Country_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unitSystem":
			out.Values[i] = ec._Country_unitSystem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var creditCardImplementors = []string{"CreditCard"}

func (ec *executionContext) _CreditCard(ctx context.Context, sel ast.SelectionSet, obj *model.CreditCard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, creditCardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreditCard")
		case "brand":
			out.Values[i] = ec._CreditCard_brand(ctx, field, obj)
		case "expiryMonth":
			out.Values[i] = ec._CreditCard_expiryMonth(ctx, field, obj)
		case "expiryYear":
			out.Values[i] = ec._CreditCard_expiryYear(ctx, field, obj)
		case "firstDigits":
			out.Values[i] = ec._CreditCard_firstDigits(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._CreditCard_firstName(ctx, field, obj)
		case "lastDigits":
			out.Values[i] = ec._CreditCard_lastDigits(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._CreditCard_lastName(ctx, field, obj)
		case "maskedNumber":
			out.Values[i] = ec._CreditCard_maskedNumber(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var currencyImplementors = []string{"Currency"}

func (ec *executionContext) _Currency(ctx context.Context, sel ast.SelectionSet, obj *model.Currency) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, currencyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Currency")
		case "isoCode":
			out.Values[i] = ec._Currency_isoCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Currency_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "symbol":
			out.Values[i] = ec._Currency_symbol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerImplementors = []string{"Customer", "MetafieldParentResource", "HasMetafields"}

func (ec *executionContext) _Customer(ctx context.Context, sel ast.SelectionSet, obj *model.Customer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Customer")
		case "acceptsMarketing":
			out.Values[i] = ec._Customer_acceptsMarketing(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addresses":
			out.Values[i] = ec._Customer_addresses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Customer_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultAddress":
			out.Values[i] = ec._Customer_defaultAddress(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._Customer_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._Customer_email(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._Customer_firstName(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Customer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastIncompleteCheckout":
			out.Values[i] = ec._Customer_lastIncompleteCheckout(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._Customer_lastName(ctx, field, obj)
		case "metafield":
			out.Values[i] = ec._Customer_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Customer_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "numberOfOrders":
			out.Values[i] = ec._Customer_numberOfOrders(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "orders":
			out.Values[i] = ec._Customer_orders(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phone":
			out.Values[i] = ec._Customer_phone(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._Customer_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Customer_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerAccessTokenImplementors = []string{"CustomerAccessToken"}

func (ec *executionContext) _CustomerAccessToken(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerAccessToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerAccessTokenImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerAccessToken")
		case "accessToken":
			out.Values[i] = ec._CustomerAccessToken_accessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expiresAt":
			out.Values[i] = ec._CustomerAccessToken_expiresAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerAccessTokenCreatePayloadImplementors = []string{"CustomerAccessTokenCreatePayload"}

func (ec *executionContext) _CustomerAccessTokenCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerAccessTokenCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerAccessTokenCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerAccessTokenCreatePayload")
		case "customerAccessToken":
			out.Values[i] = ec._CustomerAccessTokenCreatePayload_customerAccessToken(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerAccessTokenCreatePayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerAccessTokenCreatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerAccessTokenCreateWithMultipassPayloadImplementors = []string{"CustomerAccessTokenCreateWithMultipassPayload"}

func (ec *executionContext) _CustomerAccessTokenCreateWithMultipassPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerAccessTokenCreateWithMultipassPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerAccessTokenCreateWithMultipassPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerAccessTokenCreateWithMultipassPayload")
		case "customerAccessToken":
			out.Values[i] = ec._CustomerAccessTokenCreateWithMultipassPayload_customerAccessToken(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerAccessTokenCreateWithMultipassPayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerAccessTokenCreateWithMultipassPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerAccessTokenDeletePayloadImplementors = []string{"CustomerAccessTokenDeletePayload"}

func (ec *executionContext) _CustomerAccessTokenDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerAccessTokenDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerAccessTokenDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerAccessTokenDeletePayload")
		case "deletedAccessToken":
			out.Values[i] = ec._CustomerAccessTokenDeletePayload_deletedAccessToken(ctx, field, obj)
		case "deletedCustomerAccessTokenId":
			out.Values[i] = ec._CustomerAccessTokenDeletePayload_deletedCustomerAccessTokenId(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CustomerAccessTokenDeletePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerAccessTokenRenewPayloadImplementors = []string{"CustomerAccessTokenRenewPayload"}

func (ec *executionContext) _CustomerAccessTokenRenewPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerAccessTokenRenewPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerAccessTokenRenewPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerAccessTokenRenewPayload")
		case "customerAccessToken":
			out.Values[i] = ec._CustomerAccessTokenRenewPayload_customerAccessToken(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CustomerAccessTokenRenewPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerActivateByUrlPayloadImplementors = []string{"CustomerActivateByUrlPayload"}

func (ec *executionContext) _CustomerActivateByUrlPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerActivateByURLPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerActivateByUrlPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerActivateByUrlPayload")
		case "customer":
			out.Values[i] = ec._CustomerActivateByUrlPayload_customer(ctx, field, obj)
		case "customerAccessToken":
			out.Values[i] = ec._CustomerActivateByUrlPayload_customerAccessToken(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerActivateByUrlPayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerActivateByUrlPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerActivatePayloadImplementors = []string{"CustomerActivatePayload"}

func (ec *executionContext) _CustomerActivatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerActivatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerActivatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerActivatePayload")
		case "customer":
			out.Values[i] = ec._CustomerActivatePayload_customer(ctx, field, obj)
		case "customerAccessToken":
			out.Values[i] = ec._CustomerActivatePayload_customerAccessToken(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerActivatePayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerActivatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerAddressCreatePayloadImplementors = []string{"CustomerAddressCreatePayload"}

func (ec *executionContext) _CustomerAddressCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerAddressCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerAddressCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerAddressCreatePayload")
		case "customerAddress":
			out.Values[i] = ec._CustomerAddressCreatePayload_customerAddress(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerAddressCreatePayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerAddressCreatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerAddressDeletePayloadImplementors = []string{"CustomerAddressDeletePayload"}

func (ec *executionContext) _CustomerAddressDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerAddressDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerAddressDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerAddressDeletePayload")
		case "customerUserErrors":
			out.Values[i] = ec._CustomerAddressDeletePayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedCustomerAddressId":
			out.Values[i] = ec._CustomerAddressDeletePayload_deletedCustomerAddressId(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._CustomerAddressDeletePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerAddressUpdatePayloadImplementors = []string{"CustomerAddressUpdatePayload"}

func (ec *executionContext) _CustomerAddressUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerAddressUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerAddressUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerAddressUpdatePayload")
		case "customerAddress":
			out.Values[i] = ec._CustomerAddressUpdatePayload_customerAddress(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerAddressUpdatePayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerAddressUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerCreatePayloadImplementors = []string{"CustomerCreatePayload"}

func (ec *executionContext) _CustomerCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerCreatePayload")
		case "customer":
			out.Values[i] = ec._CustomerCreatePayload_customer(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerCreatePayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerCreatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerDefaultAddressUpdatePayloadImplementors = []string{"CustomerDefaultAddressUpdatePayload"}

func (ec *executionContext) _CustomerDefaultAddressUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerDefaultAddressUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerDefaultAddressUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerDefaultAddressUpdatePayload")
		case "customer":
			out.Values[i] = ec._CustomerDefaultAddressUpdatePayload_customer(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerDefaultAddressUpdatePayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerDefaultAddressUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerRecoverPayloadImplementors = []string{"CustomerRecoverPayload"}

func (ec *executionContext) _CustomerRecoverPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerRecoverPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerRecoverPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerRecoverPayload")
		case "customerUserErrors":
			out.Values[i] = ec._CustomerRecoverPayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerRecoverPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerResetByUrlPayloadImplementors = []string{"CustomerResetByUrlPayload"}

func (ec *executionContext) _CustomerResetByUrlPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerResetByURLPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerResetByUrlPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerResetByUrlPayload")
		case "customer":
			out.Values[i] = ec._CustomerResetByUrlPayload_customer(ctx, field, obj)
		case "customerAccessToken":
			out.Values[i] = ec._CustomerResetByUrlPayload_customerAccessToken(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerResetByUrlPayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerResetByUrlPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerResetPayloadImplementors = []string{"CustomerResetPayload"}

func (ec *executionContext) _CustomerResetPayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerResetPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerResetPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerResetPayload")
		case "customer":
			out.Values[i] = ec._CustomerResetPayload_customer(ctx, field, obj)
		case "customerAccessToken":
			out.Values[i] = ec._CustomerResetPayload_customerAccessToken(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerResetPayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerResetPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerUpdatePayloadImplementors = []string{"CustomerUpdatePayload"}

func (ec *executionContext) _CustomerUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerUpdatePayload")
		case "customer":
			out.Values[i] = ec._CustomerUpdatePayload_customer(ctx, field, obj)
		case "customerAccessToken":
			out.Values[i] = ec._CustomerUpdatePayload_customerAccessToken(ctx, field, obj)
		case "customerUserErrors":
			out.Values[i] = ec._CustomerUpdatePayload_customerUserErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userErrors":
			out.Values[i] = ec._CustomerUpdatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerUserErrorImplementors = []string{"CustomerUserError", "DisplayableError"}

func (ec *executionContext) _CustomerUserError(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerUserError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerUserErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerUserError")
		case "code":
			out.Values[i] = ec._CustomerUserError_code(ctx, field, obj)
		case "field":
			out.Values[i] = ec._CustomerUserError_field(ctx, field, obj)
		case "message":
			out.Values[i] = ec._CustomerUserError_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var discountAllocationImplementors = []string{"DiscountAllocation"}

func (ec *executionContext) _DiscountAllocation(ctx context.Context, sel ast.SelectionSet, obj *model.DiscountAllocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, discountAllocationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DiscountAllocation")
		case "allocatedAmount":
			out.Values[i] = ec._DiscountAllocation_allocatedAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountApplication":
			out.Values[i] = ec._DiscountAllocation_discountApplication(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var discountApplicationConnectionImplementors = []string{"DiscountApplicationConnection"}

func (ec *executionContext) _DiscountApplicationConnection(ctx context.Context, sel ast.SelectionSet, obj *model.DiscountApplicationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, discountApplicationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DiscountApplicationConnection")
		case "edges":
			out.Values[i] = ec._DiscountApplicationConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._DiscountApplicationConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._DiscountApplicationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var discountApplicationEdgeImplementors = []string{"DiscountApplicationEdge"}

func (ec *executionContext) _DiscountApplicationEdge(ctx context.Context, sel ast.SelectionSet, obj *model.DiscountApplicationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, discountApplicationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DiscountApplicationEdge")
		case "cursor":
			out.Values[i] = ec._DiscountApplicationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._DiscountApplicationEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var discountCodeApplicationImplementors = []string{"DiscountCodeApplication", "DiscountApplication"}

func (ec *executionContext) _DiscountCodeApplication(ctx context.Context, sel ast.SelectionSet, obj *model.DiscountCodeApplication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, discountCodeApplicationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DiscountCodeApplication")
		case "allocationMethod":
			out.Values[i] = ec._DiscountCodeApplication_allocationMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "applicable":
			out.Values[i] = ec._DiscountCodeApplication_applicable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._DiscountCodeApplication_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetSelection":
			out.Values[i] = ec._DiscountCodeApplication_targetSelection(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetType":
			out.Values[i] = ec._DiscountCodeApplication_targetType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._DiscountCodeApplication_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var domainImplementors = []string{"Domain"}

func (ec *executionContext) _Domain(ctx context.Context, sel ast.SelectionSet, obj *model.Domain) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, domainImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Domain")
		case "host":
			out.Values[i] = ec._Domain_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sslEnabled":
			out.Values[i] = ec._Domain_sslEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Domain_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var externalVideoImplementors = []string{"ExternalVideo", "Media", "Node"}

func (ec *executionContext) _ExternalVideo(ctx context.Context, sel ast.SelectionSet, obj *model.ExternalVideo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, externalVideoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExternalVideo")
		case "alt":
			out.Values[i] = ec._ExternalVideo_alt(ctx, field, obj)
		case "embedUrl":
			out.Values[i] = ec._ExternalVideo_embedUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "embeddedUrl":
			out.Values[i] = ec._ExternalVideo_embeddedUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "host":
			out.Values[i] = ec._ExternalVideo_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._ExternalVideo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mediaContentType":
			out.Values[i] = ec._ExternalVideo_mediaContentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "originUrl":
			out.Values[i] = ec._ExternalVideo_originUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "presentation":
			out.Values[i] = ec._ExternalVideo_presentation(ctx, field, obj)
		case "previewImage":
			out.Values[i] = ec._ExternalVideo_previewImage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var filterImplementors = []string{"Filter"}

func (ec *executionContext) _Filter(ctx context.Context, sel ast.SelectionSet, obj *model.Filter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, filterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Filter")
		case "id":
			out.Values[i] = ec._Filter_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Filter_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "presentation":
			out.Values[i] = ec._Filter_presentation(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Filter_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "values":
			out.Values[i] = ec._Filter_values(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var filterValueImplementors = []string{"FilterValue"}

func (ec *executionContext) _FilterValue(ctx context.Context, sel ast.SelectionSet, obj *model.FilterValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, filterValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FilterValue")
		case "count":
			out.Values[i] = ec._FilterValue_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._FilterValue_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image":
			out.Values[i] = ec._FilterValue_image(ctx, field, obj)
		case "input":
			out.Values[i] = ec._FilterValue_input(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._FilterValue_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "swatch":
			out.Values[i] = ec._FilterValue_swatch(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fulfillmentImplementors = []string{"Fulfillment"}

func (ec *executionContext) _Fulfillment(ctx context.Context, sel ast.SelectionSet, obj *model.Fulfillment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fulfillmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fulfillment")
		case "fulfillmentLineItems":
			out.Values[i] = ec._Fulfillment_fulfillmentLineItems(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "trackingCompany":
			out.Values[i] = ec._Fulfillment_trackingCompany(ctx, field, obj)
		case "trackingInfo":
			out.Values[i] = ec._Fulfillment_trackingInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fulfillmentLineItemImplementors = []string{"FulfillmentLineItem"}

func (ec *executionContext) _FulfillmentLineItem(ctx context.Context, sel ast.SelectionSet, obj *model.FulfillmentLineItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fulfillmentLineItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FulfillmentLineItem")
		case "lineItem":
			out.Values[i] = ec._FulfillmentLineItem_lineItem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "quantity":
			out.Values[i] = ec._FulfillmentLineItem_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fulfillmentLineItemConnectionImplementors = []string{"FulfillmentLineItemConnection"}

func (ec *executionContext) _FulfillmentLineItemConnection(ctx context.Context, sel ast.SelectionSet, obj *model.FulfillmentLineItemConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fulfillmentLineItemConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FulfillmentLineItemConnection")
		case "edges":
			out.Values[i] = ec._FulfillmentLineItemConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._FulfillmentLineItemConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._FulfillmentLineItemConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fulfillmentLineItemEdgeImplementors = []string{"FulfillmentLineItemEdge"}

func (ec *executionContext) _FulfillmentLineItemEdge(ctx context.Context, sel ast.SelectionSet, obj *model.FulfillmentLineItemEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fulfillmentLineItemEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FulfillmentLineItemEdge")
		case "cursor":
			out.Values[i] = ec._FulfillmentLineItemEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._FulfillmentLineItemEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fulfillmentTrackingInfoImplementors = []string{"FulfillmentTrackingInfo"}

func (ec *executionContext) _FulfillmentTrackingInfo(ctx context.Context, sel ast.SelectionSet, obj *model.FulfillmentTrackingInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fulfillmentTrackingInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FulfillmentTrackingInfo")
		case "number":
			out.Values[i] = ec._FulfillmentTrackingInfo_number(ctx, field, obj)
		case "url":
			out.Values[i] = ec._FulfillmentTrackingInfo_url(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var genericFileImplementors = []string{"GenericFile", "MetafieldReference", "Node"}

func (ec *executionContext) _GenericFile(ctx context.Context, sel ast.SelectionSet, obj *model.GenericFile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, genericFileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GenericFile")
		case "alt":
			out.Values[i] = ec._GenericFile_alt(ctx, field, obj)
		case "id":
			out.Values[i] = ec._GenericFile_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mimeType":
			out.Values[i] = ec._GenericFile_mimeType(ctx, field, obj)
		case "originalFileSize":
			out.Values[i] = ec._GenericFile_originalFileSize(ctx, field, obj)
		case "previewImage":
			out.Values[i] = ec._GenericFile_previewImage(ctx, field, obj)
		case "url":
			out.Values[i] = ec._GenericFile_url(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var imageImplementors = []string{"Image"}

func (ec *executionContext) _Image(ctx context.Context, sel ast.SelectionSet, obj *model.Image) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Image")
		case "altText":
			out.Values[i] = ec._Image_altText(ctx, field, obj)
		case "height":
			out.Values[i] = ec._Image_height(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Image_id(ctx, field, obj)
		case "originalSrc":
			out.Values[i] = ec._Image_originalSrc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "src":
			out.Values[i] = ec._Image_src(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "thumbhash":
			out.Values[i] = ec._Image_thumbhash(ctx, field, obj)
		case "transformedSrc":
			out.Values[i] = ec._Image_transformedSrc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Image_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "width":
			out.Values[i] = ec._Image_width(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var imageConnectionImplementors = []string{"ImageConnection"}

func (ec *executionContext) _ImageConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ImageConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageConnection")
		case "edges":
			out.Values[i] = ec._ImageConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ImageConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ImageConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var imageEdgeImplementors = []string{"ImageEdge"}

func (ec *executionContext) _ImageEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ImageEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageEdge")
		case "cursor":
			out.Values[i] = ec._ImageEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._ImageEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var inContextAnnotationImplementors = []string{"InContextAnnotation"}

func (ec *executionContext) _InContextAnnotation(ctx context.Context, sel ast.SelectionSet, obj *model.InContextAnnotation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inContextAnnotationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InContextAnnotation")
		case "description":
			out.Values[i] = ec._InContextAnnotation_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._InContextAnnotation_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var inContextAnnotationTypeImplementors = []string{"InContextAnnotationType"}

func (ec *executionContext) _InContextAnnotationType(ctx context.Context, sel ast.SelectionSet, obj *model.InContextAnnotationType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inContextAnnotationTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InContextAnnotationType")
		case "kind":
			out.Values[i] = ec._InContextAnnotationType_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._InContextAnnotationType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var languageImplementors = []string{"Language"}

func (ec *executionContext) _Language(ctx context.Context, sel ast.SelectionSet, obj *model.Language) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, languageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Language")
		case "endonymName":
			out.Values[i] = ec._Language_endonymName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isoCode":
			out.Values[i] = ec._Language_isoCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Language_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var localizationImplementors = []string{"Localization"}

func (ec *executionContext) _Localization(ctx context.Context, sel ast.SelectionSet, obj *model.Localization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, localizationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Localization")
		case "availableCountries":
			out.Values[i] = ec._Localization_availableCountries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "availableLanguages":
			out.Values[i] = ec._Localization_availableLanguages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "country":
			out.Values[i] = ec._Localization_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "language":
			out.Values[i] = ec._Localization_language(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "market":
			out.Values[i] = ec._Localization_market(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var locationImplementors = []string{"Location", "MetafieldParentResource", "HasMetafields", "Node"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *model.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "address":
			out.Values[i] = ec._Location_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Location_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metafield":
			out.Values[i] = ec._Location_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Location_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Location_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var locationAddressImplementors = []string{"LocationAddress"}

func (ec *executionContext) _LocationAddress(ctx context.Context, sel ast.SelectionSet, obj *model.LocationAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationAddressImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocationAddress")
		case "address1":
			out.Values[i] = ec._LocationAddress_address1(ctx, field, obj)
		case "address2":
			out.Values[i] = ec._LocationAddress_address2(ctx, field, obj)
		case "city":
			out.Values[i] = ec._LocationAddress_city(ctx, field, obj)
		case "country":
			out.Values[i] = ec._LocationAddress_country(ctx, field, obj)
		case "countryCode":
			out.Values[i] = ec._LocationAddress_countryCode(ctx, field, obj)
		case "formatted":
			out.Values[i] = ec._LocationAddress_formatted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "latitude":
			out.Values[i] = ec._LocationAddress_latitude(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._LocationAddress_longitude(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._LocationAddress_phone(ctx, field, obj)
		case "province":
			out.Values[i] = ec._LocationAddress_province(ctx, field, obj)
		case "provinceCode":
			out.Values[i] = ec._LocationAddress_provinceCode(ctx, field, obj)
		case "zip":
			out.Values[i] = ec._LocationAddress_zip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var locationConnectionImplementors = []string{"LocationConnection"}

func (ec *executionContext) _LocationConnection(ctx context.Context, sel ast.SelectionSet, obj *model.LocationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocationConnection")
		case "edges":
			out.Values[i] = ec._LocationConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._LocationConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._LocationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var locationEdgeImplementors = []string{"LocationEdge"}

func (ec *executionContext) _LocationEdge(ctx context.Context, sel ast.SelectionSet, obj *model.LocationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocationEdge")
		case "cursor":
			out.Values[i] = ec._LocationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._LocationEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mailingAddressImplementors = []string{"MailingAddress", "DeliveryAddress", "Node"}

func (ec *executionContext) _MailingAddress(ctx context.Context, sel ast.SelectionSet, obj *model.MailingAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailingAddressImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailingAddress")
		case "address1":
			out.Values[i] = ec._MailingAddress_address1(ctx, field, obj)
		case "address2":
			out.Values[i] = ec._MailingAddress_address2(ctx, field, obj)
		case "city":
			out.Values[i] = ec._MailingAddress_city(ctx, field, obj)
		case "company":
			out.Values[i] = ec._MailingAddress_company(ctx, field, obj)
		case "country":
			out.Values[i] = ec._MailingAddress_country(ctx, field, obj)
		case "countryCode":
			out.Values[i] = ec._MailingAddress_countryCode(ctx, field, obj)
		case "countryCodeV2":
			out.Values[i] = ec._MailingAddress_countryCodeV2(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._MailingAddress_firstName(ctx, field, obj)
		case "formatted":
			out.Values[i] = ec._MailingAddress_formatted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "formattedArea":
			out.Values[i] = ec._MailingAddress_formattedArea(ctx, field, obj)
		case "id":
			out.Values[i] = ec._MailingAddress_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastName":
			out.Values[i] = ec._MailingAddress_lastName(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._MailingAddress_latitude(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._MailingAddress_longitude(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MailingAddress_name(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._MailingAddress_phone(ctx, field, obj)
		case "province":
			out.Values[i] = ec._MailingAddress_province(ctx, field, obj)
		case "provinceCode":
			out.Values[i] = ec._MailingAddress_provinceCode(ctx, field, obj)
		case "zip":
			out.Values[i] = ec._MailingAddress_zip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mailingAddressConnectionImplementors = []string{"MailingAddressConnection"}

func (ec *executionContext) _MailingAddressConnection(ctx context.Context, sel ast.SelectionSet, obj *model.MailingAddressConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailingAddressConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailingAddressConnection")
		case "edges":
			out.Values[i] = ec._MailingAddressConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._MailingAddressConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._MailingAddressConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mailingAddressEdgeImplementors = []string{"MailingAddressEdge"}

func (ec *executionContext) _MailingAddressEdge(ctx context.Context, sel ast.SelectionSet, obj *model.MailingAddressEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailingAddressEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailingAddressEdge")
		case "cursor":
			out.Values[i] = ec._MailingAddressEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._MailingAddressEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var manualDiscountApplicationImplementors = []string{"ManualDiscountApplication", "DiscountApplication"}

func (ec *executionContext) _ManualDiscountApplication(ctx context.Context, sel ast.SelectionSet, obj *model.ManualDiscountApplication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, manualDiscountApplicationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManualDiscountApplication")
		case "allocationMethod":
			out.Values[i] = ec._ManualDiscountApplication_allocationMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._ManualDiscountApplication_description(ctx, field, obj)
		case "targetSelection":
			out.Values[i] = ec._ManualDiscountApplication_targetSelection(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetType":
			out.Values[i] = ec._ManualDiscountApplication_targetType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._ManualDiscountApplication_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._ManualDiscountApplication_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var marketImplementors = []string{"Market", "MetafieldParentResource", "HasMetafields", "Node"}

func (ec *executionContext) _Market(ctx context.Context, sel ast.SelectionSet, obj *model.Market) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, marketImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Market")
		case "handle":
			out.Values[i] = ec._Market_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Market_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metafield":
			out.Values[i] = ec._Market_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Market_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaConnectionImplementors = []string{"MediaConnection"}

func (ec *executionContext) _MediaConnection(ctx context.Context, sel ast.SelectionSet, obj *model.MediaConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaConnection")
		case "edges":
			out.Values[i] = ec._MediaConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._MediaConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._MediaConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaEdgeImplementors = []string{"MediaEdge"}

func (ec *executionContext) _MediaEdge(ctx context.Context, sel ast.SelectionSet, obj *model.MediaEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaEdge")
		case "cursor":
			out.Values[i] = ec._MediaEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._MediaEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaImageImplementors = []string{"MediaImage", "MetafieldReference", "Media", "Node"}

func (ec *executionContext) _MediaImage(ctx context.Context, sel ast.SelectionSet, obj *model.MediaImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaImageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaImage")
		case "alt":
			out.Values[i] = ec._MediaImage_alt(ctx, field, obj)
		case "id":
			out.Values[i] = ec._MediaImage_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image":
			out.Values[i] = ec._MediaImage_image(ctx, field, obj)
		case "mediaContentType":
			out.Values[i] = ec._MediaImage_mediaContentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "presentation":
			out.Values[i] = ec._MediaImage_presentation(ctx, field, obj)
		case "previewImage":
			out.Values[i] = ec._MediaImage_previewImage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaPresentationImplementors = []string{"MediaPresentation", "Node"}

func (ec *executionContext) _MediaPresentation(ctx context.Context, sel ast.SelectionSet, obj *model.MediaPresentation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaPresentationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaPresentation")
		case "asJson":
			out.Values[i] = ec._MediaPresentation_asJson(ctx, field, obj)
		case "id":
			out.Values[i] = ec._MediaPresentation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var menuImplementors = []string{"Menu", "Node"}

func (ec *executionContext) _Menu(ctx context.Context, sel ast.SelectionSet, obj *model.Menu) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, menuImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Menu")
		case "handle":
			out.Values[i] = ec._Menu_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Menu_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "items":
			out.Values[i] = ec._Menu_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "itemsCount":
			out.Values[i] = ec._Menu_itemsCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Menu_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var menuItemImplementors = []string{"MenuItem", "Node"}

func (ec *executionContext) _MenuItem(ctx context.Context, sel ast.SelectionSet, obj *model.MenuItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, menuItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MenuItem")
		case "id":
			out.Values[i] = ec._MenuItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "items":
			out.Values[i] = ec._MenuItem_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resource":
			out.Values[i] = ec._MenuItem_resource(ctx, field, obj)
		case "resourceId":
			out.Values[i] = ec._MenuItem_resourceId(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._MenuItem_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._MenuItem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._MenuItem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._MenuItem_url(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metafieldImplementors = []string{"Metafield", "Node"}

func (ec *executionContext) _Metafield(ctx context.Context, sel ast.SelectionSet, obj *model.Metafield) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metafieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Metafield")
		case "createdAt":
			out.Values[i] = ec._Metafield_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Metafield_description(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Metafield_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "key":
			out.Values[i] = ec._Metafield_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "namespace":
			out.Values[i] = ec._Metafield_namespace(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "parentResource":
			out.Values[i] = ec._Metafield_parentResource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reference":
			out.Values[i] = ec._Metafield_reference(ctx, field, obj)
		case "references":
			out.Values[i] = ec._Metafield_references(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Metafield_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Metafield_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Metafield_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metafieldDeleteUserErrorImplementors = []string{"MetafieldDeleteUserError", "DisplayableError"}

func (ec *executionContext) _MetafieldDeleteUserError(ctx context.Context, sel ast.SelectionSet, obj *model.MetafieldDeleteUserError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metafieldDeleteUserErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetafieldDeleteUserError")
		case "code":
			out.Values[i] = ec._MetafieldDeleteUserError_code(ctx, field, obj)
		case "field":
			out.Values[i] = ec._MetafieldDeleteUserError_field(ctx, field, obj)
		case "message":
			out.Values[i] = ec._MetafieldDeleteUserError_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metafieldReferenceConnectionImplementors = []string{"MetafieldReferenceConnection"}

func (ec *executionContext) _MetafieldReferenceConnection(ctx context.Context, sel ast.SelectionSet, obj *model.MetafieldReferenceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metafieldReferenceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetafieldReferenceConnection")
		case "edges":
			out.Values[i] = ec._MetafieldReferenceConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._MetafieldReferenceConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._MetafieldReferenceConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metafieldReferenceEdgeImplementors = []string{"MetafieldReferenceEdge"}

func (ec *executionContext) _MetafieldReferenceEdge(ctx context.Context, sel ast.SelectionSet, obj *model.MetafieldReferenceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metafieldReferenceEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetafieldReferenceEdge")
		case "cursor":
			out.Values[i] = ec._MetafieldReferenceEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._MetafieldReferenceEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metafieldsSetUserErrorImplementors = []string{"MetafieldsSetUserError", "DisplayableError"}

func (ec *executionContext) _MetafieldsSetUserError(ctx context.Context, sel ast.SelectionSet, obj *model.MetafieldsSetUserError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metafieldsSetUserErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetafieldsSetUserError")
		case "code":
			out.Values[i] = ec._MetafieldsSetUserError_code(ctx, field, obj)
		case "elementIndex":
			out.Values[i] = ec._MetafieldsSetUserError_elementIndex(ctx, field, obj)
		case "field":
			out.Values[i] = ec._MetafieldsSetUserError_field(ctx, field, obj)
		case "message":
			out.Values[i] = ec._MetafieldsSetUserError_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metaobjectImplementors = []string{"Metaobject", "MenuItemResource", "MetafieldReference", "Node", "OnlineStorePublishable"}

func (ec *executionContext) _Metaobject(ctx context.Context, sel ast.SelectionSet, obj *model.Metaobject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaobjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Metaobject")
		case "field":
			out.Values[i] = ec._Metaobject_field(ctx, field, obj)
		case "fields":
			out.Values[i] = ec._Metaobject_fields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "handle":
			out.Values[i] = ec._Metaobject_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Metaobject_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "onlineStoreUrl":
			out.Values[i] = ec._Metaobject_onlineStoreUrl(ctx, field, obj)
		case "seo":
			out.Values[i] = ec._Metaobject_seo(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Metaobject_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Metaobject_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metaobjectConnectionImplementors = []string{"MetaobjectConnection"}

func (ec *executionContext) _MetaobjectConnection(ctx context.Context, sel ast.SelectionSet, obj *model.MetaobjectConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaobjectConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetaobjectConnection")
		case "edges":
			out.Values[i] = ec._MetaobjectConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._MetaobjectConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._MetaobjectConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metaobjectEdgeImplementors = []string{"MetaobjectEdge"}

func (ec *executionContext) _MetaobjectEdge(ctx context.Context, sel ast.SelectionSet, obj *model.MetaobjectEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaobjectEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetaobjectEdge")
		case "cursor":
			out.Values[i] = ec._MetaobjectEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._MetaobjectEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metaobjectFieldImplementors = []string{"MetaobjectField"}

func (ec *executionContext) _MetaobjectField(ctx context.Context, sel ast.SelectionSet, obj *model.MetaobjectField) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaobjectFieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetaobjectField")
		case "key":
			out.Values[i] = ec._MetaobjectField_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reference":
			out.Values[i] = ec._MetaobjectField_reference(ctx, field, obj)
		case "references":
			out.Values[i] = ec._MetaobjectField_references(ctx, field, obj)
		case "type":
			out.Values[i] = ec._MetaobjectField_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._MetaobjectField_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metaobjectSEOImplementors = []string{"MetaobjectSEO"}

func (ec *executionContext) _MetaobjectSEO(ctx context.Context, sel ast.SelectionSet, obj *model.MetaobjectSeo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaobjectSEOImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetaobjectSEO")
		case "description":
			out.Values[i] = ec._MetaobjectSEO_description(ctx, field, obj)
		case "title":
			out.Values[i] = ec._MetaobjectSEO_title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var model3dImplementors = []string{"Model3d", "MetafieldReference", "Media", "Node"}

func (ec *executionContext) _Model3d(ctx context.Context, sel ast.SelectionSet, obj *model.Model3d) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, model3dImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Model3d")
		case "alt":
			out.Values[i] = ec._Model3d_alt(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Model3d_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mediaContentType":
			out.Values[i] = ec._Model3d_mediaContentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "presentation":
			out.Values[i] = ec._Model3d_presentation(ctx, field, obj)
		case "previewImage":
			out.Values[i] = ec._Model3d_previewImage(ctx, field, obj)
		case "sources":
			out.Values[i] = ec._Model3d_sources(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var model3dSourceImplementors = []string{"Model3dSource"}

func (ec *executionContext) _Model3dSource(ctx context.Context, sel ast.SelectionSet, obj *model.Model3dSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, model3dSourceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Model3dSource")
		case "filesize":
			out.Values[i] = ec._Model3dSource_filesize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "format":
			out.Values[i] = ec._Model3dSource_format(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mimeType":
			out.Values[i] = ec._Model3dSource_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Model3dSource_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var moneyV2Implementors = []string{"MoneyV2", "PricingValue", "SellingPlanCheckoutChargeValue"}

func (ec *executionContext) _MoneyV2(ctx context.Context, sel ast.SelectionSet, obj *model.MoneyV2) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moneyV2Implementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MoneyV2")
		case "amount":
			out.Values[i] = ec._MoneyV2_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currencyCode":
			out.Values[i] = ec._MoneyV2_currencyCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "cartAttributesUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartAttributesUpdate(ctx, field)
			})
		case "cartBillingAddressUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartBillingAddressUpdate(ctx, field)
			})
		case "cartBuyerIdentityUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartBuyerIdentityUpdate(ctx, field)
			})
		case "cartCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartCreate(ctx, field)
			})
		case "cartDeliveryAddressesAdd":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartDeliveryAddressesAdd(ctx, field)
			})
		case "cartDeliveryAddressesRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartDeliveryAddressesRemove(ctx, field)
			})
		case "cartDeliveryAddressesReplace":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartDeliveryAddressesReplace(ctx, field)
			})
		case "cartDeliveryAddressesUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartDeliveryAddressesUpdate(ctx, field)
			})
		case "cartDiscountCodesUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartDiscountCodesUpdate(ctx, field)
			})
		case "cartGiftCardCodesRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartGiftCardCodesRemove(ctx, field)
			})
		case "cartGiftCardCodesUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartGiftCardCodesUpdate(ctx, field)
			})
		case "cartLinesAdd":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartLinesAdd(ctx, field)
			})
		case "cartLinesRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartLinesRemove(ctx, field)
			})
		case "cartLinesUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartLinesUpdate(ctx, field)
			})
		case "cartMetafieldDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartMetafieldDelete(ctx, field)
			})
		case "cartMetafieldsSet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartMetafieldsSet(ctx, field)
			})
		case "cartNoteUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartNoteUpdate(ctx, field)
			})
		case "cartPaymentUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartPaymentUpdate(ctx, field)
			})
		case "cartPrepareForCompletion":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartPrepareForCompletion(ctx, field)
			})
		case "cartRemovePersonalData":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartRemovePersonalData(ctx, field)
			})
		case "cartSelectedDeliveryOptionsUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartSelectedDeliveryOptionsUpdate(ctx, field)
			})
		case "cartSubmitForCompletion":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartSubmitForCompletion(ctx, field)
			})
		case "checkoutAttributesUpdateV2":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutAttributesUpdateV2(ctx, field)
			})
		case "checkoutCompleteFree":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutCompleteFree(ctx, field)
			})
		case "checkoutCompleteWithCreditCardV2":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutCompleteWithCreditCardV2(ctx, field)
			})
		case "checkoutCompleteWithTokenizedPaymentV3":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutCompleteWithTokenizedPaymentV3(ctx, field)
			})
		case "checkoutCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutCreate(ctx, field)
			})
		case "checkoutCustomerAssociateV2":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutCustomerAssociateV2(ctx, field)
			})
		case "checkoutCustomerDisassociateV2":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutCustomerDisassociateV2(ctx, field)
			})
		case "checkoutDiscountCodeApplyV2":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutDiscountCodeApplyV2(ctx, field)
			})
		case "checkoutDiscountCodeRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutDiscountCodeRemove(ctx, field)
			})
		case "checkoutEmailUpdateV2":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutEmailUpdateV2(ctx, field)
			})
		case "checkoutGiftCardRemoveV2":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutGiftCardRemoveV2(ctx, field)
			})
		case "checkoutGiftCardsAppend":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutGiftCardsAppend(ctx, field)
			})
		case "checkoutLineItemsAdd":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutLineItemsAdd(ctx, field)
			})
		case "checkoutLineItemsRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutLineItemsRemove(ctx, field)
			})
		case "checkoutLineItemsReplace":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutLineItemsReplace(ctx, field)
			})
		case "checkoutLineItemsUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutLineItemsUpdate(ctx, field)
			})
		case "checkoutShippingAddressUpdateV2":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutShippingAddressUpdateV2(ctx, field)
			})
		case "checkoutShippingLineUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkoutShippingLineUpdate(ctx, field)
			})
		case "customerAccessTokenCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerAccessTokenCreate(ctx, field)
			})
		case "customerAccessTokenCreateWithMultipass":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerAccessTokenCreateWithMultipass(ctx, field)
			})
		case "customerAccessTokenDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerAccessTokenDelete(ctx, field)
			})
		case "customerAccessTokenRenew":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerAccessTokenRenew(ctx, field)
			})
		case "customerActivate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerActivate(ctx, field)
			})
		case "customerActivateByUrl":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerActivateByUrl(ctx, field)
			})
		case "customerAddressCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerAddressCreate(ctx, field)
			})
		case "customerAddressDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerAddressDelete(ctx, field)
			})
		case "customerAddressUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerAddressUpdate(ctx, field)
			})
		case "customerCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerCreate(ctx, field)
			})
		case "customerDefaultAddressUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerDefaultAddressUpdate(ctx, field)
			})
		case "customerRecover":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerRecover(ctx, field)
			})
		case "customerReset":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerReset(ctx, field)
			})
		case "customerResetByUrl":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerResetByUrl(ctx, field)
			})
		case "customerUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customerUpdate(ctx, field)
			})
		case "shopPayPaymentRequestSessionCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_shopPayPaymentRequestSessionCreate(ctx, field)
			})
		case "shopPayPaymentRequestSessionSubmit":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_shopPayPaymentRequestSessionSubmit(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var orderImplementors = []string{"Order", "MetafieldParentResource", "HasMetafields", "Node"}

func (ec *executionContext) _Order(ctx context.Context, sel ast.SelectionSet, obj *model.Order) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Order")
		case "billingAddress":
			out.Values[i] = ec._Order_billingAddress(ctx, field, obj)
		case "cancelReason":
			out.Values[i] = ec._Order_cancelReason(ctx, field, obj)
		case "canceledAt":
			out.Values[i] = ec._Order_canceledAt(ctx, field, obj)
		case "currencyCode":
			out.Values[i] = ec._Order_currencyCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currentSubtotalPrice":
			out.Values[i] = ec._Order_currentSubtotalPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currentTotalDuties":
			out.Values[i] = ec._Order_currentTotalDuties(ctx, field, obj)
		case "currentTotalPrice":
			out.Values[i] = ec._Order_currentTotalPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currentTotalShippingPrice":
			out.Values[i] = ec._Order_currentTotalShippingPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currentTotalTax":
			out.Values[i] = ec._Order_currentTotalTax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customAttributes":
			out.Values[i] = ec._Order_customAttributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customerLocale":
			out.Values[i] = ec._Order_customerLocale(ctx, field, obj)
		case "customerUrl":
			out.Values[i] = ec._Order_customerUrl(ctx, field, obj)
		case "discountApplications":
			out.Values[i] = ec._Order_discountApplications(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edited":
			out.Values[i] = ec._Order_edited(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._Order_email(ctx, field, obj)
		case "financialStatus":
			out.Values[i] = ec._Order_financialStatus(ctx, field, obj)
		case "fulfillmentStatus":
			out.Values[i] = ec._Order_fulfillmentStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Order_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lineItems":
			out.Values[i] = ec._Order_lineItems(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metafield":
			out.Values[i] = ec._Order_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Order_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Order_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "orderNumber":
			out.Values[i] = ec._Order_orderNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "originalTotalDuties":
			out.Values[i] = ec._Order_originalTotalDuties(ctx, field, obj)
		case "originalTotalPrice":
			out.Values[i] = ec._Order_originalTotalPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phone":
			out.Values[i] = ec._Order_phone(ctx, field, obj)
		case "processedAt":
			out.Values[i] = ec._Order_processedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shippingAddress":
			out.Values[i] = ec._Order_shippingAddress(ctx, field, obj)
		case "shippingDiscountAllocations":
			out.Values[i] = ec._Order_shippingDiscountAllocations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "statusUrl":
			out.Values[i] = ec._Order_statusUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subtotalPrice":
			out.Values[i] = ec._Order_subtotalPrice(ctx, field, obj)
		case "subtotalPriceV2":
			out.Values[i] = ec._Order_subtotalPriceV2(ctx, field, obj)
		case "successfulFulfillments":
			out.Values[i] = ec._Order_successfulFulfillments(ctx, field, obj)
		case "totalPrice":
			out.Values[i] = ec._Order_totalPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPriceV2":
			out.Values[i] = ec._Order_totalPriceV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalRefunded":
			out.Values[i] = ec._Order_totalRefunded(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalRefundedV2":
			out.Values[i] = ec._Order_totalRefundedV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalShippingPrice":
			out.Values[i] = ec._Order_totalShippingPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalShippingPriceV2":
			out.Values[i] = ec._Order_totalShippingPriceV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalTax":
			out.Values[i] = ec._Order_totalTax(ctx, field, obj)
		case "totalTaxV2":
			out.Values[i] = ec._Order_totalTaxV2(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var orderConnectionImplementors = []string{"OrderConnection"}

func (ec *executionContext) _OrderConnection(ctx context.Context, sel ast.SelectionSet, obj *model.OrderConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderConnection")
		case "edges":
			out.Values[i] = ec._OrderConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._OrderConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._OrderConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._OrderConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var orderEdgeImplementors = []string{"OrderEdge"}

func (ec *executionContext) _OrderEdge(ctx context.Context, sel ast.SelectionSet, obj *model.OrderEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderEdge")
		case "cursor":
			out.Values[i] = ec._OrderEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._OrderEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var orderLineItemImplementors = []string{"OrderLineItem"}

func (ec *executionContext) _OrderLineItem(ctx context.Context, sel ast.SelectionSet, obj *model.OrderLineItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderLineItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderLineItem")
		case "currentQuantity":
			out.Values[i] = ec._OrderLineItem_currentQuantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customAttributes":
			out.Values[i] = ec._OrderLineItem_customAttributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountAllocations":
			out.Values[i] = ec._OrderLineItem_discountAllocations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountedTotalPrice":
			out.Values[i] = ec._OrderLineItem_discountedTotalPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "originalTotalPrice":
			out.Values[i] = ec._OrderLineItem_originalTotalPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "quantity":
			out.Values[i] = ec._OrderLineItem_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._OrderLineItem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "variant":
			out.Values[i] = ec._OrderLineItem_variant(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var orderLineItemConnectionImplementors = []string{"OrderLineItemConnection"}

func (ec *executionContext) _OrderLineItemConnection(ctx context.Context, sel ast.SelectionSet, obj *model.OrderLineItemConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderLineItemConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderLineItemConnection")
		case "edges":
			out.Values[i] = ec._OrderLineItemConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._OrderLineItemConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._OrderLineItemConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var orderLineItemEdgeImplementors = []string{"OrderLineItemEdge"}

func (ec *executionContext) _OrderLineItemEdge(ctx context.Context, sel ast.SelectionSet, obj *model.OrderLineItemEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderLineItemEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderLineItemEdge")
		case "cursor":
			out.Values[i] = ec._OrderLineItemEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._OrderLineItemEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageImplementors = []string{"Page", "MenuItemResource", "MetafieldParentResource", "MetafieldReference", "SearchResultItem", "HasMetafields", "Node", "OnlineStorePublishable", "Trackable"}

func (ec *executionContext) _Page(ctx context.Context, sel ast.SelectionSet, obj *model.Page) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Page")
		case "body":
			out.Values[i] = ec._Page_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bodySummary":
			out.Values[i] = ec._Page_bodySummary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Page_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "handle":
			out.Values[i] = ec._Page_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Page_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metafield":
			out.Values[i] = ec._Page_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Page_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "onlineStoreUrl":
			out.Values[i] = ec._Page_onlineStoreUrl(ctx, field, obj)
		case "seo":
			out.Values[i] = ec._Page_seo(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Page_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "trackingParameters":
			out.Values[i] = ec._Page_trackingParameters(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Page_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageConnectionImplementors = []string{"PageConnection"}

func (ec *executionContext) _PageConnection(ctx context.Context, sel ast.SelectionSet, obj *model.PageConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageConnection")
		case "edges":
			out.Values[i] = ec._PageConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._PageConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._PageConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageEdgeImplementors = []string{"PageEdge"}

func (ec *executionContext) _PageEdge(ctx context.Context, sel ast.SelectionSet, obj *model.PageEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageEdge")
		case "cursor":
			out.Values[i] = ec._PageEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._PageEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var paginatedSitemapResourcesImplementors = []string{"PaginatedSitemapResources"}

func (ec *executionContext) _PaginatedSitemapResources(ctx context.Context, sel ast.SelectionSet, obj *model.PaginatedSitemapResources) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginatedSitemapResourcesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginatedSitemapResources")
		case "hasNextPage":
			out.Values[i] = ec._PaginatedSitemapResources_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "items":
			out.Values[i] = ec._PaginatedSitemapResources_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var paymentImplementors = []string{"Payment", "Node"}

func (ec *executionContext) _Payment(ctx context.Context, sel ast.SelectionSet, obj *model.Payment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Payment")
		case "amount":
			out.Values[i] = ec._Payment_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amountV2":
			out.Values[i] = ec._Payment_amountV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "billingAddress":
			out.Values[i] = ec._Payment_billingAddress(ctx, field, obj)
		case "checkout":
			out.Values[i] = ec._Payment_checkout(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "creditCard":
			out.Values[i] = ec._Payment_creditCard(ctx, field, obj)
		case "errorMessage":
			out.Values[i] = ec._Payment_errorMessage(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Payment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "idempotencyKey":
			out.Values[i] = ec._Payment_idempotencyKey(ctx, field, obj)
		case "nextActionUrl":
			out.Values[i] = ec._Payment_nextActionUrl(ctx, field, obj)
		case "ready":
			out.Values[i] = ec._Payment_ready(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "test":
			out.Values[i] = ec._Payment_test(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transaction":
			out.Values[i] = ec._Payment_transaction(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var paymentSettingsImplementors = []string{"PaymentSettings"}

func (ec *executionContext) _PaymentSettings(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentSettings")
		case "acceptedCardBrands":
			out.Values[i] = ec._PaymentSettings_acceptedCardBrands(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cardVaultUrl":
			out.Values[i] = ec._PaymentSettings_cardVaultUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "countryCode":
			out.Values[i] = ec._PaymentSettings_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currencyCode":
			out.Values[i] = ec._PaymentSettings_currencyCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "enabledPresentmentCurrencies":
			out.Values[i] = ec._PaymentSettings_enabledPresentmentCurrencies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shopifyPaymentsAccountId":
			out.Values[i] = ec._PaymentSettings_shopifyPaymentsAccountId(ctx, field, obj)
		case "supportedDigitalWallets":
			out.Values[i] = ec._PaymentSettings_supportedDigitalWallets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var predictiveSearchResultImplementors = []string{"PredictiveSearchResult"}

func (ec *executionContext) _PredictiveSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.PredictiveSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, predictiveSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PredictiveSearchResult")
		case "articles":
			out.Values[i] = ec._PredictiveSearchResult_articles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "collections":
			out.Values[i] = ec._PredictiveSearchResult_collections(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pages":
			out.Values[i] = ec._PredictiveSearchResult_pages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "products":
			out.Values[i] = ec._PredictiveSearchResult_products(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queries":
			out.Values[i] = ec._PredictiveSearchResult_queries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pricingPercentageValueImplementors = []string{"PricingPercentageValue", "PricingValue"}

func (ec *executionContext) _PricingPercentageValue(ctx context.Context, sel ast.SelectionSet, obj *model.PricingPercentageValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pricingPercentageValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PricingPercentageValue")
		case "percentage":
			out.Values[i] = ec._PricingPercentageValue_percentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productImplementors = []string{"Product", "MenuItemResource", "MetafieldParentResource", "MetafieldReference", "SearchResultItem", "HasMetafields", "Node", "OnlineStorePublishable", "Trackable"}

func (ec *executionContext) _Product(ctx context.Context, sel ast.SelectionSet, obj *model.Product) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Product")
		case "adjacentVariants":
			out.Values[i] = ec._Product_adjacentVariants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "availableForSale":
			out.Values[i] = ec._Product_availableForSale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "category":
			out.Values[i] = ec._Product_category(ctx, field, obj)
		case "collections":
			out.Values[i] = ec._Product_collections(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "compareAtPriceRange":
			out.Values[i] = ec._Product_compareAtPriceRange(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Product_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Product_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "descriptionHtml":
			out.Values[i] = ec._Product_descriptionHtml(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "encodedVariantAvailability":
			out.Values[i] = ec._Product_encodedVariantAvailability(ctx, field, obj)
		case "encodedVariantExistence":
			out.Values[i] = ec._Product_encodedVariantExistence(ctx, field, obj)
		case "featuredImage":
			out.Values[i] = ec._Product_featuredImage(ctx, field, obj)
		case "handle":
			out.Values[i] = ec._Product_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._Product_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "images":
			out.Values[i] = ec._Product_images(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isGiftCard":
			out.Values[i] = ec._Product_isGiftCard(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "media":
			out.Values[i] = ec._Product_media(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metafield":
			out.Values[i] = ec._Product_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Product_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "onlineStoreUrl":
			out.Values[i] = ec._Product_onlineStoreUrl(ctx, field, obj)
		case "options":
			out.Values[i] = ec._Product_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priceRange":
			out.Values[i] = ec._Product_priceRange(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productType":
			out.Values[i] = ec._Product_productType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "publishedAt":
			out.Values[i] = ec._Product_publishedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiresSellingPlan":
			out.Values[i] = ec._Product_requiresSellingPlan(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selectedOrFirstAvailableVariant":
			out.Values[i] = ec._Product_selectedOrFirstAvailableVariant(ctx, field, obj)
		case "sellingPlanGroups":
			out.Values[i] = ec._Product_sellingPlanGroups(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "seo":
			out.Values[i] = ec._Product_seo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tags":
			out.Values[i] = ec._Product_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Product_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalInventory":
			out.Values[i] = ec._Product_totalInventory(ctx, field, obj)
		case "trackingParameters":
			out.Values[i] = ec._Product_trackingParameters(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Product_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "variantBySelectedOptions":
			out.Values[i] = ec._Product_variantBySelectedOptions(ctx, field, obj)
		case "variants":
			out.Values[i] = ec._Product_variants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "variantsCount":
			out.Values[i] = ec._Product_variantsCount(ctx, field, obj)
		case "vendor":
			out.Values[i] = ec._Product_vendor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productConnectionImplementors = []string{"ProductConnection"}

func (ec *executionContext) _ProductConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ProductConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductConnection")
		case "edges":
			out.Values[i] = ec._ProductConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "filters":
			out.Values[i] = ec._ProductConnection_filters(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ProductConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ProductConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productEdgeImplementors = []string{"ProductEdge"}

func (ec *executionContext) _ProductEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ProductEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductEdge")
		case "cursor":
			out.Values[i] = ec._ProductEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._ProductEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productOptionImplementors = []string{"ProductOption", "Node"}

func (ec *executionContext) _ProductOption(ctx context.Context, sel ast.SelectionSet, obj *model.ProductOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductOption")
		case "id":
			out.Values[i] = ec._ProductOption_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._ProductOption_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "optionValues":
			out.Values[i] = ec._ProductOption_optionValues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "values":
			out.Values[i] = ec._ProductOption_values(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productOptionValueImplementors = []string{"ProductOptionValue", "Node"}

func (ec *executionContext) _ProductOptionValue(ctx context.Context, sel ast.SelectionSet, obj *model.ProductOptionValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productOptionValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductOptionValue")
		case "firstSelectableVariant":
			out.Values[i] = ec._ProductOptionValue_firstSelectableVariant(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ProductOptionValue_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._ProductOptionValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "swatch":
			out.Values[i] = ec._ProductOptionValue_swatch(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productOptionValueSwatchImplementors = []string{"ProductOptionValueSwatch"}

func (ec *executionContext) _ProductOptionValueSwatch(ctx context.Context, sel ast.SelectionSet, obj *model.ProductOptionValueSwatch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productOptionValueSwatchImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductOptionValueSwatch")
		case "color":
			out.Values[i] = ec._ProductOptionValueSwatch_color(ctx, field, obj)
		case "image":
			out.Values[i] = ec._ProductOptionValueSwatch_image(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productPriceRangeImplementors = []string{"ProductPriceRange"}

func (ec *executionContext) _ProductPriceRange(ctx context.Context, sel ast.SelectionSet, obj *model.ProductPriceRange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productPriceRangeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductPriceRange")
		case "maxVariantPrice":
			out.Values[i] = ec._ProductPriceRange_maxVariantPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minVariantPrice":
			out.Values[i] = ec._ProductPriceRange_minVariantPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productVariantImplementors = []string{"ProductVariant", "Merchandise", "MetafieldParentResource", "MetafieldReference", "HasMetafields", "Node"}

func (ec *executionContext) _ProductVariant(ctx context.Context, sel ast.SelectionSet, obj *model.ProductVariant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productVariantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductVariant")
		case "availableForSale":
			out.Values[i] = ec._ProductVariant_availableForSale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "barcode":
			out.Values[i] = ec._ProductVariant_barcode(ctx, field, obj)
		case "compareAtPrice":
			out.Values[i] = ec._ProductVariant_compareAtPrice(ctx, field, obj)
		case "compareAtPriceV2":
			out.Values[i] = ec._ProductVariant_compareAtPriceV2(ctx, field, obj)
		case "components":
			out.Values[i] = ec._ProductVariant_components(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currentlyNotInStock":
			out.Values[i] = ec._ProductVariant_currentlyNotInStock(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "groupedBy":
			out.Values[i] = ec._ProductVariant_groupedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._ProductVariant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image":
			out.Values[i] = ec._ProductVariant_image(ctx, field, obj)
		case "metafield":
			out.Values[i] = ec._ProductVariant_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._ProductVariant_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._ProductVariant_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priceV2":
			out.Values[i] = ec._ProductVariant_priceV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "product":
			out.Values[i] = ec._ProductVariant_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "quantityAvailable":
			out.Values[i] = ec._ProductVariant_quantityAvailable(ctx, field, obj)
		case "quantityPriceBreaks":
			out.Values[i] = ec._ProductVariant_quantityPriceBreaks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "quantityRule":
			out.Values[i] = ec._ProductVariant_quantityRule(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiresComponents":
			out.Values[i] = ec._ProductVariant_requiresComponents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiresShipping":
			out.Values[i] = ec._ProductVariant_requiresShipping(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selectedOptions":
			out.Values[i] = ec._ProductVariant_selectedOptions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sellingPlanAllocations":
			out.Values[i] = ec._ProductVariant_sellingPlanAllocations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shopPayInstallmentsPricing":
			out.Values[i] = ec._ProductVariant_shopPayInstallmentsPricing(ctx, field, obj)
		case "sku":
			out.Values[i] = ec._ProductVariant_sku(ctx, field, obj)
		case "storeAvailability":
			out.Values[i] = ec._ProductVariant_storeAvailability(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taxable":
			out.Values[i] = ec._ProductVariant_taxable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._ProductVariant_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unitPrice":
			out.Values[i] = ec._ProductVariant_unitPrice(ctx, field, obj)
		case "unitPriceMeasurement":
			out.Values[i] = ec._ProductVariant_unitPriceMeasurement(ctx, field, obj)
		case "weight":
			out.Values[i] = ec._ProductVariant_weight(ctx, field, obj)
		case "weightUnit":
			out.Values[i] = ec._ProductVariant_weightUnit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productVariantComponentImplementors = []string{"ProductVariantComponent"}

func (ec *executionContext) _ProductVariantComponent(ctx context.Context, sel ast.SelectionSet, obj *model.ProductVariantComponent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productVariantComponentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductVariantComponent")
		case "productVariant":
			out.Values[i] = ec._ProductVariantComponent_productVariant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "quantity":
			out.Values[i] = ec._ProductVariantComponent_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productVariantComponentConnectionImplementors = []string{"ProductVariantComponentConnection"}

func (ec *executionContext) _ProductVariantComponentConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ProductVariantComponentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productVariantComponentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductVariantComponentConnection")
		case "edges":
			out.Values[i] = ec._ProductVariantComponentConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ProductVariantComponentConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ProductVariantComponentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productVariantComponentEdgeImplementors = []string{"ProductVariantComponentEdge"}

func (ec *executionContext) _ProductVariantComponentEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ProductVariantComponentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productVariantComponentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductVariantComponentEdge")
		case "cursor":
			out.Values[i] = ec._ProductVariantComponentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._ProductVariantComponentEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productVariantConnectionImplementors = []string{"ProductVariantConnection"}

func (ec *executionContext) _ProductVariantConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ProductVariantConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productVariantConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductVariantConnection")
		case "edges":
			out.Values[i] = ec._ProductVariantConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ProductVariantConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ProductVariantConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productVariantEdgeImplementors = []string{"ProductVariantEdge"}

func (ec *executionContext) _ProductVariantEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ProductVariantEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productVariantEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductVariantEdge")
		case "cursor":
			out.Values[i] = ec._ProductVariantEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._ProductVariantEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var purchasingCompanyImplementors = []string{"PurchasingCompany"}

func (ec *executionContext) _PurchasingCompany(ctx context.Context, sel ast.SelectionSet, obj *model.PurchasingCompany) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, purchasingCompanyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PurchasingCompany")
		case "company":
			out.Values[i] = ec._PurchasingCompany_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact":
			out.Values[i] = ec._PurchasingCompany_contact(ctx, field, obj)
		case "location":
			out.Values[i] = ec._PurchasingCompany_location(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quantityPriceBreakImplementors = []string{"QuantityPriceBreak"}

func (ec *executionContext) _QuantityPriceBreak(ctx context.Context, sel ast.SelectionSet, obj *model.QuantityPriceBreak) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quantityPriceBreakImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuantityPriceBreak")
		case "minimumQuantity":
			out.Values[i] = ec._QuantityPriceBreak_minimumQuantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._QuantityPriceBreak_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quantityPriceBreakConnectionImplementors = []string{"QuantityPriceBreakConnection"}

func (ec *executionContext) _QuantityPriceBreakConnection(ctx context.Context, sel ast.SelectionSet, obj *model.QuantityPriceBreakConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quantityPriceBreakConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuantityPriceBreakConnection")
		case "edges":
			out.Values[i] = ec._QuantityPriceBreakConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._QuantityPriceBreakConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._QuantityPriceBreakConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quantityPriceBreakEdgeImplementors = []string{"QuantityPriceBreakEdge"}

func (ec *executionContext) _QuantityPriceBreakEdge(ctx context.Context, sel ast.SelectionSet, obj *model.QuantityPriceBreakEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quantityPriceBreakEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuantityPriceBreakEdge")
		case "cursor":
			out.Values[i] = ec._QuantityPriceBreakEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._QuantityPriceBreakEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quantityRuleImplementors = []string{"QuantityRule"}

func (ec *executionContext) _QuantityRule(ctx context.Context, sel ast.SelectionSet, obj *model.QuantityRule) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quantityRuleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuantityRule")
		case "increment":
			out.Values[i] = ec._QuantityRule_increment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maximum":
			out.Values[i] = ec._QuantityRule_maximum(ctx, field, obj)
		case "minimum":
			out.Values[i] = ec._QuantityRule_minimum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryRootImplementors = []string{"QueryRoot"}

func (ec *executionContext) _QueryRoot(ctx context.Context, sel ast.SelectionSet, obj *model.QueryRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryRootImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QueryRoot")
		case "article":
			out.Values[i] = ec._QueryRoot_article(ctx, field, obj)
		case "articles":
			out.Values[i] = ec._QueryRoot_articles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "blog":
			out.Values[i] = ec._QueryRoot_blog(ctx, field, obj)
		case "blogByHandle":
			out.Values[i] = ec._QueryRoot_blogByHandle(ctx, field, obj)
		case "blogs":
			out.Values[i] = ec._QueryRoot_blogs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cart":
			out.Values[i] = ec._QueryRoot_cart(ctx, field, obj)
		case "cartCompletionAttempt":
			out.Values[i] = ec._QueryRoot_cartCompletionAttempt(ctx, field, obj)
		case "collection":
			out.Values[i] = ec._QueryRoot_collection(ctx, field, obj)
		case "collectionByHandle":
			out.Values[i] = ec._QueryRoot_collectionByHandle(ctx, field, obj)
		case "collections":
			out.Values[i] = ec._QueryRoot_collections(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customer":
			out.Values[i] = ec._QueryRoot_customer(ctx, field, obj)
		case "localization":
			out.Values[i] = ec._QueryRoot_localization(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec._QueryRoot_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "menu":
			out.Values[i] = ec._QueryRoot_menu(ctx, field, obj)
		case "metaobject":
			out.Values[i] = ec._QueryRoot_metaobject(ctx, field, obj)
		case "metaobjects":
			out.Values[i] = ec._QueryRoot_metaobjects(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._QueryRoot_node(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._QueryRoot_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._QueryRoot_page(ctx, field, obj)
		case "pageByHandle":
			out.Values[i] = ec._QueryRoot_pageByHandle(ctx, field, obj)
		case "pages":
			out.Values[i] = ec._QueryRoot_pages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paymentSettings":
			out.Values[i] = ec._QueryRoot_paymentSettings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "predictiveSearch":
			out.Values[i] = ec._QueryRoot_predictiveSearch(ctx, field, obj)
		case "product":
			out.Values[i] = ec._QueryRoot_product(ctx, field, obj)
		case "productByHandle":
			out.Values[i] = ec._QueryRoot_productByHandle(ctx, field, obj)
		case "productRecommendations":
			out.Values[i] = ec._QueryRoot_productRecommendations(ctx, field, obj)
		case "productTags":
			out.Values[i] = ec._QueryRoot_productTags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productTypes":
			out.Values[i] = ec._QueryRoot_productTypes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "products":
			out.Values[i] = ec._QueryRoot_products(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "publicApiVersions":
			out.Values[i] = ec._QueryRoot_publicApiVersions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "search":
			out.Values[i] = ec._QueryRoot_search(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shop":
			out.Values[i] = ec._QueryRoot_shop(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shopPayInstallmentsPricing":
			out.Values[i] = ec._QueryRoot_shopPayInstallmentsPricing(ctx, field, obj)
		case "sitemap":
			out.Values[i] = ec._QueryRoot_sitemap(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "urlRedirects":
			out.Values[i] = ec._QueryRoot_urlRedirects(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sEOImplementors = []string{"SEO"}

func (ec *executionContext) _SEO(ctx context.Context, sel ast.SelectionSet, obj *model.Seo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sEOImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SEO")
		case "description":
			out.Values[i] = ec._SEO_description(ctx, field, obj)
		case "title":
			out.Values[i] = ec._SEO_title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var scriptDiscountApplicationImplementors = []string{"ScriptDiscountApplication", "DiscountApplication"}

func (ec *executionContext) _ScriptDiscountApplication(ctx context.Context, sel ast.SelectionSet, obj *model.ScriptDiscountApplication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scriptDiscountApplicationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScriptDiscountApplication")
		case "allocationMethod":
			out.Values[i] = ec._ScriptDiscountApplication_allocationMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetSelection":
			out.Values[i] = ec._ScriptDiscountApplication_targetSelection(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetType":
			out.Values[i] = ec._ScriptDiscountApplication_targetType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._ScriptDiscountApplication_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._ScriptDiscountApplication_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var searchQuerySuggestionImplementors = []string{"SearchQuerySuggestion", "Trackable"}

func (ec *executionContext) _SearchQuerySuggestion(ctx context.Context, sel ast.SelectionSet, obj *model.SearchQuerySuggestion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchQuerySuggestionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchQuerySuggestion")
		case "styledText":
			out.Values[i] = ec._SearchQuerySuggestion_styledText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._SearchQuerySuggestion_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "trackingParameters":
			out.Values[i] = ec._SearchQuerySuggestion_trackingParameters(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var searchResultItemConnectionImplementors = []string{"SearchResultItemConnection"}

func (ec *executionContext) _SearchResultItemConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SearchResultItemConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchResultItemConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchResultItemConnection")
		case "edges":
			out.Values[i] = ec._SearchResultItemConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._SearchResultItemConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._SearchResultItemConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productFilters":
			out.Values[i] = ec._SearchResultItemConnection_productFilters(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._SearchResultItemConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var searchResultItemEdgeImplementors = []string{"SearchResultItemEdge"}

func (ec *executionContext) _SearchResultItemEdge(ctx context.Context, sel ast.SelectionSet, obj *model.SearchResultItemEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchResultItemEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchResultItemEdge")
		case "cursor":
			out.Values[i] = ec._SearchResultItemEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._SearchResultItemEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var selectedOptionImplementors = []string{"SelectedOption"}

func (ec *executionContext) _SelectedOption(ctx context.Context, sel ast.SelectionSet, obj *model.SelectedOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, selectedOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SelectedOption")
		case "name":
			out.Values[i] = ec._SelectedOption_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._SelectedOption_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanImplementors = []string{"SellingPlan", "MetafieldParentResource", "HasMetafields"}

func (ec *executionContext) _SellingPlan(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlan")
		case "billingPolicy":
			out.Values[i] = ec._SellingPlan_billingPolicy(ctx, field, obj)
		case "checkoutCharge":
			out.Values[i] = ec._SellingPlan_checkoutCharge(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryPolicy":
			out.Values[i] = ec._SellingPlan_deliveryPolicy(ctx, field, obj)
		case "description":
			out.Values[i] = ec._SellingPlan_description(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SellingPlan_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metafield":
			out.Values[i] = ec._SellingPlan_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._SellingPlan_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._SellingPlan_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "options":
			out.Values[i] = ec._SellingPlan_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priceAdjustments":
			out.Values[i] = ec._SellingPlan_priceAdjustments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recurringDeliveries":
			out.Values[i] = ec._SellingPlan_recurringDeliveries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanAllocationImplementors = []string{"SellingPlanAllocation"}

func (ec *executionContext) _SellingPlanAllocation(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanAllocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanAllocationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanAllocation")
		case "checkoutChargeAmount":
			out.Values[i] = ec._SellingPlanAllocation_checkoutChargeAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priceAdjustments":
			out.Values[i] = ec._SellingPlanAllocation_priceAdjustments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "remainingBalanceChargeAmount":
			out.Values[i] = ec._SellingPlanAllocation_remainingBalanceChargeAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sellingPlan":
			out.Values[i] = ec._SellingPlanAllocation_sellingPlan(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanAllocationConnectionImplementors = []string{"SellingPlanAllocationConnection"}

func (ec *executionContext) _SellingPlanAllocationConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanAllocationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanAllocationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanAllocationConnection")
		case "edges":
			out.Values[i] = ec._SellingPlanAllocationConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._SellingPlanAllocationConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._SellingPlanAllocationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanAllocationEdgeImplementors = []string{"SellingPlanAllocationEdge"}

func (ec *executionContext) _SellingPlanAllocationEdge(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanAllocationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanAllocationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanAllocationEdge")
		case "cursor":
			out.Values[i] = ec._SellingPlanAllocationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._SellingPlanAllocationEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanAllocationPriceAdjustmentImplementors = []string{"SellingPlanAllocationPriceAdjustment"}

func (ec *executionContext) _SellingPlanAllocationPriceAdjustment(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanAllocationPriceAdjustment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanAllocationPriceAdjustmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanAllocationPriceAdjustment")
		case "compareAtPrice":
			out.Values[i] = ec._SellingPlanAllocationPriceAdjustment_compareAtPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "perDeliveryPrice":
			out.Values[i] = ec._SellingPlanAllocationPriceAdjustment_perDeliveryPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._SellingPlanAllocationPriceAdjustment_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unitPrice":
			out.Values[i] = ec._SellingPlanAllocationPriceAdjustment_unitPrice(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanCheckoutChargeImplementors = []string{"SellingPlanCheckoutCharge"}

func (ec *executionContext) _SellingPlanCheckoutCharge(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanCheckoutCharge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanCheckoutChargeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanCheckoutCharge")
		case "type":
			out.Values[i] = ec._SellingPlanCheckoutCharge_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._SellingPlanCheckoutCharge_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanCheckoutChargePercentageValueImplementors = []string{"SellingPlanCheckoutChargePercentageValue", "SellingPlanCheckoutChargeValue"}

func (ec *executionContext) _SellingPlanCheckoutChargePercentageValue(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanCheckoutChargePercentageValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanCheckoutChargePercentageValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanCheckoutChargePercentageValue")
		case "percentage":
			out.Values[i] = ec._SellingPlanCheckoutChargePercentageValue_percentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanConnectionImplementors = []string{"SellingPlanConnection"}

func (ec *executionContext) _SellingPlanConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanConnection")
		case "edges":
			out.Values[i] = ec._SellingPlanConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._SellingPlanConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._SellingPlanConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanEdgeImplementors = []string{"SellingPlanEdge"}

func (ec *executionContext) _SellingPlanEdge(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanEdge")
		case "cursor":
			out.Values[i] = ec._SellingPlanEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._SellingPlanEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanFixedAmountPriceAdjustmentImplementors = []string{"SellingPlanFixedAmountPriceAdjustment", "SellingPlanPriceAdjustmentValue"}

func (ec *executionContext) _SellingPlanFixedAmountPriceAdjustment(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanFixedAmountPriceAdjustment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanFixedAmountPriceAdjustmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanFixedAmountPriceAdjustment")
		case "adjustmentAmount":
			out.Values[i] = ec._SellingPlanFixedAmountPriceAdjustment_adjustmentAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanFixedPriceAdjustmentImplementors = []string{"SellingPlanFixedPriceAdjustment", "SellingPlanPriceAdjustmentValue"}

func (ec *executionContext) _SellingPlanFixedPriceAdjustment(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanFixedPriceAdjustment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanFixedPriceAdjustmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanFixedPriceAdjustment")
		case "price":
			out.Values[i] = ec._SellingPlanFixedPriceAdjustment_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanGroupImplementors = []string{"SellingPlanGroup"}

func (ec *executionContext) _SellingPlanGroup(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanGroup")
		case "appName":
			out.Values[i] = ec._SellingPlanGroup_appName(ctx, field, obj)
		case "name":
			out.Values[i] = ec._SellingPlanGroup_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "options":
			out.Values[i] = ec._SellingPlanGroup_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sellingPlans":
			out.Values[i] = ec._SellingPlanGroup_sellingPlans(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanGroupConnectionImplementors = []string{"SellingPlanGroupConnection"}

func (ec *executionContext) _SellingPlanGroupConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanGroupConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanGroupConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanGroupConnection")
		case "edges":
			out.Values[i] = ec._SellingPlanGroupConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._SellingPlanGroupConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._SellingPlanGroupConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanGroupEdgeImplementors = []string{"SellingPlanGroupEdge"}

func (ec *executionContext) _SellingPlanGroupEdge(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanGroupEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanGroupEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanGroupEdge")
		case "cursor":
			out.Values[i] = ec._SellingPlanGroupEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._SellingPlanGroupEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanGroupOptionImplementors = []string{"SellingPlanGroupOption"}

func (ec *executionContext) _SellingPlanGroupOption(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanGroupOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanGroupOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanGroupOption")
		case "name":
			out.Values[i] = ec._SellingPlanGroupOption_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "values":
			out.Values[i] = ec._SellingPlanGroupOption_values(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanOptionImplementors = []string{"SellingPlanOption"}

func (ec *executionContext) _SellingPlanOption(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanOption")
		case "name":
			out.Values[i] = ec._SellingPlanOption_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._SellingPlanOption_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanPercentagePriceAdjustmentImplementors = []string{"SellingPlanPercentagePriceAdjustment", "SellingPlanPriceAdjustmentValue"}

func (ec *executionContext) _SellingPlanPercentagePriceAdjustment(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanPercentagePriceAdjustment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanPercentagePriceAdjustmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanPercentagePriceAdjustment")
		case "adjustmentPercentage":
			out.Values[i] = ec._SellingPlanPercentagePriceAdjustment_adjustmentPercentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanPriceAdjustmentImplementors = []string{"SellingPlanPriceAdjustment"}

func (ec *executionContext) _SellingPlanPriceAdjustment(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanPriceAdjustment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanPriceAdjustmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanPriceAdjustment")
		case "adjustmentValue":
			out.Values[i] = ec._SellingPlanPriceAdjustment_adjustmentValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "orderCount":
			out.Values[i] = ec._SellingPlanPriceAdjustment_orderCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanRecurringBillingPolicyImplementors = []string{"SellingPlanRecurringBillingPolicy", "SellingPlanBillingPolicy"}

func (ec *executionContext) _SellingPlanRecurringBillingPolicy(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanRecurringBillingPolicy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanRecurringBillingPolicyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanRecurringBillingPolicy")
		case "interval":
			out.Values[i] = ec._SellingPlanRecurringBillingPolicy_interval(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "intervalCount":
			out.Values[i] = ec._SellingPlanRecurringBillingPolicy_intervalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sellingPlanRecurringDeliveryPolicyImplementors = []string{"SellingPlanRecurringDeliveryPolicy", "SellingPlanDeliveryPolicy"}

func (ec *executionContext) _SellingPlanRecurringDeliveryPolicy(ctx context.Context, sel ast.SelectionSet, obj *model.SellingPlanRecurringDeliveryPolicy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellingPlanRecurringDeliveryPolicyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellingPlanRecurringDeliveryPolicy")
		case "interval":
			out.Values[i] = ec._SellingPlanRecurringDeliveryPolicy_interval(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "intervalCount":
			out.Values[i] = ec._SellingPlanRecurringDeliveryPolicy_intervalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shippingRateImplementors = []string{"ShippingRate"}

func (ec *executionContext) _ShippingRate(ctx context.Context, sel ast.SelectionSet, obj *model.ShippingRate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shippingRateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShippingRate")
		case "handle":
			out.Values[i] = ec._ShippingRate_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._ShippingRate_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priceV2":
			out.Values[i] = ec._ShippingRate_priceV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._ShippingRate_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopImplementors = []string{"Shop", "MetafieldParentResource", "HasMetafields", "Node"}

func (ec *executionContext) _Shop(ctx context.Context, sel ast.SelectionSet, obj *model.Shop) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Shop")
		case "brand":
			out.Values[i] = ec._Shop_brand(ctx, field, obj)
		case "customerAccountUrl":
			out.Values[i] = ec._Shop_customerAccountUrl(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Shop_description(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Shop_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metafield":
			out.Values[i] = ec._Shop_metafield(ctx, field, obj)
		case "metafields":
			out.Values[i] = ec._Shop_metafields(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "moneyFormat":
			out.Values[i] = ec._Shop_moneyFormat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Shop_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paymentSettings":
			out.Values[i] = ec._Shop_paymentSettings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "primaryDomain":
			out.Values[i] = ec._Shop_primaryDomain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "privacyPolicy":
			out.Values[i] = ec._Shop_privacyPolicy(ctx, field, obj)
		case "refundPolicy":
			out.Values[i] = ec._Shop_refundPolicy(ctx, field, obj)
		case "shippingPolicy":
			out.Values[i] = ec._Shop_shippingPolicy(ctx, field, obj)
		case "shipsToCountries":
			out.Values[i] = ec._Shop_shipsToCountries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shopPayInstallmentsPricing":
			out.Values[i] = ec._Shop_shopPayInstallmentsPricing(ctx, field, obj)
		case "subscriptionPolicy":
			out.Values[i] = ec._Shop_subscriptionPolicy(ctx, field, obj)
		case "termsOfService":
			out.Values[i] = ec._Shop_termsOfService(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayInstallmentsFinancingPlanImplementors = []string{"ShopPayInstallmentsFinancingPlan", "Node"}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlan(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayInstallmentsFinancingPlan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayInstallmentsFinancingPlanImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayInstallmentsFinancingPlan")
		case "id":
			out.Values[i] = ec._ShopPayInstallmentsFinancingPlan_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxPrice":
			out.Values[i] = ec._ShopPayInstallmentsFinancingPlan_maxPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minPrice":
			out.Values[i] = ec._ShopPayInstallmentsFinancingPlan_minPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "terms":
			out.Values[i] = ec._ShopPayInstallmentsFinancingPlan_terms(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayInstallmentsFinancingPlanTermImplementors = []string{"ShopPayInstallmentsFinancingPlanTerm", "Node"}

func (ec *executionContext) _ShopPayInstallmentsFinancingPlanTerm(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayInstallmentsFinancingPlanTerm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayInstallmentsFinancingPlanTermImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayInstallmentsFinancingPlanTerm")
		case "apr":
			out.Values[i] = ec._ShopPayInstallmentsFinancingPlanTerm_apr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "frequency":
			out.Values[i] = ec._ShopPayInstallmentsFinancingPlanTerm_frequency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._ShopPayInstallmentsFinancingPlanTerm_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "installmentsCount":
			out.Values[i] = ec._ShopPayInstallmentsFinancingPlanTerm_installmentsCount(ctx, field, obj)
		case "loanType":
			out.Values[i] = ec._ShopPayInstallmentsFinancingPlanTerm_loanType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayInstallmentsPricingImplementors = []string{"ShopPayInstallmentsPricing"}

func (ec *executionContext) _ShopPayInstallmentsPricing(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayInstallmentsPricing) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayInstallmentsPricingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayInstallmentsPricing")
		case "financingPlans":
			out.Values[i] = ec._ShopPayInstallmentsPricing_financingPlans(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxPrice":
			out.Values[i] = ec._ShopPayInstallmentsPricing_maxPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minPrice":
			out.Values[i] = ec._ShopPayInstallmentsPricing_minPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productVariantPricing":
			out.Values[i] = ec._ShopPayInstallmentsPricing_productVariantPricing(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayInstallmentsProductVariantPricingImplementors = []string{"ShopPayInstallmentsProductVariantPricing", "Node"}

func (ec *executionContext) _ShopPayInstallmentsProductVariantPricing(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayInstallmentsProductVariantPricing) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayInstallmentsProductVariantPricingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayInstallmentsProductVariantPricing")
		case "available":
			out.Values[i] = ec._ShopPayInstallmentsProductVariantPricing_available(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eligible":
			out.Values[i] = ec._ShopPayInstallmentsProductVariantPricing_eligible(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fullPrice":
			out.Values[i] = ec._ShopPayInstallmentsProductVariantPricing_fullPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._ShopPayInstallmentsProductVariantPricing_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "installmentsCount":
			out.Values[i] = ec._ShopPayInstallmentsProductVariantPricing_installmentsCount(ctx, field, obj)
		case "pricePerTerm":
			out.Values[i] = ec._ShopPayInstallmentsProductVariantPricing_pricePerTerm(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestImplementors = []string{"ShopPayPaymentRequest"}

func (ec *executionContext) _ShopPayPaymentRequest(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequest")
		case "deliveryMethods":
			out.Values[i] = ec._ShopPayPaymentRequest_deliveryMethods(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountCodes":
			out.Values[i] = ec._ShopPayPaymentRequest_discountCodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discounts":
			out.Values[i] = ec._ShopPayPaymentRequest_discounts(ctx, field, obj)
		case "lineItems":
			out.Values[i] = ec._ShopPayPaymentRequest_lineItems(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locale":
			out.Values[i] = ec._ShopPayPaymentRequest_locale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "presentmentCurrency":
			out.Values[i] = ec._ShopPayPaymentRequest_presentmentCurrency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selectedDeliveryMethodType":
			out.Values[i] = ec._ShopPayPaymentRequest_selectedDeliveryMethodType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shippingAddress":
			out.Values[i] = ec._ShopPayPaymentRequest_shippingAddress(ctx, field, obj)
		case "shippingLines":
			out.Values[i] = ec._ShopPayPaymentRequest_shippingLines(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subtotal":
			out.Values[i] = ec._ShopPayPaymentRequest_subtotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ShopPayPaymentRequest_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalShippingPrice":
			out.Values[i] = ec._ShopPayPaymentRequest_totalShippingPrice(ctx, field, obj)
		case "totalTax":
			out.Values[i] = ec._ShopPayPaymentRequest_totalTax(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestContactFieldImplementors = []string{"ShopPayPaymentRequestContactField"}

func (ec *executionContext) _ShopPayPaymentRequestContactField(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestContactField) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestContactFieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestContactField")
		case "address1":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_address1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "address2":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_address2(ctx, field, obj)
		case "city":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "companyName":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_companyName(ctx, field, obj)
		case "countryCode":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_email(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastName":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phone":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_phone(ctx, field, obj)
		case "postalCode":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_postalCode(ctx, field, obj)
		case "provinceCode":
			out.Values[i] = ec._ShopPayPaymentRequestContactField_provinceCode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestDeliveryMethodImplementors = []string{"ShopPayPaymentRequestDeliveryMethod"}

func (ec *executionContext) _ShopPayPaymentRequestDeliveryMethod(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestDeliveryMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestDeliveryMethodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestDeliveryMethod")
		case "amount":
			out.Values[i] = ec._ShopPayPaymentRequestDeliveryMethod_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._ShopPayPaymentRequestDeliveryMethod_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryExpectationLabel":
			out.Values[i] = ec._ShopPayPaymentRequestDeliveryMethod_deliveryExpectationLabel(ctx, field, obj)
		case "detail":
			out.Values[i] = ec._ShopPayPaymentRequestDeliveryMethod_detail(ctx, field, obj)
		case "label":
			out.Values[i] = ec._ShopPayPaymentRequestDeliveryMethod_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxDeliveryDate":
			out.Values[i] = ec._ShopPayPaymentRequestDeliveryMethod_maxDeliveryDate(ctx, field, obj)
		case "minDeliveryDate":
			out.Values[i] = ec._ShopPayPaymentRequestDeliveryMethod_minDeliveryDate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestDiscountImplementors = []string{"ShopPayPaymentRequestDiscount"}

func (ec *executionContext) _ShopPayPaymentRequestDiscount(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestDiscount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestDiscountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestDiscount")
		case "amount":
			out.Values[i] = ec._ShopPayPaymentRequestDiscount_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._ShopPayPaymentRequestDiscount_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestImageImplementors = []string{"ShopPayPaymentRequestImage"}

func (ec *executionContext) _ShopPayPaymentRequestImage(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestImageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestImage")
		case "alt":
			out.Values[i] = ec._ShopPayPaymentRequestImage_alt(ctx, field, obj)
		case "url":
			out.Values[i] = ec._ShopPayPaymentRequestImage_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestLineItemImplementors = []string{"ShopPayPaymentRequestLineItem"}

func (ec *executionContext) _ShopPayPaymentRequestLineItem(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestLineItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestLineItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestLineItem")
		case "finalItemPrice":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_finalItemPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "finalLinePrice":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_finalLinePrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_image(ctx, field, obj)
		case "itemDiscounts":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_itemDiscounts(ctx, field, obj)
		case "label":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lineDiscounts":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_lineDiscounts(ctx, field, obj)
		case "originalItemPrice":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_originalItemPrice(ctx, field, obj)
		case "originalLinePrice":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_originalLinePrice(ctx, field, obj)
		case "quantity":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiresShipping":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_requiresShipping(ctx, field, obj)
		case "sku":
			out.Values[i] = ec._ShopPayPaymentRequestLineItem_sku(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestReceiptImplementors = []string{"ShopPayPaymentRequestReceipt"}

func (ec *executionContext) _ShopPayPaymentRequestReceipt(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestReceipt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestReceiptImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestReceipt")
		case "paymentRequest":
			out.Values[i] = ec._ShopPayPaymentRequestReceipt_paymentRequest(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "processingStatusType":
			out.Values[i] = ec._ShopPayPaymentRequestReceipt_processingStatusType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "token":
			out.Values[i] = ec._ShopPayPaymentRequestReceipt_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestSessionImplementors = []string{"ShopPayPaymentRequestSession"}

func (ec *executionContext) _ShopPayPaymentRequestSession(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestSession) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestSessionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestSession")
		case "checkoutUrl":
			out.Values[i] = ec._ShopPayPaymentRequestSession_checkoutUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paymentRequest":
			out.Values[i] = ec._ShopPayPaymentRequestSession_paymentRequest(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceIdentifier":
			out.Values[i] = ec._ShopPayPaymentRequestSession_sourceIdentifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "token":
			out.Values[i] = ec._ShopPayPaymentRequestSession_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestSessionCreatePayloadImplementors = []string{"ShopPayPaymentRequestSessionCreatePayload"}

func (ec *executionContext) _ShopPayPaymentRequestSessionCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestSessionCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestSessionCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestSessionCreatePayload")
		case "shopPayPaymentRequestSession":
			out.Values[i] = ec._ShopPayPaymentRequestSessionCreatePayload_shopPayPaymentRequestSession(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._ShopPayPaymentRequestSessionCreatePayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestSessionSubmitPayloadImplementors = []string{"ShopPayPaymentRequestSessionSubmitPayload"}

func (ec *executionContext) _ShopPayPaymentRequestSessionSubmitPayload(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestSessionSubmitPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestSessionSubmitPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestSessionSubmitPayload")
		case "paymentRequestReceipt":
			out.Values[i] = ec._ShopPayPaymentRequestSessionSubmitPayload_paymentRequestReceipt(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._ShopPayPaymentRequestSessionSubmitPayload_userErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestShippingLineImplementors = []string{"ShopPayPaymentRequestShippingLine"}

func (ec *executionContext) _ShopPayPaymentRequestShippingLine(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestShippingLine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestShippingLineImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestShippingLine")
		case "amount":
			out.Values[i] = ec._ShopPayPaymentRequestShippingLine_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._ShopPayPaymentRequestShippingLine_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._ShopPayPaymentRequestShippingLine_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPayPaymentRequestTotalShippingPriceImplementors = []string{"ShopPayPaymentRequestTotalShippingPrice"}

func (ec *executionContext) _ShopPayPaymentRequestTotalShippingPrice(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPayPaymentRequestTotalShippingPrice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPayPaymentRequestTotalShippingPriceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPayPaymentRequestTotalShippingPrice")
		case "discounts":
			out.Values[i] = ec._ShopPayPaymentRequestTotalShippingPrice_discounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "finalTotal":
			out.Values[i] = ec._ShopPayPaymentRequestTotalShippingPrice_finalTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "originalTotal":
			out.Values[i] = ec._ShopPayPaymentRequestTotalShippingPrice_originalTotal(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPolicyImplementors = []string{"ShopPolicy", "MenuItemResource", "Node"}

func (ec *executionContext) _ShopPolicy(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPolicy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPolicyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPolicy")
		case "body":
			out.Values[i] = ec._ShopPolicy_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "handle":
			out.Values[i] = ec._ShopPolicy_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._ShopPolicy_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._ShopPolicy_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._ShopPolicy_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shopPolicyWithDefaultImplementors = []string{"ShopPolicyWithDefault"}

func (ec *executionContext) _ShopPolicyWithDefault(ctx context.Context, sel ast.SelectionSet, obj *model.ShopPolicyWithDefault) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopPolicyWithDefaultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopPolicyWithDefault")
		case "body":
			out.Values[i] = ec._ShopPolicyWithDefault_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "handle":
			out.Values[i] = ec._ShopPolicyWithDefault_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._ShopPolicyWithDefault_id(ctx, field, obj)
		case "title":
			out.Values[i] = ec._ShopPolicyWithDefault_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._ShopPolicyWithDefault_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sitemapImplementors = []string{"Sitemap"}

func (ec *executionContext) _Sitemap(ctx context.Context, sel ast.SelectionSet, obj *model.Sitemap) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sitemapImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Sitemap")
		case "pagesCount":
			out.Values[i] = ec._Sitemap_pagesCount(ctx, field, obj)
		case "resources":
			out.Values[i] = ec._Sitemap_resources(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sitemapImageImplementors = []string{"SitemapImage"}

func (ec *executionContext) _SitemapImage(ctx context.Context, sel ast.SelectionSet, obj *model.SitemapImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sitemapImageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SitemapImage")
		case "alt":
			out.Values[i] = ec._SitemapImage_alt(ctx, field, obj)
		case "filepath":
			out.Values[i] = ec._SitemapImage_filepath(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._SitemapImage_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sitemapResourceImplementors = []string{"SitemapResource", "SitemapResourceInterface"}

func (ec *executionContext) _SitemapResource(ctx context.Context, sel ast.SelectionSet, obj *model.SitemapResource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sitemapResourceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SitemapResource")
		case "handle":
			out.Values[i] = ec._SitemapResource_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image":
			out.Values[i] = ec._SitemapResource_image(ctx, field, obj)
		case "title":
			out.Values[i] = ec._SitemapResource_title(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._SitemapResource_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sitemapResourceMetaobjectImplementors = []string{"SitemapResourceMetaobject", "SitemapResourceInterface"}

func (ec *executionContext) _SitemapResourceMetaobject(ctx context.Context, sel ast.SelectionSet, obj *model.SitemapResourceMetaobject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sitemapResourceMetaobjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SitemapResourceMetaobject")
		case "handle":
			out.Values[i] = ec._SitemapResourceMetaobject_handle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "onlineStoreUrlHandle":
			out.Values[i] = ec._SitemapResourceMetaobject_onlineStoreUrlHandle(ctx, field, obj)
		case "type":
			out.Values[i] = ec._SitemapResourceMetaobject_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._SitemapResourceMetaobject_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var storeAvailabilityImplementors = []string{"StoreAvailability"}

func (ec *executionContext) _StoreAvailability(ctx context.Context, sel ast.SelectionSet, obj *model.StoreAvailability) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storeAvailabilityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StoreAvailability")
		case "available":
			out.Values[i] = ec._StoreAvailability_available(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "location":
			out.Values[i] = ec._StoreAvailability_location(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pickUpTime":
			out.Values[i] = ec._StoreAvailability_pickUpTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "quantityAvailable":
			out.Values[i] = ec._StoreAvailability_quantityAvailable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var storeAvailabilityConnectionImplementors = []string{"StoreAvailabilityConnection"}

func (ec *executionContext) _StoreAvailabilityConnection(ctx context.Context, sel ast.SelectionSet, obj *model.StoreAvailabilityConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storeAvailabilityConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StoreAvailabilityConnection")
		case "edges":
			out.Values[i] = ec._StoreAvailabilityConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._StoreAvailabilityConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._StoreAvailabilityConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var storeAvailabilityEdgeImplementors = []string{"StoreAvailabilityEdge"}

func (ec *executionContext) _StoreAvailabilityEdge(ctx context.Context, sel ast.SelectionSet, obj *model.StoreAvailabilityEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storeAvailabilityEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StoreAvailabilityEdge")
		case "cursor":
			out.Values[i] = ec._StoreAvailabilityEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._StoreAvailabilityEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stringConnectionImplementors = []string{"StringConnection"}

func (ec *executionContext) _StringConnection(ctx context.Context, sel ast.SelectionSet, obj *model.StringConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stringConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StringConnection")
		case "edges":
			out.Values[i] = ec._StringConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._StringConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._StringConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stringEdgeImplementors = []string{"StringEdge"}

func (ec *executionContext) _StringEdge(ctx context.Context, sel ast.SelectionSet, obj *model.StringEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stringEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StringEdge")
		case "cursor":
			out.Values[i] = ec._StringEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._StringEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var submissionErrorImplementors = []string{"SubmissionError"}

func (ec *executionContext) _SubmissionError(ctx context.Context, sel ast.SelectionSet, obj *model.SubmissionError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, submissionErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubmissionError")
		case "code":
			out.Values[i] = ec._SubmissionError_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._SubmissionError_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var submitAlreadyAcceptedImplementors = []string{"SubmitAlreadyAccepted", "CartSubmitForCompletionResult"}

func (ec *executionContext) _SubmitAlreadyAccepted(ctx context.Context, sel ast.SelectionSet, obj *model.SubmitAlreadyAccepted) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, submitAlreadyAcceptedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubmitAlreadyAccepted")
		case "attemptId":
			out.Values[i] = ec._SubmitAlreadyAccepted_attemptId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var submitFailedImplementors = []string{"SubmitFailed", "CartSubmitForCompletionResult"}

func (ec *executionContext) _SubmitFailed(ctx context.Context, sel ast.SelectionSet, obj *model.SubmitFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, submitFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubmitFailed")
		case "checkoutUrl":
			out.Values[i] = ec._SubmitFailed_checkoutUrl(ctx, field, obj)
		case "errors":
			out.Values[i] = ec._SubmitFailed_errors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var submitSuccessImplementors = []string{"SubmitSuccess", "CartSubmitForCompletionResult"}

func (ec *executionContext) _SubmitSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.SubmitSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, submitSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubmitSuccess")
		case "attemptId":
			out.Values[i] = ec._SubmitSuccess_attemptId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "redirectUrl":
			out.Values[i] = ec._SubmitSuccess_redirectUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var submitThrottledImplementors = []string{"SubmitThrottled", "CartSubmitForCompletionResult"}

func (ec *executionContext) _SubmitThrottled(ctx context.Context, sel ast.SelectionSet, obj *model.SubmitThrottled) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, submitThrottledImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubmitThrottled")
		case "pollAfter":
			out.Values[i] = ec._SubmitThrottled_pollAfter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var swatchImplementors = []string{"Swatch"}

func (ec *executionContext) _Swatch(ctx context.Context, sel ast.SelectionSet, obj *model.Swatch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, swatchImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Swatch")
		case "color":
			out.Values[i] = ec._Swatch_color(ctx, field, obj)
		case "image":
			out.Values[i] = ec._Swatch_image(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taxonomyCategoryImplementors = []string{"TaxonomyCategory", "Node"}

func (ec *executionContext) _TaxonomyCategory(ctx context.Context, sel ast.SelectionSet, obj *model.TaxonomyCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taxonomyCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaxonomyCategory")
		case "ancestors":
			out.Values[i] = ec._TaxonomyCategory_ancestors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "id":
			out.Values[i] = ec._TaxonomyCategory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._TaxonomyCategory_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionImplementors = []string{"Transaction"}

func (ec *executionContext) _Transaction(ctx context.Context, sel ast.SelectionSet, obj *model.Transaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Transaction")
		case "amount":
			out.Values[i] = ec._Transaction_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amountV2":
			out.Values[i] = ec._Transaction_amountV2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kind":
			out.Values[i] = ec._Transaction_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Transaction_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "statusV2":
			out.Values[i] = ec._Transaction_statusV2(ctx, field, obj)
		case "test":
			out.Values[i] = ec._Transaction_test(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var unitPriceMeasurementImplementors = []string{"UnitPriceMeasurement"}

func (ec *executionContext) _UnitPriceMeasurement(ctx context.Context, sel ast.SelectionSet, obj *model.UnitPriceMeasurement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, unitPriceMeasurementImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UnitPriceMeasurement")
		case "measuredType":
			out.Values[i] = ec._UnitPriceMeasurement_measuredType(ctx, field, obj)
		case "quantityUnit":
			out.Values[i] = ec._UnitPriceMeasurement_quantityUnit(ctx, field, obj)
		case "quantityValue":
			out.Values[i] = ec._UnitPriceMeasurement_quantityValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "referenceUnit":
			out.Values[i] = ec._UnitPriceMeasurement_referenceUnit(ctx, field, obj)
		case "referenceValue":
			out.Values[i] = ec._UnitPriceMeasurement_referenceValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var urlRedirectImplementors = []string{"UrlRedirect", "Node"}

func (ec *executionContext) _UrlRedirect(ctx context.Context, sel ast.SelectionSet, obj *model.URLRedirect) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, urlRedirectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UrlRedirect")
		case "id":
			out.Values[i] = ec._UrlRedirect_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "path":
			out.Values[i] = ec._UrlRedirect_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "target":
			out.Values[i] = ec._UrlRedirect_target(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var urlRedirectConnectionImplementors = []string{"UrlRedirectConnection"}

func (ec *executionContext) _UrlRedirectConnection(ctx context.Context, sel ast.SelectionSet, obj *model.URLRedirectConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, urlRedirectConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UrlRedirectConnection")
		case "edges":
			out.Values[i] = ec._UrlRedirectConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._UrlRedirectConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._UrlRedirectConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var urlRedirectEdgeImplementors = []string{"UrlRedirectEdge"}

func (ec *executionContext) _UrlRedirectEdge(ctx context.Context, sel ast.SelectionSet, obj *model.URLRedirectEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, urlRedirectEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UrlRedirectEdge")
		case "cursor":
			out.Values[i] = ec._UrlRedirectEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._UrlRedirectEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userErrorImplementors = []string{"UserError", "DisplayableError"}

func (ec *executionContext) _UserError(ctx context.Context, sel ast.SelectionSet, obj *model.UserError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserError")
		case "field":
			out.Values[i] = ec._UserError_field(ctx, field, obj)
		case "message":
			out.Values[i] = ec._UserError_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userErrorsShopPayPaymentRequestSessionUserErrorsImplementors = []string{"UserErrorsShopPayPaymentRequestSessionUserErrors", "DisplayableError"}

func (ec *executionContext) _UserErrorsShopPayPaymentRequestSessionUserErrors(ctx context.Context, sel ast.SelectionSet, obj *model.UserErrorsShopPayPaymentRequestSessionUserErrors) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userErrorsShopPayPaymentRequestSessionUserErrorsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserErrorsShopPayPaymentRequestSessionUserErrors")
		case "code":
			out.Values[i] = ec._UserErrorsShopPayPaymentRequestSessionUserErrors_code(ctx, field, obj)
		case "field":
			out.Values[i] = ec._UserErrorsShopPayPaymentRequestSessionUserErrors_field(ctx, field, obj)
		case "message":
			out.Values[i] = ec._UserErrorsShopPayPaymentRequestSessionUserErrors_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var videoImplementors = []string{"Video", "MetafieldReference", "Media", "Node"}

func (ec *executionContext) _Video(ctx context.Context, sel ast.SelectionSet, obj *model.Video) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Video")
		case "alt":
			out.Values[i] = ec._Video_alt(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Video_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mediaContentType":
			out.Values[i] = ec._Video_mediaContentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "presentation":
			out.Values[i] = ec._Video_presentation(ctx, field, obj)
		case "previewImage":
			out.Values[i] = ec._Video_previewImage(ctx, field, obj)
		case "sources":
			out.Values[i] = ec._Video_sources(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var videoSourceImplementors = []string{"VideoSource"}

func (ec *executionContext) _VideoSource(ctx context.Context, sel ast.SelectionSet, obj *model.VideoSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoSourceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoSource")
		case "format":
			out.Values[i] = ec._VideoSource_format(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "height":
			out.Values[i] = ec._VideoSource_height(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mimeType":
			out.Values[i] = ec._VideoSource_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._VideoSource_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "width":
			out.Values[i] = ec._VideoSource_width(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNApiVersion2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAPIVersionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.APIVersion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNApiVersion2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAPIVersion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNApiVersion2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAPIVersion(ctx context.Context, sel ast.SelectionSet, v *model.APIVersion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiVersion(ctx, sel, v)
}

func (ec *executionContext) unmarshalNApplePayWalletHeaderInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐApplePayWalletHeaderInput(ctx context.Context, v any) (*model.ApplePayWalletHeaderInput, error) {
	res, err := ec.unmarshalInputApplePayWalletHeaderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAppliedGiftCard2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAppliedGiftCardᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AppliedGiftCard) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAppliedGiftCard2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAppliedGiftCard(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAppliedGiftCard2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAppliedGiftCard(ctx context.Context, sel ast.SelectionSet, v *model.AppliedGiftCard) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AppliedGiftCard(ctx, sel, v)
}

func (ec *executionContext) marshalNArticle2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Article) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArticle2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticle(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNArticle2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticle(ctx context.Context, sel ast.SelectionSet, v *model.Article) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Article(ctx, sel, v)
}

func (ec *executionContext) marshalNArticleAuthor2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleAuthorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ArticleAuthor) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArticleAuthor2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleAuthor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNArticleAuthor2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleAuthor(ctx context.Context, sel ast.SelectionSet, v *model.ArticleAuthor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArticleAuthor(ctx, sel, v)
}

func (ec *executionContext) marshalNArticleConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleConnection(ctx context.Context, sel ast.SelectionSet, v *model.ArticleConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArticleConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNArticleEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ArticleEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArticleEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNArticleEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleEdge(ctx context.Context, sel ast.SelectionSet, v *model.ArticleEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArticleEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNAttribute2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Attribute) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAttribute2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAttribute2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttribute(ctx context.Context, sel ast.SelectionSet, v *model.Attribute) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Attribute(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAttributeInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInputᚄ(ctx context.Context, v any) ([]*model.AttributeInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.AttributeInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAttributeInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAttributeInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInput(ctx context.Context, v any) (*model.AttributeInput, error) {
	res, err := ec.unmarshalInputAttributeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBaseCartLine2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLine(ctx context.Context, sel ast.SelectionSet, v model.BaseCartLine) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BaseCartLine(ctx, sel, v)
}

func (ec *executionContext) marshalNBaseCartLine2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLineᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BaseCartLine) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBaseCartLine2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLine(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBaseCartLineConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLineConnection(ctx context.Context, sel ast.SelectionSet, v *model.BaseCartLineConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BaseCartLineConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNBaseCartLineEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLineEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.BaseCartLineEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBaseCartLineEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLineEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBaseCartLineEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBaseCartLineEdge(ctx context.Context, sel ast.SelectionSet, v *model.BaseCartLineEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BaseCartLineEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNBlog2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Blog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBlog2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBlog2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlog(ctx context.Context, sel ast.SelectionSet, v *model.Blog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Blog(ctx, sel, v)
}

func (ec *executionContext) marshalNBlogConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogConnection(ctx context.Context, sel ast.SelectionSet, v *model.BlogConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BlogConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNBlogEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.BlogEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBlogEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBlogEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogEdge(ctx context.Context, sel ast.SelectionSet, v *model.BlogEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BlogEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNBrandColorGroup2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBrandColorGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.BrandColorGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBrandColorGroup2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBrandColorGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBrandColorGroup2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBrandColorGroup(ctx context.Context, sel ast.SelectionSet, v *model.BrandColorGroup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BrandColorGroup(ctx, sel, v)
}

func (ec *executionContext) marshalNBrandColors2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBrandColors(ctx context.Context, sel ast.SelectionSet, v *model.BrandColors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BrandColors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCardBrand2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCardBrand(ctx context.Context, v any) (model.CardBrand, error) {
	var res model.CardBrand
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCardBrand2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCardBrand(ctx context.Context, sel ast.SelectionSet, v model.CardBrand) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCardBrand2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCardBrandᚄ(ctx context.Context, v any) ([]model.CardBrand, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.CardBrand, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCardBrand2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCardBrand(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNCardBrand2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCardBrandᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CardBrand) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCardBrand2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCardBrand(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartAddress2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartAddress(ctx context.Context, sel ast.SelectionSet, v model.CartAddress) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartAddress(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCartAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartAddressInput(ctx context.Context, v any) (*model.CartAddressInput, error) {
	res, err := ec.unmarshalInputCartAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCartBuyerIdentity2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartBuyerIdentity(ctx context.Context, sel ast.SelectionSet, v *model.CartBuyerIdentity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartBuyerIdentity(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCartBuyerIdentityInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartBuyerIdentityInput(ctx context.Context, v any) (model.CartBuyerIdentityInput, error) {
	res, err := ec.unmarshalInputCartBuyerIdentityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCartCost2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCost(ctx context.Context, sel ast.SelectionSet, v *model.CartCost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartCost(ctx, sel, v)
}

func (ec *executionContext) marshalNCartDelivery2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDelivery(ctx context.Context, sel ast.SelectionSet, v *model.CartDelivery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartDelivery(ctx, sel, v)
}

func (ec *executionContext) marshalNCartDeliveryGroup2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CartDeliveryGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartDeliveryGroup2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartDeliveryGroup2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroup(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryGroup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartDeliveryGroup(ctx, sel, v)
}

func (ec *executionContext) marshalNCartDeliveryGroupConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupConnection(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryGroupConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartDeliveryGroupConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCartDeliveryGroupEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CartDeliveryGroupEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartDeliveryGroupEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartDeliveryGroupEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupEdge(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryGroupEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartDeliveryGroupEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCartDeliveryGroupType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupType(ctx context.Context, v any) (model.CartDeliveryGroupType, error) {
	var res model.CartDeliveryGroupType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCartDeliveryGroupType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryGroupType(ctx context.Context, sel ast.SelectionSet, v model.CartDeliveryGroupType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCartDeliveryOption2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CartDeliveryOption) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartDeliveryOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartDeliveryOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryOption(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryOption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartDeliveryOption(ctx, sel, v)
}

func (ec *executionContext) marshalNCartDiscountAllocation2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountAllocation(ctx context.Context, sel ast.SelectionSet, v model.CartDiscountAllocation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartDiscountAllocation(ctx, sel, v)
}

func (ec *executionContext) marshalNCartDiscountAllocation2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountAllocationᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CartDiscountAllocation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartDiscountAllocation2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountAllocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartDiscountApplication2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountApplication(ctx context.Context, sel ast.SelectionSet, v *model.CartDiscountApplication) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartDiscountApplication(ctx, sel, v)
}

func (ec *executionContext) marshalNCartDiscountCode2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountCodeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CartDiscountCode) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartDiscountCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountCode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartDiscountCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountCode(ctx context.Context, sel ast.SelectionSet, v *model.CartDiscountCode) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartDiscountCode(ctx, sel, v)
}

func (ec *executionContext) marshalNCartEstimatedCost2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartEstimatedCost(ctx context.Context, sel ast.SelectionSet, v *model.CartEstimatedCost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartEstimatedCost(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCartInputMetafieldInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartInputMetafieldInput(ctx context.Context, v any) (*model.CartInputMetafieldInput, error) {
	res, err := ec.unmarshalInputCartInputMetafieldInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCartLine2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CartLine) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartLine2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLine(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartLine2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLine(ctx context.Context, sel ast.SelectionSet, v *model.CartLine) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartLine(ctx, sel, v)
}

func (ec *executionContext) marshalNCartLineCost2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineCost(ctx context.Context, sel ast.SelectionSet, v *model.CartLineCost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartLineCost(ctx, sel, v)
}

func (ec *executionContext) marshalNCartLineEstimatedCost2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineEstimatedCost(ctx context.Context, sel ast.SelectionSet, v *model.CartLineEstimatedCost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartLineEstimatedCost(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCartLineInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineInputᚄ(ctx context.Context, v any) ([]*model.CartLineInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CartLineInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCartLineInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCartLineInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineInput(ctx context.Context, v any) (*model.CartLineInput, error) {
	res, err := ec.unmarshalInputCartLineInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCartLineUpdateInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineUpdateInputᚄ(ctx context.Context, v any) ([]*model.CartLineUpdateInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CartLineUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCartLineUpdateInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCartLineUpdateInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineUpdateInput(ctx context.Context, v any) (*model.CartLineUpdateInput, error) {
	res, err := ec.unmarshalInputCartLineUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCartMetafieldDeleteInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartMetafieldDeleteInput(ctx context.Context, v any) (model.CartMetafieldDeleteInput, error) {
	res, err := ec.unmarshalInputCartMetafieldDeleteInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCartMetafieldsSetInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartMetafieldsSetInputᚄ(ctx context.Context, v any) ([]*model.CartMetafieldsSetInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CartMetafieldsSetInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCartMetafieldsSetInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartMetafieldsSetInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCartMetafieldsSetInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartMetafieldsSetInput(ctx context.Context, v any) (*model.CartMetafieldsSetInput, error) {
	res, err := ec.unmarshalInputCartMetafieldsSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCartOperationError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartOperationErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CartOperationError) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartOperationError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartOperationError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartOperationError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartOperationError(ctx context.Context, sel ast.SelectionSet, v *model.CartOperationError) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartOperationError(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCartPaymentInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPaymentInput(ctx context.Context, v any) (model.CartPaymentInput, error) {
	res, err := ec.unmarshalInputCartPaymentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCartSelectableAddress2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CartSelectableAddress) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartSelectableAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartSelectableAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddress(ctx context.Context, sel ast.SelectionSet, v *model.CartSelectableAddress) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartSelectableAddress(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCartSelectableAddressInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressInputᚄ(ctx context.Context, v any) ([]*model.CartSelectableAddressInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CartSelectableAddressInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCartSelectableAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCartSelectableAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressInput(ctx context.Context, v any) (*model.CartSelectableAddressInput, error) {
	res, err := ec.unmarshalInputCartSelectableAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCartSelectableAddressUpdateInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressUpdateInputᚄ(ctx context.Context, v any) ([]*model.CartSelectableAddressUpdateInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CartSelectableAddressUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCartSelectableAddressUpdateInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCartSelectableAddressUpdateInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressUpdateInput(ctx context.Context, v any) (*model.CartSelectableAddressUpdateInput, error) {
	res, err := ec.unmarshalInputCartSelectableAddressUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCartSelectedDeliveryOptionInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectedDeliveryOptionInputᚄ(ctx context.Context, v any) ([]*model.CartSelectedDeliveryOptionInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CartSelectedDeliveryOptionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCartSelectedDeliveryOptionInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectedDeliveryOptionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCartSelectedDeliveryOptionInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectedDeliveryOptionInput(ctx context.Context, v any) (*model.CartSelectedDeliveryOptionInput, error) {
	res, err := ec.unmarshalInputCartSelectedDeliveryOptionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCartUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CartUserError) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartUserError(ctx context.Context, sel ast.SelectionSet, v *model.CartUserError) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartUserError(ctx, sel, v)
}

func (ec *executionContext) marshalNCartWarning2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CartWarning) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartWarning2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarning(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartWarning2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarning(ctx context.Context, sel ast.SelectionSet, v *model.CartWarning) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartWarning(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCartWarningCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningCode(ctx context.Context, v any) (model.CartWarningCode, error) {
	var res model.CartWarningCode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCartWarningCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWarningCode(ctx context.Context, sel ast.SelectionSet, v model.CartWarningCode) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx context.Context, sel ast.SelectionSet, v *model.Checkout) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Checkout(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCheckoutAttributesUpdateV2Input2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutAttributesUpdateV2Input(ctx context.Context, v any) (model.CheckoutAttributesUpdateV2Input, error) {
	res, err := ec.unmarshalInputCheckoutAttributesUpdateV2Input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCheckoutBuyerIdentity2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutBuyerIdentity(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutBuyerIdentity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CheckoutBuyerIdentity(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCheckoutCreateInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCreateInput(ctx context.Context, v any) (model.CheckoutCreateInput, error) {
	res, err := ec.unmarshalInputCheckoutCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCheckoutLineItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CheckoutLineItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCheckoutLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCheckoutLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItem(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutLineItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CheckoutLineItem(ctx, sel, v)
}

func (ec *executionContext) marshalNCheckoutLineItemConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemConnection(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutLineItemConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CheckoutLineItemConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCheckoutLineItemEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CheckoutLineItemEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCheckoutLineItemEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCheckoutLineItemEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemEdge(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutLineItemEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CheckoutLineItemEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCheckoutLineItemInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemInputᚄ(ctx context.Context, v any) ([]*model.CheckoutLineItemInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CheckoutLineItemInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCheckoutLineItemInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCheckoutLineItemInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemInput(ctx context.Context, v any) (*model.CheckoutLineItemInput, error) {
	res, err := ec.unmarshalInputCheckoutLineItemInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCheckoutLineItemUpdateInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemUpdateInputᚄ(ctx context.Context, v any) ([]*model.CheckoutLineItemUpdateInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CheckoutLineItemUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCheckoutLineItemUpdateInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCheckoutLineItemUpdateInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemUpdateInput(ctx context.Context, v any) (*model.CheckoutLineItemUpdateInput, error) {
	res, err := ec.unmarshalInputCheckoutLineItemUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCheckoutUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CheckoutUserError) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCheckoutUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCheckoutUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutUserError(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutUserError) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CheckoutUserError(ctx, sel, v)
}

func (ec *executionContext) marshalNCollection2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Collection) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCollection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCollection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollection(ctx context.Context, sel ast.SelectionSet, v *model.Collection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Collection(ctx, sel, v)
}

func (ec *executionContext) marshalNCollectionConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *model.CollectionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CollectionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCollectionEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CollectionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCollectionEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCollectionEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionEdge(ctx context.Context, sel ast.SelectionSet, v *model.CollectionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CollectionEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNComment2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Comment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v *model.Comment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentAuthor2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCommentAuthor(ctx context.Context, sel ast.SelectionSet, v *model.CommentAuthor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CommentAuthor(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCommentConnection(ctx context.Context, sel ast.SelectionSet, v *model.CommentConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CommentConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCommentEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CommentEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommentEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCommentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommentEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCommentEdge(ctx context.Context, sel ast.SelectionSet, v *model.CommentEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CommentEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNCompany2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompany(ctx context.Context, sel ast.SelectionSet, v *model.Company) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanyLocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompanyLocation(ctx context.Context, sel ast.SelectionSet, v *model.CompanyLocation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CompanyLocation(ctx, sel, v)
}

func (ec *executionContext) marshalNCompletionError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompletionErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CompletionError) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompletionError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompletionError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCompletionError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompletionError(ctx context.Context, sel ast.SelectionSet, v *model.CompletionError) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CompletionError(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompletionErrorCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompletionErrorCode(ctx context.Context, v any) (model.CompletionErrorCode, error) {
	var res model.CompletionErrorCode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompletionErrorCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompletionErrorCode(ctx context.Context, sel ast.SelectionSet, v model.CompletionErrorCode) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCountPrecision2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountPrecision(ctx context.Context, v any) (model.CountPrecision, error) {
	var res model.CountPrecision
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCountPrecision2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountPrecision(ctx context.Context, sel ast.SelectionSet, v model.CountPrecision) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCountry2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Country) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCountry2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCountry2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountry(ctx context.Context, sel ast.SelectionSet, v *model.Country) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Country(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCountryCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx context.Context, v any) (model.CountryCode, error) {
	var res model.CountryCode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCountryCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx context.Context, sel ast.SelectionSet, v model.CountryCode) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCountryCode2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCodeᚄ(ctx context.Context, v any) ([]model.CountryCode, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.CountryCode, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCountryCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNCountryCode2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCodeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CountryCode) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCountryCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNCreditCardPaymentInputV22githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCreditCardPaymentInputV2(ctx context.Context, v any) (model.CreditCardPaymentInputV2, error) {
	res, err := ec.unmarshalInputCreditCardPaymentInputV2(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCurrency2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrency(ctx context.Context, sel ast.SelectionSet, v *model.Currency) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Currency(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx context.Context, v any) (model.CurrencyCode, error) {
	var res model.CurrencyCode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx context.Context, sel ast.SelectionSet, v model.CurrencyCode) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCurrencyCode2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCodeᚄ(ctx context.Context, v any) ([]model.CurrencyCode, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.CurrencyCode, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNCurrencyCode2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCodeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CurrencyCode) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCurrencyCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCurrencyCode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNCustomerAccessTokenCreateInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessTokenCreateInput(ctx context.Context, v any) (model.CustomerAccessTokenCreateInput, error) {
	res, err := ec.unmarshalInputCustomerAccessTokenCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomerActivateInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerActivateInput(ctx context.Context, v any) (model.CustomerActivateInput, error) {
	res, err := ec.unmarshalInputCustomerActivateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomerCreateInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerCreateInput(ctx context.Context, v any) (model.CustomerCreateInput, error) {
	res, err := ec.unmarshalInputCustomerCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomerResetInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerResetInput(ctx context.Context, v any) (model.CustomerResetInput, error) {
	res, err := ec.unmarshalInputCustomerResetInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomerUpdateInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUpdateInput(ctx context.Context, v any) (model.CustomerUpdateInput, error) {
	res, err := ec.unmarshalInputCustomerUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCustomerUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CustomerUserError) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomerUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCustomerUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUserError(ctx context.Context, sel ast.SelectionSet, v *model.CustomerUserError) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomerUserError(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDateTime2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDecimal2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDecimal2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNDeliveryAddress2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryAddress(ctx context.Context, sel ast.SelectionSet, v model.DeliveryAddress) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeliveryAddress(ctx, sel, v)
}

func (ec *executionContext) marshalNDeliveryAddress2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryAddressᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DeliveryAddress) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeliveryAddress2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryMethodType(ctx context.Context, v any) (model.DeliveryMethodType, error) {
	var res model.DeliveryMethodType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryMethodType(ctx context.Context, sel ast.SelectionSet, v model.DeliveryMethodType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDigitalWallet2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDigitalWallet(ctx context.Context, v any) (model.DigitalWallet, error) {
	var res model.DigitalWallet
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDigitalWallet2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDigitalWallet(ctx context.Context, sel ast.SelectionSet, v model.DigitalWallet) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDigitalWallet2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDigitalWalletᚄ(ctx context.Context, v any) ([]model.DigitalWallet, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.DigitalWallet, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDigitalWallet2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDigitalWallet(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNDigitalWallet2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDigitalWalletᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DigitalWallet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDigitalWallet2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDigitalWallet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDiscountAllocation2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountAllocationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DiscountAllocation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDiscountAllocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountAllocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDiscountAllocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountAllocation(ctx context.Context, sel ast.SelectionSet, v *model.DiscountAllocation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DiscountAllocation(ctx, sel, v)
}

func (ec *executionContext) marshalNDiscountApplication2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplication(ctx context.Context, sel ast.SelectionSet, v model.DiscountApplication) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DiscountApplication(ctx, sel, v)
}

func (ec *executionContext) marshalNDiscountApplication2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DiscountApplication) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDiscountApplication2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplication(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNDiscountApplicationAllocationMethod2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationAllocationMethod(ctx context.Context, v any) (model.DiscountApplicationAllocationMethod, error) {
	var res model.DiscountApplicationAllocationMethod
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDiscountApplicationAllocationMethod2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationAllocationMethod(ctx context.Context, sel ast.SelectionSet, v model.DiscountApplicationAllocationMethod) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDiscountApplicationConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationConnection(ctx context.Context, sel ast.SelectionSet, v *model.DiscountApplicationConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DiscountApplicationConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNDiscountApplicationEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DiscountApplicationEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDiscountApplicationEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDiscountApplicationEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationEdge(ctx context.Context, sel ast.SelectionSet, v *model.DiscountApplicationEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DiscountApplicationEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDiscountApplicationTargetSelection2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetSelection(ctx context.Context, v any) (model.DiscountApplicationTargetSelection, error) {
	var res model.DiscountApplicationTargetSelection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDiscountApplicationTargetSelection2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetSelection(ctx context.Context, sel ast.SelectionSet, v model.DiscountApplicationTargetSelection) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDiscountApplicationTargetType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetType(ctx context.Context, v any) (model.DiscountApplicationTargetType, error) {
	var res model.DiscountApplicationTargetType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDiscountApplicationTargetType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDiscountApplicationTargetType(ctx context.Context, sel ast.SelectionSet, v model.DiscountApplicationTargetType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDomain2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDomain(ctx context.Context, sel ast.SelectionSet, v *model.Domain) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Domain(ctx, sel, v)
}

func (ec *executionContext) marshalNFilter2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Filter) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilter(ctx context.Context, sel ast.SelectionSet, v *model.Filter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Filter(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFilterType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterType(ctx context.Context, v any) (model.FilterType, error) {
	var res model.FilterType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFilterType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterType(ctx context.Context, sel ast.SelectionSet, v model.FilterType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFilterValue2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterValueᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FilterValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFilterValue2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFilterValue2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterValue(ctx context.Context, sel ast.SelectionSet, v *model.FilterValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FilterValue(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNFulfillment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillment(ctx context.Context, sel ast.SelectionSet, v *model.Fulfillment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Fulfillment(ctx, sel, v)
}

func (ec *executionContext) marshalNFulfillmentLineItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FulfillmentLineItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFulfillmentLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFulfillmentLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItem(ctx context.Context, sel ast.SelectionSet, v *model.FulfillmentLineItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FulfillmentLineItem(ctx, sel, v)
}

func (ec *executionContext) marshalNFulfillmentLineItemConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItemConnection(ctx context.Context, sel ast.SelectionSet, v *model.FulfillmentLineItemConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FulfillmentLineItemConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFulfillmentLineItemEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItemEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FulfillmentLineItemEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFulfillmentLineItemEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItemEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFulfillmentLineItemEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentLineItemEdge(ctx context.Context, sel ast.SelectionSet, v *model.FulfillmentLineItemEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FulfillmentLineItemEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNFulfillmentTrackingInfo2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentTrackingInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FulfillmentTrackingInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFulfillmentTrackingInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentTrackingInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFulfillmentTrackingInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentTrackingInfo(ctx context.Context, sel ast.SelectionSet, v *model.FulfillmentTrackingInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FulfillmentTrackingInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHTML2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHTML2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNHasMetafieldsIdentifier2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifierᚄ(ctx context.Context, v any) ([]*model.HasMetafieldsIdentifier, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.HasMetafieldsIdentifier, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNHasMetafieldsIdentifier2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifier(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNHasMetafieldsIdentifier2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐHasMetafieldsIdentifier(ctx context.Context, v any) (*model.HasMetafieldsIdentifier, error) {
	res, err := ec.unmarshalInputHasMetafieldsIdentifier(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNImage2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Image) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx context.Context, sel ast.SelectionSet, v *model.Image) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) marshalNImageConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageConnection(ctx context.Context, sel ast.SelectionSet, v *model.ImageConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ImageConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNImageEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ImageEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNImageEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNImageEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageEdge(ctx context.Context, sel ast.SelectionSet, v *model.ImageEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ImageEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNInContextAnnotationType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐInContextAnnotationType(ctx context.Context, sel ast.SelectionSet, v *model.InContextAnnotationType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InContextAnnotationType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int32(ctx context.Context, v any) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJSON2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJSON2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLanguage2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguageᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Language) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLanguage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLanguage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguage(ctx context.Context, sel ast.SelectionSet, v *model.Language) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Language(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLanguageCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguageCode(ctx context.Context, v any) (model.LanguageCode, error) {
	var res model.LanguageCode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLanguageCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguageCode(ctx context.Context, sel ast.SelectionSet, v model.LanguageCode) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNLocalization2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocalization(ctx context.Context, sel ast.SelectionSet, v *model.Localization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Localization(ctx, sel, v)
}

func (ec *executionContext) marshalNLocation2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Location) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocation(ctx context.Context, sel ast.SelectionSet, v *model.Location) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) marshalNLocationAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationAddress(ctx context.Context, sel ast.SelectionSet, v *model.LocationAddress) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LocationAddress(ctx, sel, v)
}

func (ec *executionContext) marshalNLocationConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationConnection(ctx context.Context, sel ast.SelectionSet, v *model.LocationConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LocationConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNLocationEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.LocationEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLocationEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLocationEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationEdge(ctx context.Context, sel ast.SelectionSet, v *model.LocationEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LocationEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNMailingAddress2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MailingAddress) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx context.Context, sel ast.SelectionSet, v *model.MailingAddress) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MailingAddress(ctx, sel, v)
}

func (ec *executionContext) marshalNMailingAddressConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressConnection(ctx context.Context, sel ast.SelectionSet, v *model.MailingAddressConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MailingAddressConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNMailingAddressEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MailingAddressEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMailingAddressEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMailingAddressEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressEdge(ctx context.Context, sel ast.SelectionSet, v *model.MailingAddressEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MailingAddressEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMailingAddressInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx context.Context, v any) (model.MailingAddressInput, error) {
	res, err := ec.unmarshalInputMailingAddressInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx context.Context, v any) (*model.MailingAddressInput, error) {
	res, err := ec.unmarshalInputMailingAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMarket2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMarket(ctx context.Context, sel ast.SelectionSet, v *model.Market) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Market(ctx, sel, v)
}

func (ec *executionContext) marshalNMedia2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMedia(ctx context.Context, sel ast.SelectionSet, v model.Media) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Media(ctx, sel, v)
}

func (ec *executionContext) marshalNMedia2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Media) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMedia2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMediaConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaConnection(ctx context.Context, sel ast.SelectionSet, v *model.MediaConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MediaConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMediaContentType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaContentType(ctx context.Context, v any) (model.MediaContentType, error) {
	var res model.MediaContentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMediaContentType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaContentType(ctx context.Context, sel ast.SelectionSet, v model.MediaContentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMediaEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MediaEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMediaEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMediaEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaEdge(ctx context.Context, sel ast.SelectionSet, v *model.MediaEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MediaEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMediaHost2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaHost(ctx context.Context, v any) (model.MediaHost, error) {
	var res model.MediaHost
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMediaHost2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaHost(ctx context.Context, sel ast.SelectionSet, v model.MediaHost) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMediaPresentationFormat2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaPresentationFormat(ctx context.Context, v any) (model.MediaPresentationFormat, error) {
	var res model.MediaPresentationFormat
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMediaPresentationFormat2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaPresentationFormat(ctx context.Context, sel ast.SelectionSet, v model.MediaPresentationFormat) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMenuItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenuItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MenuItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMenuItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenuItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMenuItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenuItem(ctx context.Context, sel ast.SelectionSet, v *model.MenuItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MenuItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMenuItemType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenuItemType(ctx context.Context, v any) (model.MenuItemType, error) {
	var res model.MenuItemType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMenuItemType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenuItemType(ctx context.Context, sel ast.SelectionSet, v model.MenuItemType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMerchandise2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMerchandise(ctx context.Context, sel ast.SelectionSet, v model.Merchandise) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Merchandise(ctx, sel, v)
}

func (ec *executionContext) marshalNMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx context.Context, sel ast.SelectionSet, v []*model.Metafield) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx context.Context, sel ast.SelectionSet, v *model.Metafield) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Metafield(ctx, sel, v)
}

func (ec *executionContext) marshalNMetafieldDeleteUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldDeleteUserErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MetafieldDeleteUserError) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetafieldDeleteUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldDeleteUserError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMetafieldDeleteUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldDeleteUserError(ctx context.Context, sel ast.SelectionSet, v *model.MetafieldDeleteUserError) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetafieldDeleteUserError(ctx, sel, v)
}

func (ec *executionContext) marshalNMetafieldParentResource2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldParentResource(ctx context.Context, sel ast.SelectionSet, v model.MetafieldParentResource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetafieldParentResource(ctx, sel, v)
}

func (ec *executionContext) marshalNMetafieldReference2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReference(ctx context.Context, sel ast.SelectionSet, v model.MetafieldReference) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetafieldReference(ctx, sel, v)
}

func (ec *executionContext) marshalNMetafieldReference2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReferenceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MetafieldReference) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetafieldReference2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReference(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMetafieldReferenceEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReferenceEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MetafieldReferenceEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetafieldReferenceEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReferenceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMetafieldReferenceEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReferenceEdge(ctx context.Context, sel ast.SelectionSet, v *model.MetafieldReferenceEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetafieldReferenceEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNMetafieldsSetUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldsSetUserErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MetafieldsSetUserError) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetafieldsSetUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldsSetUserError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMetafieldsSetUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldsSetUserError(ctx context.Context, sel ast.SelectionSet, v *model.MetafieldsSetUserError) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetafieldsSetUserError(ctx, sel, v)
}

func (ec *executionContext) marshalNMetaobject2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Metaobject) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetaobject2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMetaobject2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobject(ctx context.Context, sel ast.SelectionSet, v *model.Metaobject) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Metaobject(ctx, sel, v)
}

func (ec *executionContext) marshalNMetaobjectConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectConnection(ctx context.Context, sel ast.SelectionSet, v *model.MetaobjectConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetaobjectConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNMetaobjectEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MetaobjectEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetaobjectEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMetaobjectEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectEdge(ctx context.Context, sel ast.SelectionSet, v *model.MetaobjectEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetaobjectEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNMetaobjectField2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MetaobjectField) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetaobjectField2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMetaobjectField2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectField(ctx context.Context, sel ast.SelectionSet, v *model.MetaobjectField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetaobjectField(ctx, sel, v)
}

func (ec *executionContext) marshalNModel3dSource2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐModel3dSourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Model3dSource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModel3dSource2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐModel3dSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModel3dSource2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐModel3dSource(ctx context.Context, sel ast.SelectionSet, v *model.Model3dSource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Model3dSource(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx context.Context, v any) (*model.MoneyInput, error) {
	res, err := ec.unmarshalInputMoneyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx context.Context, sel ast.SelectionSet, v *model.MoneyV2) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MoneyV2(ctx, sel, v)
}

func (ec *executionContext) marshalNNode2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v []model.Node) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐNode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNOrder2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Order) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrder2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrder2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrder(ctx context.Context, sel ast.SelectionSet, v *model.Order) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Order(ctx, sel, v)
}

func (ec *executionContext) marshalNOrderConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderConnection(ctx context.Context, sel ast.SelectionSet, v *model.OrderConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrderConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNOrderEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.OrderEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrderEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrderEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderEdge(ctx context.Context, sel ast.SelectionSet, v *model.OrderEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrderEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrderFulfillmentStatus2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderFulfillmentStatus(ctx context.Context, v any) (model.OrderFulfillmentStatus, error) {
	var res model.OrderFulfillmentStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderFulfillmentStatus2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderFulfillmentStatus(ctx context.Context, sel ast.SelectionSet, v model.OrderFulfillmentStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOrderLineItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.OrderLineItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrderLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrderLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItem(ctx context.Context, sel ast.SelectionSet, v *model.OrderLineItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrderLineItem(ctx, sel, v)
}

func (ec *executionContext) marshalNOrderLineItemConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItemConnection(ctx context.Context, sel ast.SelectionSet, v *model.OrderLineItemConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrderLineItemConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNOrderLineItemEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItemEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.OrderLineItemEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrderLineItemEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItemEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrderLineItemEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderLineItemEdge(ctx context.Context, sel ast.SelectionSet, v *model.OrderLineItemEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrderLineItemEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNPage2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Page) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPage(ctx context.Context, sel ast.SelectionSet, v *model.Page) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Page(ctx, sel, v)
}

func (ec *executionContext) marshalNPageConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageConnection(ctx context.Context, sel ast.SelectionSet, v *model.PageConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPageEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PageEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPageEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPageEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageEdge(ctx context.Context, sel ast.SelectionSet, v *model.PageEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *model.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPaymentSettings2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPaymentSettings(ctx context.Context, sel ast.SelectionSet, v *model.PaymentSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PaymentSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaymentTokenType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPaymentTokenType(ctx context.Context, v any) (model.PaymentTokenType, error) {
	var res model.PaymentTokenType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaymentTokenType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPaymentTokenType(ctx context.Context, sel ast.SelectionSet, v model.PaymentTokenType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPredictiveSearchType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchType(ctx context.Context, v any) (model.PredictiveSearchType, error) {
	var res model.PredictiveSearchType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPredictiveSearchType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchType(ctx context.Context, sel ast.SelectionSet, v model.PredictiveSearchType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPreferenceDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodType(ctx context.Context, v any) (model.PreferenceDeliveryMethodType, error) {
	var res model.PreferenceDeliveryMethodType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPreferenceDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodType(ctx context.Context, sel ast.SelectionSet, v model.PreferenceDeliveryMethodType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPreferenceDeliveryMethodType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodTypeᚄ(ctx context.Context, v any) ([]model.PreferenceDeliveryMethodType, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.PreferenceDeliveryMethodType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPreferenceDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPreferenceDeliveryMethodType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PreferenceDeliveryMethodType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPreferenceDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPricingValue2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPricingValue(ctx context.Context, sel ast.SelectionSet, v model.PricingValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PricingValue(ctx, sel, v)
}

func (ec *executionContext) marshalNProduct2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Product) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProduct2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProduct(ctx context.Context, sel ast.SelectionSet, v *model.Product) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) marshalNProductConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductConnection(ctx context.Context, sel ast.SelectionSet, v *model.ProductConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNProductEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProductEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProductEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductEdge(ctx context.Context, sel ast.SelectionSet, v *model.ProductEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProductFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductFilter(ctx context.Context, v any) (*model.ProductFilter, error) {
	res, err := ec.unmarshalInputProductFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProductOption2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProductOption) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProductOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductOption(ctx context.Context, sel ast.SelectionSet, v *model.ProductOption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductOption(ctx, sel, v)
}

func (ec *executionContext) marshalNProductOptionValue2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductOptionValueᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProductOptionValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductOptionValue2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductOptionValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProductOptionValue2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductOptionValue(ctx context.Context, sel ast.SelectionSet, v *model.ProductOptionValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductOptionValue(ctx, sel, v)
}

func (ec *executionContext) marshalNProductPriceRange2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductPriceRange(ctx context.Context, sel ast.SelectionSet, v *model.ProductPriceRange) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductPriceRange(ctx, sel, v)
}

func (ec *executionContext) marshalNProductVariant2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProductVariant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductVariant2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProductVariant2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariant(ctx context.Context, sel ast.SelectionSet, v *model.ProductVariant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductVariant(ctx, sel, v)
}

func (ec *executionContext) marshalNProductVariantComponent2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProductVariantComponent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductVariantComponent2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProductVariantComponent2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponent(ctx context.Context, sel ast.SelectionSet, v *model.ProductVariantComponent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductVariantComponent(ctx, sel, v)
}

func (ec *executionContext) marshalNProductVariantComponentConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponentConnection(ctx context.Context, sel ast.SelectionSet, v *model.ProductVariantComponentConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductVariantComponentConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNProductVariantComponentEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponentEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProductVariantComponentEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductVariantComponentEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProductVariantComponentEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantComponentEdge(ctx context.Context, sel ast.SelectionSet, v *model.ProductVariantComponentEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductVariantComponentEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNProductVariantConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantConnection(ctx context.Context, sel ast.SelectionSet, v *model.ProductVariantConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductVariantConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNProductVariantEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProductVariantEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductVariantEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProductVariantEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantEdge(ctx context.Context, sel ast.SelectionSet, v *model.ProductVariantEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductVariantEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNQuantityPriceBreak2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreakᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.QuantityPriceBreak) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuantityPriceBreak2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreak(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuantityPriceBreak2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreak(ctx context.Context, sel ast.SelectionSet, v *model.QuantityPriceBreak) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuantityPriceBreak(ctx, sel, v)
}

func (ec *executionContext) marshalNQuantityPriceBreakConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreakConnection(ctx context.Context, sel ast.SelectionSet, v *model.QuantityPriceBreakConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuantityPriceBreakConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNQuantityPriceBreakEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreakEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.QuantityPriceBreakEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuantityPriceBreakEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreakEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuantityPriceBreakEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityPriceBreakEdge(ctx context.Context, sel ast.SelectionSet, v *model.QuantityPriceBreakEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuantityPriceBreakEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNQuantityRule2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐQuantityRule(ctx context.Context, sel ast.SelectionSet, v *model.QuantityRule) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuantityRule(ctx, sel, v)
}

func (ec *executionContext) marshalNSEO2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSeo(ctx context.Context, sel ast.SelectionSet, v *model.Seo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SEO(ctx, sel, v)
}

func (ec *executionContext) marshalNSearchQuerySuggestion2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchQuerySuggestionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SearchQuerySuggestion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSearchQuerySuggestion2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchQuerySuggestion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSearchQuerySuggestion2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchQuerySuggestion(ctx context.Context, sel ast.SelectionSet, v *model.SearchQuerySuggestion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SearchQuerySuggestion(ctx, sel, v)
}

func (ec *executionContext) marshalNSearchResultItem2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItem(ctx context.Context, sel ast.SelectionSet, v model.SearchResultItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SearchResultItem(ctx, sel, v)
}

func (ec *executionContext) marshalNSearchResultItem2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItemᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SearchResultItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSearchResultItem2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSearchResultItemConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItemConnection(ctx context.Context, sel ast.SelectionSet, v *model.SearchResultItemConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SearchResultItemConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSearchResultItemEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItemEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SearchResultItemEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSearchResultItemEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItemEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSearchResultItemEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchResultItemEdge(ctx context.Context, sel ast.SelectionSet, v *model.SearchResultItemEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SearchResultItemEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSearchType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchType(ctx context.Context, v any) (model.SearchType, error) {
	var res model.SearchType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSearchType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchType(ctx context.Context, sel ast.SelectionSet, v model.SearchType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSearchableField2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchableField(ctx context.Context, v any) (model.SearchableField, error) {
	var res model.SearchableField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSearchableField2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchableField(ctx context.Context, sel ast.SelectionSet, v model.SearchableField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSelectedOption2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SelectedOption) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSelectedOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSelectedOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOption(ctx context.Context, sel ast.SelectionSet, v *model.SelectedOption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SelectedOption(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSelectedOptionInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOptionInputᚄ(ctx context.Context, v any) ([]*model.SelectedOptionInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.SelectedOptionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSelectedOptionInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOptionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSelectedOptionInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOptionInput(ctx context.Context, v any) (*model.SelectedOptionInput, error) {
	res, err := ec.unmarshalInputSelectedOptionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSellingPlan2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SellingPlan) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellingPlan2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSellingPlan2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlan(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlan(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanAllocation2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SellingPlanAllocation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellingPlanAllocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSellingPlanAllocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocation(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanAllocation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanAllocation(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanAllocationConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationConnection(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanAllocationConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanAllocationConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanAllocationEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SellingPlanAllocationEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellingPlanAllocationEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSellingPlanAllocationEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationEdge(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanAllocationEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanAllocationEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanAllocationPriceAdjustment2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationPriceAdjustmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SellingPlanAllocationPriceAdjustment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellingPlanAllocationPriceAdjustment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationPriceAdjustment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSellingPlanAllocationPriceAdjustment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocationPriceAdjustment(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanAllocationPriceAdjustment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanAllocationPriceAdjustment(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanCheckoutCharge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanCheckoutCharge(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanCheckoutCharge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanCheckoutCharge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSellingPlanCheckoutChargeType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanCheckoutChargeType(ctx context.Context, v any) (model.SellingPlanCheckoutChargeType, error) {
	var res model.SellingPlanCheckoutChargeType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSellingPlanCheckoutChargeType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanCheckoutChargeType(ctx context.Context, sel ast.SelectionSet, v model.SellingPlanCheckoutChargeType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSellingPlanCheckoutChargeValue2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanCheckoutChargeValue(ctx context.Context, sel ast.SelectionSet, v model.SellingPlanCheckoutChargeValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanCheckoutChargeValue(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanConnection(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SellingPlanEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellingPlanEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSellingPlanEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanEdge(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanGroup2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SellingPlanGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellingPlanGroup2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSellingPlanGroup2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroup(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanGroup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanGroup(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanGroupConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupConnection(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanGroupConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanGroupConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanGroupEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SellingPlanGroupEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellingPlanGroupEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSellingPlanGroupEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupEdge(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanGroupEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanGroupEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanGroupOption2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SellingPlanGroupOption) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellingPlanGroupOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSellingPlanGroupOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanGroupOption(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanGroupOption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanGroupOption(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSellingPlanInterval2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanInterval(ctx context.Context, v any) (model.SellingPlanInterval, error) {
	var res model.SellingPlanInterval
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSellingPlanInterval2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanInterval(ctx context.Context, sel ast.SelectionSet, v model.SellingPlanInterval) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSellingPlanOption2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SellingPlanOption) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellingPlanOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSellingPlanOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanOption(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanOption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanOption(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanPriceAdjustment2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanPriceAdjustmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SellingPlanPriceAdjustment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellingPlanPriceAdjustment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanPriceAdjustment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSellingPlanPriceAdjustment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanPriceAdjustment(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanPriceAdjustment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanPriceAdjustment(ctx, sel, v)
}

func (ec *executionContext) marshalNSellingPlanPriceAdjustmentValue2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanPriceAdjustmentValue(ctx context.Context, sel ast.SelectionSet, v model.SellingPlanPriceAdjustmentValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SellingPlanPriceAdjustmentValue(ctx, sel, v)
}

func (ec *executionContext) marshalNShippingRate2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShippingRate(ctx context.Context, sel ast.SelectionSet, v *model.ShippingRate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ShippingRate(ctx, sel, v)
}

func (ec *executionContext) marshalNShop2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShop(ctx context.Context, sel ast.SelectionSet, v *model.Shop) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Shop(ctx, sel, v)
}

func (ec *executionContext) marshalNShopPayInstallmentsFinancingPlan2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlanᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ShopPayInstallmentsFinancingPlan) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShopPayInstallmentsFinancingPlan2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNShopPayInstallmentsFinancingPlan2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlan(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayInstallmentsFinancingPlan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ShopPayInstallmentsFinancingPlan(ctx, sel, v)
}

func (ec *executionContext) unmarshalNShopPayInstallmentsFinancingPlanFrequency2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlanFrequency(ctx context.Context, v any) (model.ShopPayInstallmentsFinancingPlanFrequency, error) {
	var res model.ShopPayInstallmentsFinancingPlanFrequency
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNShopPayInstallmentsFinancingPlanFrequency2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlanFrequency(ctx context.Context, sel ast.SelectionSet, v model.ShopPayInstallmentsFinancingPlanFrequency) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNShopPayInstallmentsFinancingPlanTerm2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlanTermᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ShopPayInstallmentsFinancingPlanTerm) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShopPayInstallmentsFinancingPlanTerm2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlanTerm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNShopPayInstallmentsFinancingPlanTerm2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsFinancingPlanTerm(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayInstallmentsFinancingPlanTerm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ShopPayInstallmentsFinancingPlanTerm(ctx, sel, v)
}

func (ec *executionContext) unmarshalNShopPayInstallmentsLoan2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsLoan(ctx context.Context, v any) (model.ShopPayInstallmentsLoan, error) {
	var res model.ShopPayInstallmentsLoan
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNShopPayInstallmentsLoan2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsLoan(ctx context.Context, sel ast.SelectionSet, v model.ShopPayInstallmentsLoan) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNShopPayPaymentRequest2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequest(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ShopPayPaymentRequest(ctx, sel, v)
}

func (ec *executionContext) marshalNShopPayPaymentRequestDeliveryMethod2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ShopPayPaymentRequestDeliveryMethod) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShopPayPaymentRequestDeliveryMethod2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNShopPayPaymentRequestDeliveryMethod2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethod(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestDeliveryMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestDeliveryMethod(ctx, sel, v)
}

func (ec *executionContext) unmarshalNShopPayPaymentRequestDeliveryMethodInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodInput(ctx context.Context, v any) (*model.ShopPayPaymentRequestDeliveryMethodInput, error) {
	res, err := ec.unmarshalInputShopPayPaymentRequestDeliveryMethodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNShopPayPaymentRequestDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodType(ctx context.Context, v any) (model.ShopPayPaymentRequestDeliveryMethodType, error) {
	var res model.ShopPayPaymentRequestDeliveryMethodType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNShopPayPaymentRequestDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodType(ctx context.Context, sel ast.SelectionSet, v model.ShopPayPaymentRequestDeliveryMethodType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNShopPayPaymentRequestDiscount2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ShopPayPaymentRequestDiscount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShopPayPaymentRequestDiscount2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNShopPayPaymentRequestDiscount2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscount(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestDiscount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestDiscount(ctx, sel, v)
}

func (ec *executionContext) unmarshalNShopPayPaymentRequestDiscountInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountInput(ctx context.Context, v any) (*model.ShopPayPaymentRequestDiscountInput, error) {
	res, err := ec.unmarshalInputShopPayPaymentRequestDiscountInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNShopPayPaymentRequestInput2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestInput(ctx context.Context, v any) (model.ShopPayPaymentRequestInput, error) {
	res, err := ec.unmarshalInputShopPayPaymentRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNShopPayPaymentRequestLineItem2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestLineItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ShopPayPaymentRequestLineItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShopPayPaymentRequestLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestLineItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNShopPayPaymentRequestLineItem2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestLineItem(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestLineItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestLineItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNShopPayPaymentRequestLineItemInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestLineItemInput(ctx context.Context, v any) (*model.ShopPayPaymentRequestLineItemInput, error) {
	res, err := ec.unmarshalInputShopPayPaymentRequestLineItemInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNShopPayPaymentRequestShippingLine2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestShippingLineᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ShopPayPaymentRequestShippingLine) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShopPayPaymentRequestShippingLine2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestShippingLine(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNShopPayPaymentRequestShippingLine2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestShippingLine(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestShippingLine) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestShippingLine(ctx, sel, v)
}

func (ec *executionContext) unmarshalNShopPayPaymentRequestShippingLineInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestShippingLineInput(ctx context.Context, v any) (*model.ShopPayPaymentRequestShippingLineInput, error) {
	res, err := ec.unmarshalInputShopPayPaymentRequestShippingLineInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSitemap2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemap(ctx context.Context, sel ast.SelectionSet, v *model.Sitemap) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Sitemap(ctx, sel, v)
}

func (ec *executionContext) marshalNSitemapResourceInterface2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemapResourceInterface(ctx context.Context, sel ast.SelectionSet, v model.SitemapResourceInterface) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SitemapResourceInterface(ctx, sel, v)
}

func (ec *executionContext) marshalNSitemapResourceInterface2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemapResourceInterfaceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SitemapResourceInterface) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSitemapResourceInterface2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemapResourceInterface(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSitemapType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemapType(ctx context.Context, v any) (model.SitemapType, error) {
	var res model.SitemapType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSitemapType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemapType(ctx context.Context, sel ast.SelectionSet, v model.SitemapType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNStoreAvailability2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailabilityᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StoreAvailability) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStoreAvailability2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailability(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStoreAvailability2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailability(ctx context.Context, sel ast.SelectionSet, v *model.StoreAvailability) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StoreAvailability(ctx, sel, v)
}

func (ec *executionContext) marshalNStoreAvailabilityConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailabilityConnection(ctx context.Context, sel ast.SelectionSet, v *model.StoreAvailabilityConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StoreAvailabilityConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNStoreAvailabilityEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailabilityEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StoreAvailabilityEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStoreAvailabilityEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailabilityEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStoreAvailabilityEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStoreAvailabilityEdge(ctx context.Context, sel ast.SelectionSet, v *model.StoreAvailabilityEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StoreAvailabilityEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStringConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStringConnection(ctx context.Context, sel ast.SelectionSet, v *model.StringConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StringConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNStringEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStringEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StringEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStringEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStringEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStringEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐStringEdge(ctx context.Context, sel ast.SelectionSet, v *model.StringEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StringEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNSubmissionError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSubmissionErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SubmissionError) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubmissionError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSubmissionError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSubmissionError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSubmissionError(ctx context.Context, sel ast.SelectionSet, v *model.SubmissionError) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubmissionError(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSubmissionErrorCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSubmissionErrorCode(ctx context.Context, v any) (model.SubmissionErrorCode, error) {
	var res model.SubmissionErrorCode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSubmissionErrorCode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSubmissionErrorCode(ctx context.Context, sel ast.SelectionSet, v model.SubmissionErrorCode) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTaxonomyCategory2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTaxonomyCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TaxonomyCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTaxonomyCategory2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTaxonomyCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTaxonomyCategory2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTaxonomyCategory(ctx context.Context, sel ast.SelectionSet, v *model.TaxonomyCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaxonomyCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTokenizedPaymentInputV32githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTokenizedPaymentInputV3(ctx context.Context, v any) (model.TokenizedPaymentInputV3, error) {
	res, err := ec.unmarshalInputTokenizedPaymentInputV3(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTransactionKind2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransactionKind(ctx context.Context, v any) (model.TransactionKind, error) {
	var res model.TransactionKind
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTransactionKind2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransactionKind(ctx context.Context, sel ast.SelectionSet, v model.TransactionKind) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTransactionStatus2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransactionStatus(ctx context.Context, v any) (model.TransactionStatus, error) {
	var res model.TransactionStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTransactionStatus2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransactionStatus(ctx context.Context, sel ast.SelectionSet, v model.TransactionStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNURL2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNURL2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUnitSystem2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitSystem(ctx context.Context, v any) (model.UnitSystem, error) {
	var res model.UnitSystem
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUnitSystem2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitSystem(ctx context.Context, sel ast.SelectionSet, v model.UnitSystem) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNUnsignedInt642string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUnsignedInt642string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUrlRedirect2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirectᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.URLRedirect) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUrlRedirect2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirect(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUrlRedirect2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirect(ctx context.Context, sel ast.SelectionSet, v *model.URLRedirect) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UrlRedirect(ctx, sel, v)
}

func (ec *executionContext) marshalNUrlRedirectConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirectConnection(ctx context.Context, sel ast.SelectionSet, v *model.URLRedirectConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UrlRedirectConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNUrlRedirectEdge2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirectEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.URLRedirectEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUrlRedirectEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirectEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUrlRedirectEdge2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐURLRedirectEdge(ctx context.Context, sel ast.SelectionSet, v *model.URLRedirectEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UrlRedirectEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNUserError2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserError) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserError2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserError(ctx context.Context, sel ast.SelectionSet, v *model.UserError) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserError(ctx, sel, v)
}

func (ec *executionContext) marshalNUserErrorsShopPayPaymentRequestSessionUserErrors2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorsShopPayPaymentRequestSessionUserErrorsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserErrorsShopPayPaymentRequestSessionUserErrors) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserErrorsShopPayPaymentRequestSessionUserErrors2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorsShopPayPaymentRequestSessionUserErrors(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserErrorsShopPayPaymentRequestSessionUserErrors2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorsShopPayPaymentRequestSessionUserErrors(ctx context.Context, sel ast.SelectionSet, v *model.UserErrorsShopPayPaymentRequestSessionUserErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserErrorsShopPayPaymentRequestSessionUserErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNVideoSource2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐVideoSourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VideoSource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVideoSource2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐVideoSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVideoSource2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐVideoSource(ctx context.Context, sel ast.SelectionSet, v *model.VideoSource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VideoSource(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWeightUnit2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐWeightUnit(ctx context.Context, v any) (model.WeightUnit, error) {
	var res model.WeightUnit
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWeightUnit2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐWeightUnit(ctx context.Context, sel ast.SelectionSet, v model.WeightUnit) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOApplePayWalletContentInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐApplePayWalletContentInput(ctx context.Context, v any) (*model.ApplePayWalletContentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApplePayWalletContentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArticle2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticle(ctx context.Context, sel ast.SelectionSet, v *model.Article) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Article(ctx, sel, v)
}

func (ec *executionContext) marshalOArticleAuthor2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleAuthor(ctx context.Context, sel ast.SelectionSet, v *model.ArticleAuthor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArticleAuthor(ctx, sel, v)
}

func (ec *executionContext) unmarshalOArticleSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleSortKeys(ctx context.Context, v any) (*model.ArticleSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ArticleSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArticleSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐArticleSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.ArticleSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAttribute2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttribute(ctx context.Context, sel ast.SelectionSet, v *model.Attribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Attribute(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAttributeInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInputᚄ(ctx context.Context, v any) ([]*model.AttributeInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.AttributeInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAttributeInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAttributeInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAvailableShippingRates2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐAvailableShippingRates(ctx context.Context, sel ast.SelectionSet, v *model.AvailableShippingRates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AvailableShippingRates(ctx, sel, v)
}

func (ec *executionContext) marshalOBlog2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlog(ctx context.Context, sel ast.SelectionSet, v *model.Blog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Blog(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlogSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogSortKeys(ctx context.Context, v any) (*model.BlogSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BlogSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlogSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBlogSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.BlogSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOBrand2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBrand(ctx context.Context, sel ast.SelectionSet, v *model.Brand) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Brand(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBuyerInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐBuyerInput(ctx context.Context, v any) (*model.BuyerInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBuyerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCart2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCart(ctx context.Context, sel ast.SelectionSet, v *model.Cart) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Cart(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartAddressInput(ctx context.Context, v any) (*model.CartAddressInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCartAttributesUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartAttributesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartAttributesUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartAttributesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartBillingAddressUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartBillingAddressUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartBillingAddressUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartBillingAddressUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartBuyerIdentityInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartBuyerIdentityInput(ctx context.Context, v any) (*model.CartBuyerIdentityInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartBuyerIdentityInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCartBuyerIdentityUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartBuyerIdentityUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartBuyerIdentityUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartBuyerIdentityUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartCardSource2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCardSource(ctx context.Context, v any) (*model.CartCardSource, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CartCardSource)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCartCardSource2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCardSource(ctx context.Context, sel ast.SelectionSet, v *model.CartCardSource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCartCompletionAction2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCompletionAction(ctx context.Context, sel ast.SelectionSet, v model.CartCompletionAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartCompletionAction(ctx, sel, v)
}

func (ec *executionContext) marshalOCartCompletionAttemptResult2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCompletionAttemptResult(ctx context.Context, sel ast.SelectionSet, v model.CartCompletionAttemptResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartCompletionAttemptResult(ctx, sel, v)
}

func (ec *executionContext) marshalOCartCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartCreatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartCreatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartDeliveryAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryAddressInput(ctx context.Context, v any) (*model.CartDeliveryAddressInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartDeliveryAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCartDeliveryAddressesAddPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryAddressesAddPayload(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryAddressesAddPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartDeliveryAddressesAddPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartDeliveryAddressesRemovePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryAddressesRemovePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryAddressesRemovePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartDeliveryAddressesRemovePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartDeliveryAddressesReplacePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryAddressesReplacePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryAddressesReplacePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartDeliveryAddressesReplacePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartDeliveryAddressesUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryAddressesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryAddressesUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartDeliveryAddressesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartDeliveryCoordinatesPreference2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryCoordinatesPreference(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryCoordinatesPreference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartDeliveryCoordinatesPreference(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartDeliveryCoordinatesPreferenceInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryCoordinatesPreferenceInput(ctx context.Context, v any) (*model.CartDeliveryCoordinatesPreferenceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartDeliveryCoordinatesPreferenceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCartDeliveryInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryInput(ctx context.Context, v any) (*model.CartDeliveryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartDeliveryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCartDeliveryOption2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryOption(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartDeliveryOption(ctx, sel, v)
}

func (ec *executionContext) marshalOCartDeliveryPreference2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryPreference(ctx context.Context, sel ast.SelectionSet, v *model.CartDeliveryPreference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartDeliveryPreference(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartDeliveryPreferenceInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDeliveryPreferenceInput(ctx context.Context, v any) (*model.CartDeliveryPreferenceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartDeliveryPreferenceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCartDirectPaymentMethodInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDirectPaymentMethodInput(ctx context.Context, v any) (*model.CartDirectPaymentMethodInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartDirectPaymentMethodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCartDiscountCodesUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartDiscountCodesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartDiscountCodesUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartDiscountCodesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartErrorCode(ctx context.Context, v any) (*model.CartErrorCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CartErrorCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCartErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartErrorCode(ctx context.Context, sel ast.SelectionSet, v *model.CartErrorCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCartFreePaymentMethodInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartFreePaymentMethodInput(ctx context.Context, v any) (*model.CartFreePaymentMethodInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartFreePaymentMethodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCartGiftCardCodesRemovePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartGiftCardCodesRemovePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartGiftCardCodesRemovePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartGiftCardCodesRemovePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartGiftCardCodesUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartGiftCardCodesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartGiftCardCodesUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartGiftCardCodesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartInput(ctx context.Context, v any) (*model.CartInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCartInputMetafieldInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartInputMetafieldInputᚄ(ctx context.Context, v any) ([]*model.CartInputMetafieldInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CartInputMetafieldInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCartInputMetafieldInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartInputMetafieldInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCartLineInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineInputᚄ(ctx context.Context, v any) ([]*model.CartLineInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CartLineInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCartLineInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLineInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCartLinesAddPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLinesAddPayload(ctx context.Context, sel ast.SelectionSet, v *model.CartLinesAddPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartLinesAddPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartLinesRemovePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLinesRemovePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartLinesRemovePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartLinesRemovePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartLinesUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartLinesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartLinesUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartLinesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartMetafieldDeletePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartMetafieldDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartMetafieldDeletePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartMetafieldDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartMetafieldsSetPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartMetafieldsSetPayload(ctx context.Context, sel ast.SelectionSet, v *model.CartMetafieldsSetPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartMetafieldsSetPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartNoteUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartNoteUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartNoteUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartNoteUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartPaymentUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPaymentUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartPaymentUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartPaymentUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartPreferences2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPreferences(ctx context.Context, sel ast.SelectionSet, v *model.CartPreferences) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartPreferences(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartPreferencesInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPreferencesInput(ctx context.Context, v any) (*model.CartPreferencesInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartPreferencesInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCartPrepareForCompletionPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPrepareForCompletionPayload(ctx context.Context, sel ast.SelectionSet, v *model.CartPrepareForCompletionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartPrepareForCompletionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartPrepareForCompletionResult2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartPrepareForCompletionResult(ctx context.Context, sel ast.SelectionSet, v model.CartPrepareForCompletionResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartPrepareForCompletionResult(ctx, sel, v)
}

func (ec *executionContext) marshalOCartRemovePersonalDataPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartRemovePersonalDataPayload(ctx context.Context, sel ast.SelectionSet, v *model.CartRemovePersonalDataPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartRemovePersonalDataPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartSelectableAddressInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressInputᚄ(ctx context.Context, v any) ([]*model.CartSelectableAddressInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CartSelectableAddressInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCartSelectableAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectableAddressInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCartSelectedDeliveryOptionsUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSelectedDeliveryOptionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CartSelectedDeliveryOptionsUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartSelectedDeliveryOptionsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartSubmitForCompletionPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSubmitForCompletionPayload(ctx context.Context, sel ast.SelectionSet, v *model.CartSubmitForCompletionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartSubmitForCompletionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCartSubmitForCompletionResult2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartSubmitForCompletionResult(ctx context.Context, sel ast.SelectionSet, v model.CartSubmitForCompletionResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartSubmitForCompletionResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCartWalletPaymentMethodInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCartWalletPaymentMethodInput(ctx context.Context, v any) (*model.CartWalletPaymentMethodInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartWalletPaymentMethodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCategoryFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCategoryFilter(ctx context.Context, v any) (*model.CategoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCategoryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCheckout2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckout(ctx context.Context, sel ast.SelectionSet, v *model.Checkout) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Checkout(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutAttributesUpdateV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutAttributesUpdateV2Payload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutAttributesUpdateV2Payload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutAttributesUpdateV2Payload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCheckoutBuyerIdentityInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutBuyerIdentityInput(ctx context.Context, v any) (*model.CheckoutBuyerIdentityInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCheckoutBuyerIdentityInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCheckoutCompleteFreePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCompleteFreePayload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutCompleteFreePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutCompleteFreePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutCompleteWithCreditCardV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCompleteWithCreditCardV2Payload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutCompleteWithCreditCardV2Payload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutCompleteWithCreditCardV2Payload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutCompleteWithTokenizedPaymentV3Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCompleteWithTokenizedPaymentV3Payload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutCompleteWithTokenizedPaymentV3Payload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutCompleteWithTokenizedPaymentV3Payload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutCreatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutCustomerAssociateV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCustomerAssociateV2Payload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutCustomerAssociateV2Payload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutCustomerAssociateV2Payload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutCustomerDisassociateV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutCustomerDisassociateV2Payload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutCustomerDisassociateV2Payload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutCustomerDisassociateV2Payload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutDiscountCodeApplyV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutDiscountCodeApplyV2Payload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutDiscountCodeApplyV2Payload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutDiscountCodeApplyV2Payload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutDiscountCodeRemovePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutDiscountCodeRemovePayload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutDiscountCodeRemovePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutDiscountCodeRemovePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutEmailUpdateV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutEmailUpdateV2Payload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutEmailUpdateV2Payload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutEmailUpdateV2Payload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCheckoutErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutErrorCode(ctx context.Context, v any) (*model.CheckoutErrorCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CheckoutErrorCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCheckoutErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutErrorCode(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutErrorCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCheckoutGiftCardRemoveV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutGiftCardRemoveV2Payload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutGiftCardRemoveV2Payload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutGiftCardRemoveV2Payload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutGiftCardsAppendPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutGiftCardsAppendPayload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutGiftCardsAppendPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutGiftCardsAppendPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCheckoutLineItemInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemInputᚄ(ctx context.Context, v any) ([]*model.CheckoutLineItemInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.CheckoutLineItemInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCheckoutLineItemInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCheckoutLineItemsAddPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemsAddPayload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutLineItemsAddPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutLineItemsAddPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutLineItemsRemovePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemsRemovePayload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutLineItemsRemovePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutLineItemsRemovePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutLineItemsReplacePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemsReplacePayload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutLineItemsReplacePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutLineItemsReplacePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutLineItemsUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutLineItemsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutLineItemsUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutLineItemsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutShippingAddressUpdateV2Payload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutShippingAddressUpdateV2Payload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutShippingAddressUpdateV2Payload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutShippingAddressUpdateV2Payload(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckoutShippingLineUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCheckoutShippingLineUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CheckoutShippingLineUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckoutShippingLineUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCollection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollection(ctx context.Context, sel ast.SelectionSet, v *model.Collection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Collection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCollectionSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionSortKeys(ctx context.Context, v any) (*model.CollectionSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CollectionSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCollectionSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCollectionSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.CollectionSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOColor2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOColor2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOCompanyContact2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCompanyContact(ctx context.Context, sel ast.SelectionSet, v *model.CompanyContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompanyContact(ctx, sel, v)
}

func (ec *executionContext) marshalOCount2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCount(ctx context.Context, sel ast.SelectionSet, v *model.Count) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Count(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCountryCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx context.Context, v any) (*model.CountryCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CountryCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCountryCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCountryCode(ctx context.Context, sel ast.SelectionSet, v *model.CountryCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCreditCard2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCreditCard(ctx context.Context, sel ast.SelectionSet, v *model.CreditCard) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreditCard(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCropRegion2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCropRegion(ctx context.Context, v any) (*model.CropRegion, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CropRegion)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCropRegion2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCropRegion(ctx context.Context, sel ast.SelectionSet, v *model.CropRegion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCustomer2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomer(ctx context.Context, sel ast.SelectionSet, v *model.Customer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Customer(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerAccessToken2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessToken(ctx context.Context, sel ast.SelectionSet, v *model.CustomerAccessToken) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerAccessToken(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerAccessTokenCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessTokenCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerAccessTokenCreatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerAccessTokenCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerAccessTokenCreateWithMultipassPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessTokenCreateWithMultipassPayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerAccessTokenCreateWithMultipassPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerAccessTokenCreateWithMultipassPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerAccessTokenDeletePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessTokenDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerAccessTokenDeletePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerAccessTokenDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerAccessTokenRenewPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAccessTokenRenewPayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerAccessTokenRenewPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerAccessTokenRenewPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerActivateByUrlPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerActivateByURLPayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerActivateByURLPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerActivateByUrlPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerActivatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerActivatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerActivatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerActivatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerAddressCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAddressCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerAddressCreatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerAddressCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerAddressDeletePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAddressDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerAddressDeletePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerAddressDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerAddressUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerAddressUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerAddressUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerAddressUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerCreatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerDefaultAddressUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerDefaultAddressUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerDefaultAddressUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerDefaultAddressUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCustomerErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerErrorCode(ctx context.Context, v any) (*model.CustomerErrorCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CustomerErrorCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCustomerErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerErrorCode(ctx context.Context, sel ast.SelectionSet, v *model.CustomerErrorCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCustomerRecoverPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerRecoverPayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerRecoverPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerRecoverPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerResetByUrlPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerResetByURLPayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerResetByURLPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerResetByUrlPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerResetPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerResetPayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerResetPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerResetPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerUpdatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐCustomerUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomerUpdatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalODateTime2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalODeliveryAddressValidationStrategy2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryAddressValidationStrategy(ctx context.Context, v any) (*model.DeliveryAddressValidationStrategy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.DeliveryAddressValidationStrategy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeliveryAddressValidationStrategy2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐDeliveryAddressValidationStrategy(ctx context.Context, sel ast.SelectionSet, v *model.DeliveryAddressValidationStrategy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFilterPresentation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterPresentation(ctx context.Context, v any) (*model.FilterPresentation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.FilterPresentation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFilterPresentation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFilterPresentation(ctx context.Context, sel ast.SelectionSet, v *model.FilterPresentation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOFulfillment2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Fulfillment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFulfillment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐFulfillment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGeoCoordinateInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐGeoCoordinateInput(ctx context.Context, v any) (*model.GeoCoordinateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGeoCoordinateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHTML2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHTML2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOISO8601DateTime2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOISO8601DateTime2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImage(ctx context.Context, sel ast.SelectionSet, v *model.Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) unmarshalOImageContentType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageContentType(ctx context.Context, v any) (*model.ImageContentType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ImageContentType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOImageContentType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageContentType(ctx context.Context, sel ast.SelectionSet, v *model.ImageContentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOImageTransformInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐImageTransformInput(ctx context.Context, v any) (*model.ImageTransformInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputImageTransformInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v any) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) unmarshalOJSON2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJSON2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOLanguageCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguageCode(ctx context.Context, v any) (*model.LanguageCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.LanguageCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLanguageCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLanguageCode(ctx context.Context, sel ast.SelectionSet, v *model.LanguageCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLocationSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationSortKeys(ctx context.Context, v any) (*model.LocationSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.LocationSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLocationSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐLocationSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.LocationSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMailingAddress2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddress(ctx context.Context, sel ast.SelectionSet, v *model.MailingAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MailingAddress(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMailingAddressInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMailingAddressInput(ctx context.Context, v any) (*model.MailingAddressInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMailingAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMarket2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMarket(ctx context.Context, sel ast.SelectionSet, v *model.Market) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Market(ctx, sel, v)
}

func (ec *executionContext) marshalOMedia2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMedia(ctx context.Context, sel ast.SelectionSet, v model.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Media(ctx, sel, v)
}

func (ec *executionContext) marshalOMediaImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaImage(ctx context.Context, sel ast.SelectionSet, v *model.MediaImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MediaImage(ctx, sel, v)
}

func (ec *executionContext) marshalOMediaPresentation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMediaPresentation(ctx context.Context, sel ast.SelectionSet, v *model.MediaPresentation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MediaPresentation(ctx, sel, v)
}

func (ec *executionContext) marshalOMenu2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenu(ctx context.Context, sel ast.SelectionSet, v *model.Menu) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Menu(ctx, sel, v)
}

func (ec *executionContext) marshalOMenuItemResource2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMenuItemResource(ctx context.Context, sel ast.SelectionSet, v model.MenuItemResource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MenuItemResource(ctx, sel, v)
}

func (ec *executionContext) marshalOMetafield2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Metafield) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMetafield2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafield(ctx context.Context, sel ast.SelectionSet, v *model.Metafield) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Metafield(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMetafieldDeleteErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldDeleteErrorCode(ctx context.Context, v any) (*model.MetafieldDeleteErrorCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MetafieldDeleteErrorCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMetafieldDeleteErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldDeleteErrorCode(ctx context.Context, sel ast.SelectionSet, v *model.MetafieldDeleteErrorCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMetafieldFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldFilter(ctx context.Context, v any) (*model.MetafieldFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMetafieldFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMetafieldReference2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReference(ctx context.Context, sel ast.SelectionSet, v model.MetafieldReference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MetafieldReference(ctx, sel, v)
}

func (ec *executionContext) marshalOMetafieldReferenceConnection2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldReferenceConnection(ctx context.Context, sel ast.SelectionSet, v *model.MetafieldReferenceConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MetafieldReferenceConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMetafieldsSetUserErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldsSetUserErrorCode(ctx context.Context, v any) (*model.MetafieldsSetUserErrorCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MetafieldsSetUserErrorCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMetafieldsSetUserErrorCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetafieldsSetUserErrorCode(ctx context.Context, sel ast.SelectionSet, v *model.MetafieldsSetUserErrorCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMetaobject2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobject(ctx context.Context, sel ast.SelectionSet, v *model.Metaobject) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Metaobject(ctx, sel, v)
}

func (ec *executionContext) marshalOMetaobjectField2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectField(ctx context.Context, sel ast.SelectionSet, v *model.MetaobjectField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MetaobjectField(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMetaobjectHandleInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectHandleInput(ctx context.Context, v any) (*model.MetaobjectHandleInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMetaobjectHandleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMetaobjectSEO2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMetaobjectSeo(ctx context.Context, sel ast.SelectionSet, v *model.MetaobjectSeo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MetaobjectSEO(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMoneyInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyInput(ctx context.Context, v any) (*model.MoneyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMoneyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMoneyV22ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐMoneyV2(ctx context.Context, sel ast.SelectionSet, v *model.MoneyV2) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MoneyV2(ctx, sel, v)
}

func (ec *executionContext) marshalONode2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalOOrder2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrder(ctx context.Context, sel ast.SelectionSet, v *model.Order) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Order(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrderCancelReason2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderCancelReason(ctx context.Context, v any) (*model.OrderCancelReason, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OrderCancelReason)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderCancelReason2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderCancelReason(ctx context.Context, sel ast.SelectionSet, v *model.OrderCancelReason) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOOrderFinancialStatus2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderFinancialStatus(ctx context.Context, v any) (*model.OrderFinancialStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OrderFinancialStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderFinancialStatus2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderFinancialStatus(ctx context.Context, sel ast.SelectionSet, v *model.OrderFinancialStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOOrderSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderSortKeys(ctx context.Context, v any) (*model.OrderSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OrderSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐOrderSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.OrderSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPage(ctx context.Context, sel ast.SelectionSet, v *model.Page) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Page(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPageSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageSortKeys(ctx context.Context, v any) (*model.PageSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PageSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPageSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPageSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.PageSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPaginatedSitemapResources2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPaginatedSitemapResources(ctx context.Context, sel ast.SelectionSet, v *model.PaginatedSitemapResources) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginatedSitemapResources(ctx, sel, v)
}

func (ec *executionContext) marshalOPayment2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPayment(ctx context.Context, sel ast.SelectionSet, v *model.Payment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Payment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPredictiveSearchLimitScope2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchLimitScope(ctx context.Context, v any) (*model.PredictiveSearchLimitScope, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PredictiveSearchLimitScope)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPredictiveSearchLimitScope2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchLimitScope(ctx context.Context, sel ast.SelectionSet, v *model.PredictiveSearchLimitScope) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPredictiveSearchResult2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.PredictiveSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PredictiveSearchResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPredictiveSearchType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchTypeᚄ(ctx context.Context, v any) ([]model.PredictiveSearchType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.PredictiveSearchType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPredictiveSearchType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPredictiveSearchType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PredictiveSearchType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPredictiveSearchType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPredictiveSearchType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPreferenceDeliveryMethodType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodTypeᚄ(ctx context.Context, v any) ([]model.PreferenceDeliveryMethodType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.PreferenceDeliveryMethodType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPreferenceDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPreferenceDeliveryMethodType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PreferenceDeliveryMethodType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPreferenceDeliveryMethodType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPreferenceDeliveryMethodType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPriceRangeFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPriceRangeFilter(ctx context.Context, v any) (*model.PriceRangeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPriceRangeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProduct2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProduct2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProduct(ctx context.Context, sel ast.SelectionSet, v *model.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductCollectionSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductCollectionSortKeys(ctx context.Context, v any) (*model.ProductCollectionSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProductCollectionSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProductCollectionSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductCollectionSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.ProductCollectionSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProductFilter2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductFilterᚄ(ctx context.Context, v any) ([]*model.ProductFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ProductFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProductFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProductImageSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductImageSortKeys(ctx context.Context, v any) (*model.ProductImageSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProductImageSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProductImageSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductImageSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.ProductImageSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProductMediaSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductMediaSortKeys(ctx context.Context, v any) (*model.ProductMediaSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProductMediaSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProductMediaSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductMediaSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.ProductMediaSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOProductOptionValueSwatch2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductOptionValueSwatch(ctx context.Context, sel ast.SelectionSet, v *model.ProductOptionValueSwatch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductOptionValueSwatch(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductRecommendationIntent2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductRecommendationIntent(ctx context.Context, v any) (*model.ProductRecommendationIntent, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProductRecommendationIntent)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProductRecommendationIntent2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductRecommendationIntent(ctx context.Context, sel ast.SelectionSet, v *model.ProductRecommendationIntent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProductSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductSortKeys(ctx context.Context, v any) (*model.ProductSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProductSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProductSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.ProductSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOProductVariant2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariant(ctx context.Context, sel ast.SelectionSet, v *model.ProductVariant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductVariant(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductVariantSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantSortKeys(ctx context.Context, v any) (*model.ProductVariantSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProductVariantSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProductVariantSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐProductVariantSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.ProductVariantSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPurchasingCompany2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐPurchasingCompany(ctx context.Context, sel ast.SelectionSet, v *model.PurchasingCompany) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PurchasingCompany(ctx, sel, v)
}

func (ec *executionContext) marshalOSEO2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSeo(ctx context.Context, sel ast.SelectionSet, v *model.Seo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SEO(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSearchPrefixQueryType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchPrefixQueryType(ctx context.Context, v any) (*model.SearchPrefixQueryType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SearchPrefixQueryType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSearchPrefixQueryType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchPrefixQueryType(ctx context.Context, sel ast.SelectionSet, v *model.SearchPrefixQueryType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSearchSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchSortKeys(ctx context.Context, v any) (*model.SearchSortKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SearchSortKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSearchSortKeys2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchSortKeys(ctx context.Context, sel ast.SelectionSet, v *model.SearchSortKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSearchType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchTypeᚄ(ctx context.Context, v any) ([]model.SearchType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.SearchType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSearchType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSearchType2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SearchType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSearchType2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOSearchUnavailableProductsType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchUnavailableProductsType(ctx context.Context, v any) (*model.SearchUnavailableProductsType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SearchUnavailableProductsType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSearchUnavailableProductsType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchUnavailableProductsType(ctx context.Context, sel ast.SelectionSet, v *model.SearchUnavailableProductsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSearchableField2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchableFieldᚄ(ctx context.Context, v any) ([]model.SearchableField, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.SearchableField, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSearchableField2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchableField(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSearchableField2ᚕgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchableFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SearchableField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSearchableField2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSearchableField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOSelectedOptionInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOptionInputᚄ(ctx context.Context, v any) ([]*model.SelectedOptionInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.SelectedOptionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSelectedOptionInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSelectedOptionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSellingPlanAllocation2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanAllocation(ctx context.Context, sel ast.SelectionSet, v *model.SellingPlanAllocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellingPlanAllocation(ctx, sel, v)
}

func (ec *executionContext) marshalOSellingPlanBillingPolicy2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanBillingPolicy(ctx context.Context, sel ast.SelectionSet, v model.SellingPlanBillingPolicy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellingPlanBillingPolicy(ctx, sel, v)
}

func (ec *executionContext) marshalOSellingPlanDeliveryPolicy2githubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSellingPlanDeliveryPolicy(ctx context.Context, sel ast.SelectionSet, v model.SellingPlanDeliveryPolicy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellingPlanDeliveryPolicy(ctx, sel, v)
}

func (ec *executionContext) marshalOShippingRate2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShippingRateᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ShippingRate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShippingRate2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShippingRate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOShippingRate2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShippingRate(ctx context.Context, sel ast.SelectionSet, v *model.ShippingRate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShippingRate(ctx, sel, v)
}

func (ec *executionContext) marshalOShopPayInstallmentsPricing2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsPricing(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayInstallmentsPricing) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPayInstallmentsPricing(ctx, sel, v)
}

func (ec *executionContext) marshalOShopPayInstallmentsProductVariantPricing2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayInstallmentsProductVariantPricing(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayInstallmentsProductVariantPricing) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPayInstallmentsProductVariantPricing(ctx, sel, v)
}

func (ec *executionContext) marshalOShopPayPaymentRequestContactField2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestContactField(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestContactField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestContactField(ctx, sel, v)
}

func (ec *executionContext) unmarshalOShopPayPaymentRequestDeliveryMethodInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodInputᚄ(ctx context.Context, v any) ([]*model.ShopPayPaymentRequestDeliveryMethodInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ShopPayPaymentRequestDeliveryMethodInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNShopPayPaymentRequestDeliveryMethodInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOShopPayPaymentRequestDeliveryMethodType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodType(ctx context.Context, v any) (*model.ShopPayPaymentRequestDeliveryMethodType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ShopPayPaymentRequestDeliveryMethodType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOShopPayPaymentRequestDeliveryMethodType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDeliveryMethodType(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestDeliveryMethodType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOShopPayPaymentRequestDiscount2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ShopPayPaymentRequestDiscount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShopPayPaymentRequestDiscount2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOShopPayPaymentRequestDiscountInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountInputᚄ(ctx context.Context, v any) ([]*model.ShopPayPaymentRequestDiscountInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ShopPayPaymentRequestDiscountInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNShopPayPaymentRequestDiscountInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestDiscountInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOShopPayPaymentRequestImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestImage(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestImage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOShopPayPaymentRequestImageInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestImageInput(ctx context.Context, v any) (*model.ShopPayPaymentRequestImageInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputShopPayPaymentRequestImageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOShopPayPaymentRequestLineItemInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestLineItemInputᚄ(ctx context.Context, v any) ([]*model.ShopPayPaymentRequestLineItemInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ShopPayPaymentRequestLineItemInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNShopPayPaymentRequestLineItemInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestLineItemInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOShopPayPaymentRequestReceipt2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestReceipt(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestReceipt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestReceipt(ctx, sel, v)
}

func (ec *executionContext) marshalOShopPayPaymentRequestSession2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestSession(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestSession) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestSession(ctx, sel, v)
}

func (ec *executionContext) marshalOShopPayPaymentRequestSessionCreatePayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestSessionCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestSessionCreatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestSessionCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOShopPayPaymentRequestSessionSubmitPayload2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestSessionSubmitPayload(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestSessionSubmitPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestSessionSubmitPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOShopPayPaymentRequestShippingLineInput2ᚕᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestShippingLineInputᚄ(ctx context.Context, v any) ([]*model.ShopPayPaymentRequestShippingLineInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ShopPayPaymentRequestShippingLineInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNShopPayPaymentRequestShippingLineInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestShippingLineInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOShopPayPaymentRequestTotalShippingPrice2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestTotalShippingPrice(ctx context.Context, sel ast.SelectionSet, v *model.ShopPayPaymentRequestTotalShippingPrice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPayPaymentRequestTotalShippingPrice(ctx, sel, v)
}

func (ec *executionContext) unmarshalOShopPayPaymentRequestTotalShippingPriceInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayPaymentRequestTotalShippingPriceInput(ctx context.Context, v any) (*model.ShopPayPaymentRequestTotalShippingPriceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputShopPayPaymentRequestTotalShippingPriceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOShopPayWalletContentInput2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPayWalletContentInput(ctx context.Context, v any) (*model.ShopPayWalletContentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputShopPayWalletContentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOShopPolicy2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPolicy(ctx context.Context, sel ast.SelectionSet, v *model.ShopPolicy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPolicy(ctx, sel, v)
}

func (ec *executionContext) marshalOShopPolicyWithDefault2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐShopPolicyWithDefault(ctx context.Context, sel ast.SelectionSet, v *model.ShopPolicyWithDefault) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopPolicyWithDefault(ctx, sel, v)
}

func (ec *executionContext) marshalOSitemapImage2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSitemapImage(ctx context.Context, sel ast.SelectionSet, v *model.SitemapImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SitemapImage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSwatch2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐSwatch(ctx context.Context, sel ast.SelectionSet, v *model.Swatch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Swatch(ctx, sel, v)
}

func (ec *executionContext) marshalOTaxonomyCategory2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTaxonomyCategory(ctx context.Context, sel ast.SelectionSet, v *model.TaxonomyCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TaxonomyCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTaxonomyMetafieldFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTaxonomyMetafieldFilter(ctx context.Context, v any) (*model.TaxonomyMetafieldFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTaxonomyMetafieldFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTransaction2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransaction(ctx context.Context, sel ast.SelectionSet, v *model.Transaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Transaction(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTransactionStatus2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransactionStatus(ctx context.Context, v any) (*model.TransactionStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TransactionStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTransactionStatus2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐTransactionStatus(ctx context.Context, sel ast.SelectionSet, v *model.TransactionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOURL2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOURL2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOUnitPriceMeasurement2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitPriceMeasurement(ctx context.Context, sel ast.SelectionSet, v *model.UnitPriceMeasurement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UnitPriceMeasurement(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUnitPriceMeasurementMeasuredType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitPriceMeasurementMeasuredType(ctx context.Context, v any) (*model.UnitPriceMeasurementMeasuredType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UnitPriceMeasurementMeasuredType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUnitPriceMeasurementMeasuredType2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitPriceMeasurementMeasuredType(ctx context.Context, sel ast.SelectionSet, v *model.UnitPriceMeasurementMeasuredType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUnitPriceMeasurementMeasuredUnit2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitPriceMeasurementMeasuredUnit(ctx context.Context, v any) (*model.UnitPriceMeasurementMeasuredUnit, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UnitPriceMeasurementMeasuredUnit)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUnitPriceMeasurementMeasuredUnit2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUnitPriceMeasurementMeasuredUnit(ctx context.Context, sel ast.SelectionSet, v *model.UnitPriceMeasurementMeasuredUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserErrorsShopPayPaymentRequestSessionUserErrorsCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorsShopPayPaymentRequestSessionUserErrorsCode(ctx context.Context, v any) (*model.UserErrorsShopPayPaymentRequestSessionUserErrorsCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UserErrorsShopPayPaymentRequestSessionUserErrorsCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserErrorsShopPayPaymentRequestSessionUserErrorsCode2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐUserErrorsShopPayPaymentRequestSessionUserErrorsCode(ctx context.Context, sel ast.SelectionSet, v *model.UserErrorsShopPayPaymentRequestSessionUserErrorsCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOVariantOptionFilter2ᚖgithubᚗcomᚋpistolricksᚋkbeautyᚑapiᚋgraphᚋmodelᚐVariantOptionFilter(ctx context.Context, v any) (*model.VariantOptionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVariantOptionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
